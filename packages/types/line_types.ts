// deno-lint-ignore-file
/*
 * @module
 * LINEJS Types - Autogenerated by Thrift Compiler (0.20.0)
 */
type Int64 = number | bigint;
import type { Buffer } from "node:buffer";

export enum ApplicationType {
	_IOS = "IOS",
	IOS = 16,
	_IOS_RC = "IOS_RC",
	IOS_RC = 17,
	_IOS_BETA = "IOS_BETA",
	IOS_BETA = 18,
	_IOS_ALPHA = "IOS_ALPHA",
	IOS_ALPHA = 19,
	_ANDROID = "ANDROID",
	ANDROID = 32,
	_ANDROID_RC = "ANDROID_RC",
	ANDROID_RC = 33,
	_ANDROID_BETA = "ANDROID_BETA",
	ANDROID_BETA = 34,
	_ANDROID_ALPHA = "ANDROID_ALPHA",
	ANDROID_ALPHA = 35,
	_WAP = "WAP",
	WAP = 48,
	_WAP_RC = "WAP_RC",
	WAP_RC = 49,
	_WAP_BETA = "WAP_BETA",
	WAP_BETA = 50,
	_WAP_ALPHA = "WAP_ALPHA",
	WAP_ALPHA = 51,
	_BOT = "BOT",
	BOT = 64,
	_BOT_RC = "BOT_RC",
	BOT_RC = 65,
	_BOT_BETA = "BOT_BETA",
	BOT_BETA = 66,
	_BOT_ALPHA = "BOT_ALPHA",
	BOT_ALPHA = 67,
	_WEB = "WEB",
	WEB = 80,
	_WEB_RC = "WEB_RC",
	WEB_RC = 81,
	_WEB_BETA = "WEB_BETA",
	WEB_BETA = 82,
	_WEB_ALPHA = "WEB_ALPHA",
	WEB_ALPHA = 83,
	_DESKTOPWIN = "DESKTOPWIN",
	DESKTOPWIN = 96,
	_DESKTOPWIN_RC = "DESKTOPWIN_RC",
	DESKTOPWIN_RC = 97,
	_DESKTOPWIN_BETA = "DESKTOPWIN_BETA",
	DESKTOPWIN_BETA = 98,
	_DESKTOPWIN_ALPHA = "DESKTOPWIN_ALPHA",
	DESKTOPWIN_ALPHA = 99,
	_DESKTOPMAC = "DESKTOPMAC",
	DESKTOPMAC = 112,
	_DESKTOPMAC_RC = "DESKTOPMAC_RC",
	DESKTOPMAC_RC = 113,
	_DESKTOPMAC_BETA = "DESKTOPMAC_BETA",
	DESKTOPMAC_BETA = 114,
	_DESKTOPMAC_ALPHA = "DESKTOPMAC_ALPHA",
	DESKTOPMAC_ALPHA = 115,
	_CHANNELGW = "CHANNELGW",
	CHANNELGW = 128,
	_CHANNELGW_RC = "CHANNELGW_RC",
	CHANNELGW_RC = 129,
	_CHANNELGW_BETA = "CHANNELGW_BETA",
	CHANNELGW_BETA = 130,
	_CHANNELGW_ALPHA = "CHANNELGW_ALPHA",
	CHANNELGW_ALPHA = 131,
	_CHANNELCP = "CHANNELCP",
	CHANNELCP = 144,
	_CHANNELCP_RC = "CHANNELCP_RC",
	CHANNELCP_RC = 145,
	_CHANNELCP_BETA = "CHANNELCP_BETA",
	CHANNELCP_BETA = 146,
	_CHANNELCP_ALPHA = "CHANNELCP_ALPHA",
	CHANNELCP_ALPHA = 147,
	_WINPHONE = "WINPHONE",
	WINPHONE = 160,
	_WINPHONE_RC = "WINPHONE_RC",
	WINPHONE_RC = 161,
	_WINPHONE_BETA = "WINPHONE_BETA",
	WINPHONE_BETA = 162,
	_WINPHONE_ALPHA = "WINPHONE_ALPHA",
	WINPHONE_ALPHA = 163,
	_BLACKBERRY = "BLACKBERRY",
	BLACKBERRY = 176,
	_BLACKBERRY_RC = "BLACKBERRY_RC",
	BLACKBERRY_RC = 177,
	_BLACKBERRY_BETA = "BLACKBERRY_BETA",
	BLACKBERRY_BETA = 178,
	_BLACKBERRY_ALPHA = "BLACKBERRY_ALPHA",
	BLACKBERRY_ALPHA = 179,
	_WINMETRO = "WINMETRO",
	WINMETRO = 192,
	_WINMETRO_RC = "WINMETRO_RC",
	WINMETRO_RC = 193,
	_WINMETRO_BETA = "WINMETRO_BETA",
	WINMETRO_BETA = 194,
	_WINMETRO_ALPHA = "WINMETRO_ALPHA",
	WINMETRO_ALPHA = 195,
	_S40 = "S40",
	S40 = 208,
	_S40_RC = "S40_RC",
	S40_RC = 209,
	_S40_BETA = "S40_BETA",
	S40_BETA = 210,
	_S40_ALPHA = "S40_ALPHA",
	S40_ALPHA = 211,
	_CHRONO = "CHRONO",
	CHRONO = 224,
	_CHRONO_RC = "CHRONO_RC",
	CHRONO_RC = 225,
	_CHRONO_BETA = "CHRONO_BETA",
	CHRONO_BETA = 226,
	_CHRONO_ALPHA = "CHRONO_ALPHA",
	CHRONO_ALPHA = 227,
	_TIZEN = "TIZEN",
	TIZEN = 256,
	_TIZEN_RC = "TIZEN_RC",
	TIZEN_RC = 257,
	_TIZEN_BETA = "TIZEN_BETA",
	TIZEN_BETA = 258,
	_TIZEN_ALPHA = "TIZEN_ALPHA",
	TIZEN_ALPHA = 259,
	_VIRTUAL = "VIRTUAL",
	VIRTUAL = 272,
	_FIREFOXOS = "FIREFOXOS",
	FIREFOXOS = 288,
	_FIREFOXOS_RC = "FIREFOXOS_RC",
	FIREFOXOS_RC = 289,
	_FIREFOXOS_BETA = "FIREFOXOS_BETA",
	FIREFOXOS_BETA = 290,
	_FIREFOXOS_ALPHA = "FIREFOXOS_ALPHA",
	FIREFOXOS_ALPHA = 291,
	_IOSIPAD = "IOSIPAD",
	IOSIPAD = 304,
	_IOSIPAD_RC = "IOSIPAD_RC",
	IOSIPAD_RC = 305,
	_IOSIPAD_BETA = "IOSIPAD_BETA",
	IOSIPAD_BETA = 306,
	_IOSIPAD_ALPHA = "IOSIPAD_ALPHA",
	IOSIPAD_ALPHA = 307,
	_BIZIOS = "BIZIOS",
	BIZIOS = 320,
	_BIZIOS_RC = "BIZIOS_RC",
	BIZIOS_RC = 321,
	_BIZIOS_BETA = "BIZIOS_BETA",
	BIZIOS_BETA = 322,
	_BIZIOS_ALPHA = "BIZIOS_ALPHA",
	BIZIOS_ALPHA = 323,
	_BIZANDROID = "BIZANDROID",
	BIZANDROID = 336,
	_BIZANDROID_RC = "BIZANDROID_RC",
	BIZANDROID_RC = 337,
	_BIZANDROID_BETA = "BIZANDROID_BETA",
	BIZANDROID_BETA = 338,
	_BIZANDROID_ALPHA = "BIZANDROID_ALPHA",
	BIZANDROID_ALPHA = 339,
	_BIZBOT = "BIZBOT",
	BIZBOT = 352,
	_BIZBOT_RC = "BIZBOT_RC",
	BIZBOT_RC = 353,
	_BIZBOT_BETA = "BIZBOT_BETA",
	BIZBOT_BETA = 354,
	_BIZBOT_ALPHA = "BIZBOT_ALPHA",
	BIZBOT_ALPHA = 355,
	_CHROMEOS = "CHROMEOS",
	CHROMEOS = 368,
	_CHROMEOS_RC = "CHROMEOS_RC",
	CHROMEOS_RC = 369,
	_CHROMEOS_BETA = "CHROMEOS_BETA",
	CHROMEOS_BETA = 370,
	_CHROMEOS_ALPHA = "CHROMEOS_ALPHA",
	CHROMEOS_ALPHA = 371,
	_ANDROIDLITE = "ANDROIDLITE",
	ANDROIDLITE = 384,
	_ANDROIDLITE_RC = "ANDROIDLITE_RC",
	ANDROIDLITE_RC = 385,
	_ANDROIDLITE_BETA = "ANDROIDLITE_BETA",
	ANDROIDLITE_BETA = 386,
	_ANDROIDLITE_ALPHA = "ANDROIDLITE_ALPHA",
	ANDROIDLITE_ALPHA = 387,
	_WIN10 = "WIN10",
	WIN10 = 400,
	_WIN10_RC = "WIN10_RC",
	WIN10_RC = 401,
	_WIN10_BETA = "WIN10_BETA",
	WIN10_BETA = 402,
	_WIN10_ALPHA = "WIN10_ALPHA",
	WIN10_ALPHA = 403,
	_BIZWEB = "BIZWEB",
	BIZWEB = 416,
	_BIZWEB_RC = "BIZWEB_RC",
	BIZWEB_RC = 417,
	_BIZWEB_BETA = "BIZWEB_BETA",
	BIZWEB_BETA = 418,
	_BIZWEB_ALPHA = "BIZWEB_ALPHA",
	BIZWEB_ALPHA = 419,
	_DUMMYPRIMARY = "DUMMYPRIMARY",
	DUMMYPRIMARY = 432,
	_DUMMYPRIMARY_RC = "DUMMYPRIMARY_RC",
	DUMMYPRIMARY_RC = 433,
	_DUMMYPRIMARY_BETA = "DUMMYPRIMARY_BETA",
	DUMMYPRIMARY_BETA = 434,
	_DUMMYPRIMARY_ALPHA = "DUMMYPRIMARY_ALPHA",
	DUMMYPRIMARY_ALPHA = 435,
	_SQUARE = "SQUARE",
	SQUARE = 448,
	_SQUARE_RC = "SQUARE_RC",
	SQUARE_RC = 449,
	_SQUARE_BETA = "SQUARE_BETA",
	SQUARE_BETA = 450,
	_SQUARE_ALPHA = "SQUARE_ALPHA",
	SQUARE_ALPHA = 451,
	_INTERNAL = "INTERNAL",
	INTERNAL = 464,
	_INTERNAL_RC = "INTERNAL_RC",
	INTERNAL_RC = 465,
	_INTERNAL_BETA = "INTERNAL_BETA",
	INTERNAL_BETA = 466,
	_INTERNAL_ALPHA = "INTERNAL_ALPHA",
	INTERNAL_ALPHA = 467,
	_CLOVAFRIENDS = "CLOVAFRIENDS",
	CLOVAFRIENDS = 480,
	_CLOVAFRIENDS_RC = "CLOVAFRIENDS_RC",
	CLOVAFRIENDS_RC = 481,
	_CLOVAFRIENDS_BETA = "CLOVAFRIENDS_BETA",
	CLOVAFRIENDS_BETA = 482,
	_CLOVAFRIENDS_ALPHA = "CLOVAFRIENDS_ALPHA",
	CLOVAFRIENDS_ALPHA = 483,
	_WATCHOS = "WATCHOS",
	WATCHOS = 496,
	_WATCHOS_RC = "WATCHOS_RC",
	WATCHOS_RC = 497,
	_WATCHOS_BETA = "WATCHOS_BETA",
	WATCHOS_BETA = 498,
	_WATCHOS_ALPHA = "WATCHOS_ALPHA",
	WATCHOS_ALPHA = 499,
	_OPENCHAT_PLUG = "OPENCHAT_PLUG",
	OPENCHAT_PLUG = 512,
	_OPENCHAT_PLUG_RC = "OPENCHAT_PLUG_RC",
	OPENCHAT_PLUG_RC = 513,
	_OPENCHAT_PLUG_BETA = "OPENCHAT_PLUG_BETA",
	OPENCHAT_PLUG_BETA = 514,
	_OPENCHAT_PLUG_ALPHA = "OPENCHAT_PLUG_ALPHA",
	OPENCHAT_PLUG_ALPHA = 515,
	_ANDROIDSECONDARY = "ANDROIDSECONDARY",
	ANDROIDSECONDARY = 528,
	_ANDROIDSECONDARY_RC = "ANDROIDSECONDARY_RC",
	ANDROIDSECONDARY_RC = 529,
	_ANDROIDSECONDARY_BETA = "ANDROIDSECONDARY_BETA",
	ANDROIDSECONDARY_BETA = 530,
	_ANDROIDSECONDARY_ALPHA = "ANDROIDSECONDARY_ALPHA",
	ANDROIDSECONDARY_ALPHA = 531,
	_WEAROS = "WEAROS",
	WEAROS = 544,
	_WEAROS_RC = "WEAROS_RC",
	WEAROS_RC = 545,
	_WEAROS_BETA = "WEAROS_BETA",
	WEAROS_BETA = 546,
	_WEAROS_ALPHA = "WEAROS_ALPHA",
	WEAROS_ALPHA = 547,
}

export enum ErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 0,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 1,
	_DB_FAILED = "DB_FAILED",
	DB_FAILED = 2,
	_INVALID_STATE = "INVALID_STATE",
	INVALID_STATE = 3,
	_EXCESSIVE_ACCESS = "EXCESSIVE_ACCESS",
	EXCESSIVE_ACCESS = 4,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 5,
	_INVALID_LENGTH = "INVALID_LENGTH",
	INVALID_LENGTH = 6,
	_NOT_AVAILABLE_USER = "NOT_AVAILABLE_USER",
	NOT_AVAILABLE_USER = 7,
	_NOT_AUTHORIZED_DEVICE = "NOT_AUTHORIZED_DEVICE",
	NOT_AUTHORIZED_DEVICE = 8,
	_INVALID_MID = "INVALID_MID",
	INVALID_MID = 9,
	_NOT_A_MEMBER = "NOT_A_MEMBER",
	NOT_A_MEMBER = 10,
	_INCOMPATIBLE_APP_VERSION = "INCOMPATIBLE_APP_VERSION",
	INCOMPATIBLE_APP_VERSION = 11,
	_NOT_READY = "NOT_READY",
	NOT_READY = 12,
	_NOT_AVAILABLE_SESSION = "NOT_AVAILABLE_SESSION",
	NOT_AVAILABLE_SESSION = 13,
	_NOT_AUTHORIZED_SESSION = "NOT_AUTHORIZED_SESSION",
	NOT_AUTHORIZED_SESSION = 14,
	_SYSTEM_ERROR = "SYSTEM_ERROR",
	SYSTEM_ERROR = 15,
	_NO_AVAILABLE_VERIFICATION_METHOD = "NO_AVAILABLE_VERIFICATION_METHOD",
	NO_AVAILABLE_VERIFICATION_METHOD = 16,
	_NOT_AUTHENTICATED = "NOT_AUTHENTICATED",
	NOT_AUTHENTICATED = 17,
	_INVALID_IDENTITY_CREDENTIAL = "INVALID_IDENTITY_CREDENTIAL",
	INVALID_IDENTITY_CREDENTIAL = 18,
	_NOT_AVAILABLE_IDENTITY_IDENTIFIER = "NOT_AVAILABLE_IDENTITY_IDENTIFIER",
	NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 20,
	_NO_SUCH_IDENTITY_IDENFIER = "NO_SUCH_IDENTITY_IDENFIER",
	NO_SUCH_IDENTITY_IDENFIER = 21,
	_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY",
	DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
	_ILLEGAL_IDENTITY_CREDENTIAL = "ILLEGAL_IDENTITY_CREDENTIAL",
	ILLEGAL_IDENTITY_CREDENTIAL = 23,
	_UNKNOWN_CHANNEL = "UNKNOWN_CHANNEL",
	UNKNOWN_CHANNEL = 24,
	_NO_SUCH_MESSAGE_BOX = "NO_SUCH_MESSAGE_BOX",
	NO_SUCH_MESSAGE_BOX = 25,
	_NOT_AVAILABLE_MESSAGE_BOX = "NOT_AVAILABLE_MESSAGE_BOX",
	NOT_AVAILABLE_MESSAGE_BOX = 26,
	_CHANNEL_DOES_NOT_MATCH = "CHANNEL_DOES_NOT_MATCH",
	CHANNEL_DOES_NOT_MATCH = 27,
	_NOT_YOUR_MESSAGE = "NOT_YOUR_MESSAGE",
	NOT_YOUR_MESSAGE = 28,
	_MESSAGE_DEFINED_ERROR = "MESSAGE_DEFINED_ERROR",
	MESSAGE_DEFINED_ERROR = 29,
	_USER_CANNOT_ACCEPT_PRESENTS = "USER_CANNOT_ACCEPT_PRESENTS",
	USER_CANNOT_ACCEPT_PRESENTS = 30,
	_USER_NOT_STICKER_OWNER = "USER_NOT_STICKER_OWNER",
	USER_NOT_STICKER_OWNER = 32,
	_MAINTENANCE_ERROR = "MAINTENANCE_ERROR",
	MAINTENANCE_ERROR = 33,
	_ACCOUNT_NOT_MATCHED = "ACCOUNT_NOT_MATCHED",
	ACCOUNT_NOT_MATCHED = 34,
	_ABUSE_BLOCK = "ABUSE_BLOCK",
	ABUSE_BLOCK = 35,
	_NOT_FRIEND = "NOT_FRIEND",
	NOT_FRIEND = 36,
	_NOT_ALLOWED_CALL = "NOT_ALLOWED_CALL",
	NOT_ALLOWED_CALL = 37,
	_BLOCK_FRIEND = "BLOCK_FRIEND",
	BLOCK_FRIEND = 38,
	_INCOMPATIBLE_VOIP_VERSION = "INCOMPATIBLE_VOIP_VERSION",
	INCOMPATIBLE_VOIP_VERSION = 39,
	_INVALID_SNS_ACCESS_TOKEN = "INVALID_SNS_ACCESS_TOKEN",
	INVALID_SNS_ACCESS_TOKEN = 40,
	_EXTERNAL_SERVICE_NOT_AVAILABLE = "EXTERNAL_SERVICE_NOT_AVAILABLE",
	EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
	_NOT_ALLOWED_ADD_CONTACT = "NOT_ALLOWED_ADD_CONTACT",
	NOT_ALLOWED_ADD_CONTACT = 42,
	_NOT_CERTIFICATED = "NOT_CERTIFICATED",
	NOT_CERTIFICATED = 43,
	_NOT_ALLOWED_SECONDARY_DEVICE = "NOT_ALLOWED_SECONDARY_DEVICE",
	NOT_ALLOWED_SECONDARY_DEVICE = 44,
	_INVALID_PIN_CODE = "INVALID_PIN_CODE",
	INVALID_PIN_CODE = 45,
	_NOT_FOUND_IDENTITY_CREDENTIAL = "NOT_FOUND_IDENTITY_CREDENTIAL",
	NOT_FOUND_IDENTITY_CREDENTIAL = 46,
	_EXCEED_FILE_MAX_SIZE = "EXCEED_FILE_MAX_SIZE",
	EXCEED_FILE_MAX_SIZE = 47,
	_EXCEED_DAILY_QUOTA = "EXCEED_DAILY_QUOTA",
	EXCEED_DAILY_QUOTA = 48,
	_NOT_SUPPORT_SEND_FILE = "NOT_SUPPORT_SEND_FILE",
	NOT_SUPPORT_SEND_FILE = 49,
	_MUST_UPGRADE = "MUST_UPGRADE",
	MUST_UPGRADE = 50,
	_NOT_AVAILABLE_PIN_CODE_SESSION = "NOT_AVAILABLE_PIN_CODE_SESSION",
	NOT_AVAILABLE_PIN_CODE_SESSION = 51,
	_EXPIRED_REVISION = "EXPIRED_REVISION",
	EXPIRED_REVISION = 52,
	_NOT_YET_PHONE_NUMBER = "NOT_YET_PHONE_NUMBER",
	NOT_YET_PHONE_NUMBER = 54,
	_BAD_CALL_NUMBER = "BAD_CALL_NUMBER",
	BAD_CALL_NUMBER = 55,
	_UNAVAILABLE_CALL_NUMBER = "UNAVAILABLE_CALL_NUMBER",
	UNAVAILABLE_CALL_NUMBER = 56,
	_NOT_SUPPORT_CALL_SERVICE = "NOT_SUPPORT_CALL_SERVICE",
	NOT_SUPPORT_CALL_SERVICE = 57,
	_CONGESTION_CONTROL = "CONGESTION_CONTROL",
	CONGESTION_CONTROL = 58,
	_NO_BALANCE = "NO_BALANCE",
	NO_BALANCE = 59,
	_NOT_PERMITTED_CALLER_ID = "NOT_PERMITTED_CALLER_ID",
	NOT_PERMITTED_CALLER_ID = 60,
	_NO_CALLER_ID_LIMIT_EXCEEDED = "NO_CALLER_ID_LIMIT_EXCEEDED",
	NO_CALLER_ID_LIMIT_EXCEEDED = 61,
	_CALLER_ID_VERIFICATION_REQUIRED = "CALLER_ID_VERIFICATION_REQUIRED",
	CALLER_ID_VERIFICATION_REQUIRED = 62,
	_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED",
	NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
	_MESSAGE_NOT_FOUND = "MESSAGE_NOT_FOUND",
	MESSAGE_NOT_FOUND = 64,
	_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT",
	INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
	_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED",
	ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
	_ACCOUNT_MIGRATION_PINCODE_BLOCKED = "ACCOUNT_MIGRATION_PINCODE_BLOCKED",
	ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
	_INVALID_PASSWORD_FORMAT = "INVALID_PASSWORD_FORMAT",
	INVALID_PASSWORD_FORMAT = 69,
	_FEATURE_RESTRICTED = "FEATURE_RESTRICTED",
	FEATURE_RESTRICTED = 70,
	_MESSAGE_NOT_DESTRUCTIBLE = "MESSAGE_NOT_DESTRUCTIBLE",
	MESSAGE_NOT_DESTRUCTIBLE = 71,
	_PAID_CALL_REDEEM_FAILED = "PAID_CALL_REDEEM_FAILED",
	PAID_CALL_REDEEM_FAILED = 72,
	_PREVENTED_JOIN_BY_TICKET = "PREVENTED_JOIN_BY_TICKET",
	PREVENTED_JOIN_BY_TICKET = 73,
	_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT",
	SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
	_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY",
	SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
	_SECURITY_CENTER_NOT_VERIFIED = "SECURITY_CENTER_NOT_VERIFIED",
	SECURITY_CENTER_NOT_VERIFIED = 77,
	_SECURITY_CENTER_BLOCKED_BY_SETTING = "SECURITY_CENTER_BLOCKED_BY_SETTING",
	SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
	_SECURITY_CENTER_BLOCKED = "SECURITY_CENTER_BLOCKED",
	SECURITY_CENTER_BLOCKED = 79,
	_TALK_PROXY_EXCEPTION = "TALK_PROXY_EXCEPTION",
	TALK_PROXY_EXCEPTION = 80,
	_E2EE_INVALID_PROTOCOL = "E2EE_INVALID_PROTOCOL",
	E2EE_INVALID_PROTOCOL = 81,
	_E2EE_RETRY_ENCRYPT = "E2EE_RETRY_ENCRYPT",
	E2EE_RETRY_ENCRYPT = 82,
	_E2EE_UPDATE_SENDER_KEY = "E2EE_UPDATE_SENDER_KEY",
	E2EE_UPDATE_SENDER_KEY = 83,
	_E2EE_UPDATE_RECEIVER_KEY = "E2EE_UPDATE_RECEIVER_KEY",
	E2EE_UPDATE_RECEIVER_KEY = 84,
	_E2EE_INVALID_ARGUMENT = "E2EE_INVALID_ARGUMENT",
	E2EE_INVALID_ARGUMENT = 85,
	_E2EE_INVALID_VERSION = "E2EE_INVALID_VERSION",
	E2EE_INVALID_VERSION = 86,
	_E2EE_SENDER_DISABLED = "E2EE_SENDER_DISABLED",
	E2EE_SENDER_DISABLED = 87,
	_E2EE_RECEIVER_DISABLED = "E2EE_RECEIVER_DISABLED",
	E2EE_RECEIVER_DISABLED = 88,
	_E2EE_SENDER_NOT_ALLOWED = "E2EE_SENDER_NOT_ALLOWED",
	E2EE_SENDER_NOT_ALLOWED = 89,
	_E2EE_RECEIVER_NOT_ALLOWED = "E2EE_RECEIVER_NOT_ALLOWED",
	E2EE_RECEIVER_NOT_ALLOWED = 90,
	_E2EE_RESEND_FAIL = "E2EE_RESEND_FAIL",
	E2EE_RESEND_FAIL = 91,
	_E2EE_RESEND_OK = "E2EE_RESEND_OK",
	E2EE_RESEND_OK = 92,
	_HITOKOTO_BACKUP_NO_AVAILABLE_DATA = "HITOKOTO_BACKUP_NO_AVAILABLE_DATA",
	HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
	_E2EE_UPDATE_PRIMARY_DEVICE = "E2EE_UPDATE_PRIMARY_DEVICE",
	E2EE_UPDATE_PRIMARY_DEVICE = 94,
	_SUCCESS = "SUCCESS",
	SUCCESS = 95,
	_CANCEL = "CANCEL",
	CANCEL = 96,
	_E2EE_PRIMARY_NOT_SUPPORT = "E2EE_PRIMARY_NOT_SUPPORT",
	E2EE_PRIMARY_NOT_SUPPORT = 97,
	_E2EE_RETRY_PLAIN = "E2EE_RETRY_PLAIN",
	E2EE_RETRY_PLAIN = 98,
	_E2EE_RECREATE_GROUP_KEY = "E2EE_RECREATE_GROUP_KEY",
	E2EE_RECREATE_GROUP_KEY = 99,
	_E2EE_GROUP_TOO_MANY_MEMBERS = "E2EE_GROUP_TOO_MANY_MEMBERS",
	E2EE_GROUP_TOO_MANY_MEMBERS = 100,
	_SERVER_BUSY = "SERVER_BUSY",
	SERVER_BUSY = 101,
	_NOT_ALLOWED_ADD_FOLLOW = "NOT_ALLOWED_ADD_FOLLOW",
	NOT_ALLOWED_ADD_FOLLOW = 102,
	_INCOMING_FRIEND_REQUEST_LIMIT = "INCOMING_FRIEND_REQUEST_LIMIT",
	INCOMING_FRIEND_REQUEST_LIMIT = 103,
	_OUTGOING_FRIEND_REQUEST_LIMIT = "OUTGOING_FRIEND_REQUEST_LIMIT",
	OUTGOING_FRIEND_REQUEST_LIMIT = 104,
	_OUTGOING_FRIEND_REQUEST_QUOTA = "OUTGOING_FRIEND_REQUEST_QUOTA",
	OUTGOING_FRIEND_REQUEST_QUOTA = 105,
	_DUPLICATED = "DUPLICATED",
	DUPLICATED = 106,
	_BANNED = "BANNED",
	BANNED = 107,
	_NOT_AN_INVITEE = "NOT_AN_INVITEE",
	NOT_AN_INVITEE = 108,
	_NOT_AN_OUTSIDER = "NOT_AN_OUTSIDER",
	NOT_AN_OUTSIDER = 109,
	_EMPTY_GROUP = "EMPTY_GROUP",
	EMPTY_GROUP = 111,
	_EXCEED_FOLLOW_LIMIT = "EXCEED_FOLLOW_LIMIT",
	EXCEED_FOLLOW_LIMIT = 112,
	_UNSUPPORTED_ACCOUNT_TYPE = "UNSUPPORTED_ACCOUNT_TYPE",
	UNSUPPORTED_ACCOUNT_TYPE = 113,
	_AGREEMENT_REQUIRED = "AGREEMENT_REQUIRED",
	AGREEMENT_REQUIRED = 114,
	_SHOULD_RETRY = "SHOULD_RETRY",
	SHOULD_RETRY = 115,
	_OVER_MAX_CHATS_PER_USER = "OVER_MAX_CHATS_PER_USER",
	OVER_MAX_CHATS_PER_USER = 116,
	_NOT_AVAILABLE_API = "NOT_AVAILABLE_API",
	NOT_AVAILABLE_API = 117,
	_INVALID_OTP = "INVALID_OTP",
	INVALID_OTP = 118,
	_MUST_REFRESH_V3_TOKEN = "MUST_REFRESH_V3_TOKEN",
	MUST_REFRESH_V3_TOKEN = 119,
	_ALREADY_EXPIRED = "ALREADY_EXPIRED",
	ALREADY_EXPIRED = 120,
	_USER_NOT_STICON_OWNER = "USER_NOT_STICON_OWNER",
	USER_NOT_STICON_OWNER = 121,
	_REFRESH_MEDIA_FLOW = "REFRESH_MEDIA_FLOW",
	REFRESH_MEDIA_FLOW = 122,
	_EXCEED_FOLLOWER_LIMIT = "EXCEED_FOLLOWER_LIMIT",
	EXCEED_FOLLOWER_LIMIT = 123,
}

export enum LiffErrorCode {
	_INVALID_REQUEST = "INVALID_REQUEST",
	INVALID_REQUEST = 1,
	_UNAUTHORIZED = "UNAUTHORIZED",
	UNAUTHORIZED = 2,
	_CONSENT_REQUIRED = "CONSENT_REQUIRED",
	CONSENT_REQUIRED = 3,
	_VERSION_UPDATE_REQUIRED = "VERSION_UPDATE_REQUIRED",
	VERSION_UPDATE_REQUIRED = 4,
	_COMPREHENSIVE_AGREEMENT_REQUIRED = "COMPREHENSIVE_AGREEMENT_REQUIRED",
	COMPREHENSIVE_AGREEMENT_REQUIRED = 5,
	_SPLASH_SCREEN_REQUIRED = "SPLASH_SCREEN_REQUIRED",
	SPLASH_SCREEN_REQUIRED = 6,
	_SERVER_ERROR = "SERVER_ERROR",
	SERVER_ERROR = 100,
}

export enum ChannelErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 0,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 1,
	_CONNECTION_ERROR = "CONNECTION_ERROR",
	CONNECTION_ERROR = 2,
	_AUTHENTICATIONI_FAILED = "AUTHENTICATIONI_FAILED",
	AUTHENTICATIONI_FAILED = 3,
	_NEED_PERMISSION_APPROVAL = "NEED_PERMISSION_APPROVAL",
	NEED_PERMISSION_APPROVAL = 4,
	_COIN_NOT_USABLE = "COIN_NOT_USABLE",
	COIN_NOT_USABLE = 5,
	_WEBVIEW_NOT_ALLOWED = "WEBVIEW_NOT_ALLOWED",
	WEBVIEW_NOT_ALLOWED = 6,
}

export enum PreconditionFailedExtraInfo {
	_DUPLICATED_DISPLAY_NAME = "DUPLICATED_DISPLAY_NAME",
	DUPLICATED_DISPLAY_NAME = 0,
}

export enum SquareErrorCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 500,
	_NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
	NOT_IMPLEMENTED = 501,
	_TRY_AGAIN_LATER = "TRY_AGAIN_LATER",
	TRY_AGAIN_LATER = 503,
	_MAINTENANCE = "MAINTENANCE",
	MAINTENANCE = 505,
	_NO_PRESENCE_EXISTS = "NO_PRESENCE_EXISTS",
	NO_PRESENCE_EXISTS = 506,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 400,
	_AUTHENTICATION_FAILURE = "AUTHENTICATION_FAILURE",
	AUTHENTICATION_FAILURE = 401,
	_FORBIDDEN = "FORBIDDEN",
	FORBIDDEN = 403,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 404,
	_REVISION_MISMATCH = "REVISION_MISMATCH",
	REVISION_MISMATCH = 409,
	_PRECONDITION_FAILED = "PRECONDITION_FAILED",
	PRECONDITION_FAILED = 410,
}

export enum HomeExceptionCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 3,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 4,
	_HUMAN_VERIFICATION_REQUIRED = "HUMAN_VERIFICATION_REQUIRED",
	HUMAN_VERIFICATION_REQUIRED = 5,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 100,
	_APP_UPGRADE_REQUIRED = "APP_UPGRADE_REQUIRED",
	APP_UPGRADE_REQUIRED = 101,
	_NO_CONTENT = "NO_CONTENT",
	NO_CONTENT = 102,
}

export enum ChatappErrorCode {
	_INVALID_REQUEST = "INVALID_REQUEST",
	INVALID_REQUEST = 1,
	_UNAUTHORIZED = "UNAUTHORIZED",
	UNAUTHORIZED = 2,
	_SERVER_ERROR = "SERVER_ERROR",
	SERVER_ERROR = 100,
}

export enum MembershipErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 0,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 1,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 5,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 20,
	_MAINTENANCE_ERROR = "MAINTENANCE_ERROR",
	MAINTENANCE_ERROR = 33,
}

export enum BotErrorCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_BOT_NOT_FOUND = "BOT_NOT_FOUND",
	BOT_NOT_FOUND = 1,
	_BOT_NOT_AVAILABLE = "BOT_NOT_AVAILABLE",
	BOT_NOT_AVAILABLE = 2,
	_NOT_A_MEMBER = "NOT_A_MEMBER",
	NOT_A_MEMBER = 3,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 401,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 400,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 500,
}

export enum BotExternalErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 0,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 1,
}

export enum AccessTokenRefreshErrorCode {
	_INVALID_REQUEST = "INVALID_REQUEST",
	INVALID_REQUEST = 1000,
	_RETRY_REQUIRED = "RETRY_REQUIRED",
	RETRY_REQUIRED = 1001,
}

export enum AccountEapConnectErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 4,
	_HUMAN_VERIFICATION_REQUIRED = "HUMAN_VERIFICATION_REQUIRED",
	HUMAN_VERIFICATION_REQUIRED = 5,
	_APP_UPGRADE_REQUIRED = "APP_UPGRADE_REQUIRED",
	APP_UPGRADE_REQUIRED = 101,
}

export enum PwlessCredentialErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_EXTERNAL_SERVICE_UNAVAILABLE = "EXTERNAL_SERVICE_UNAVAILABLE",
	EXTERNAL_SERVICE_UNAVAILABLE = 3,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 4,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 100,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 101,
	_FORBIDDEN = "FORBIDDEN",
	FORBIDDEN = 102,
	_FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR",
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = 201,
}

export enum SecondAuthFactorPinCodeErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 3,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 100,
	_APP_UPGRADE_REQUIRED = "APP_UPGRADE_REQUIRED",
	APP_UPGRADE_REQUIRED = 101,
}

export enum AuthErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 3,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 4,
	_HUMAN_VERIFICATION_REQUIRED = "HUMAN_VERIFICATION_REQUIRED",
	HUMAN_VERIFICATION_REQUIRED = 5,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 100,
	_APP_UPGRADE_REQUIRED = "APP_UPGRADE_REQUIRED",
	APP_UPGRADE_REQUIRED = 101,
}

export enum SecondaryPwlessLoginErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 1,
	_LOGIN_NOT_ALLOWED = "LOGIN_NOT_ALLOWED",
	LOGIN_NOT_ALLOWED = 2,
	_EXTERNAL_SERVICE_UNAVAILABLE = "EXTERNAL_SERVICE_UNAVAILABLE",
	EXTERNAL_SERVICE_UNAVAILABLE = 3,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 4,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 100,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 101,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 102,
	_FORBIDDEN = "FORBIDDEN",
	FORBIDDEN = 103,
	_FIDO_UNKNOWN_CREDENTIAL_ID = "FIDO_UNKNOWN_CREDENTIAL_ID",
	FIDO_UNKNOWN_CREDENTIAL_ID = 200,
	_FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = "FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR",
	FIDO_RETRY_WITH_ANOTHER_AUTHENTICATOR = 201,
	_FIDO_UNACCEPTABLE_CONTENT = "FIDO_UNACCEPTABLE_CONTENT",
	FIDO_UNACCEPTABLE_CONTENT = 202,
}

export enum SecondaryQrCodeErrorCode {
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 0,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 1,
	_VERIFICATION_FAILED = "VERIFICATION_FAILED",
	VERIFICATION_FAILED = 2,
	_NOT_ALLOWED_QR_CODE_LOGIN = "NOT_ALLOWED_QR_CODE_LOGIN",
	NOT_ALLOWED_QR_CODE_LOGIN = 3,
	_VERIFICATION_NOTICE_FAILED = "VERIFICATION_NOTICE_FAILED",
	VERIFICATION_NOTICE_FAILED = 4,
	_RETRY_LATER = "RETRY_LATER",
	RETRY_LATER = 5,
	_INVALID_CONTEXT = "INVALID_CONTEXT",
	INVALID_CONTEXT = 100,
	_APP_UPGRADE_REQUIRED = "APP_UPGRADE_REQUIRED",
	APP_UPGRADE_REQUIRED = 101,
}

export enum PaymentErrorCode {
	_SUCCESS = "SUCCESS",
	SUCCESS = 0,
	_GENERAL_USER_ERROR = "GENERAL_USER_ERROR",
	GENERAL_USER_ERROR = 1000,
	_ACCOUNT_NOT_EXISTS = "ACCOUNT_NOT_EXISTS",
	ACCOUNT_NOT_EXISTS = 1101,
	_ACCOUNT_INVALID_STATUS = "ACCOUNT_INVALID_STATUS",
	ACCOUNT_INVALID_STATUS = 1102,
	_ACCOUNT_ALREADY_EXISTS = "ACCOUNT_ALREADY_EXISTS",
	ACCOUNT_ALREADY_EXISTS = 1103,
	_MERCHANT_NOT_EXISTS = "MERCHANT_NOT_EXISTS",
	MERCHANT_NOT_EXISTS = 1104,
	_MERCHANT_INVALID_STATUS = "MERCHANT_INVALID_STATUS",
	MERCHANT_INVALID_STATUS = 1105,
	_AGREEMENT_REQUIRED = "AGREEMENT_REQUIRED",
	AGREEMENT_REQUIRED = 1107,
	_BLACKLISTED = "BLACKLISTED",
	BLACKLISTED = 1108,
	_WRONG_PASSWORD = "WRONG_PASSWORD",
	WRONG_PASSWORD = 1109,
	_INVALID_CREDIT_CARD = "INVALID_CREDIT_CARD",
	INVALID_CREDIT_CARD = 1110,
	_LIMIT_EXCEEDED = "LIMIT_EXCEEDED",
	LIMIT_EXCEEDED = 1111,
	_CANNOT_PROCEED = "CANNOT_PROCEED",
	CANNOT_PROCEED = 1115,
	_TOO_WEAK_PASSWORD = "TOO_WEAK_PASSWORD",
	TOO_WEAK_PASSWORD = 1120,
	_CANNOT_CREATE_ACCOUNT = "CANNOT_CREATE_ACCOUNT",
	CANNOT_CREATE_ACCOUNT = 1125,
	_TEMPORARY_PASSWORD_ERROR = "TEMPORARY_PASSWORD_ERROR",
	TEMPORARY_PASSWORD_ERROR = 1130,
	_MISSING_PARAMETERS = "MISSING_PARAMETERS",
	MISSING_PARAMETERS = 1140,
	_NO_VALID_MYCODE_ACCOUNT = "NO_VALID_MYCODE_ACCOUNT",
	NO_VALID_MYCODE_ACCOUNT = 1141,
	_INSUFFICIENT_BALANCE = "INSUFFICIENT_BALANCE",
	INSUFFICIENT_BALANCE = 1142,
	_TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
	TRANSACTION_NOT_FOUND = 1150,
	_TRANSACTION_FINISHED = "TRANSACTION_FINISHED",
	TRANSACTION_FINISHED = 1152,
	_PAYMENT_AMOUNT_WRONG = "PAYMENT_AMOUNT_WRONG",
	PAYMENT_AMOUNT_WRONG = 1153,
	_BALANCE_ACCOUNT_NOT_EXISTS = "BALANCE_ACCOUNT_NOT_EXISTS",
	BALANCE_ACCOUNT_NOT_EXISTS = 1157,
	_DUPLICATED_CITIZEN_ID = "DUPLICATED_CITIZEN_ID",
	DUPLICATED_CITIZEN_ID = 1158,
	_PAYMENT_REQUEST_NOT_FOUND = "PAYMENT_REQUEST_NOT_FOUND",
	PAYMENT_REQUEST_NOT_FOUND = 1159,
	_AUTH_FAILED = "AUTH_FAILED",
	AUTH_FAILED = 1169,
	_PASSWORD_SETTING_REQUIRED = "PASSWORD_SETTING_REQUIRED",
	PASSWORD_SETTING_REQUIRED = 1171,
	_TRANSACTION_ALREADY_PROCESSED = "TRANSACTION_ALREADY_PROCESSED",
	TRANSACTION_ALREADY_PROCESSED = 1172,
	_CURRENCY_NOT_SUPPORTED = "CURRENCY_NOT_SUPPORTED",
	CURRENCY_NOT_SUPPORTED = 1178,
	_PAYMENT_NOT_AVAILABLE = "PAYMENT_NOT_AVAILABLE",
	PAYMENT_NOT_AVAILABLE = 1180,
	_TRANSFER_REQUEST_NOT_FOUND = "TRANSFER_REQUEST_NOT_FOUND",
	TRANSFER_REQUEST_NOT_FOUND = 1181,
	_INVALID_PAYMENT_AMOUNT = "INVALID_PAYMENT_AMOUNT",
	INVALID_PAYMENT_AMOUNT = 1183,
	_INSUFFICIENT_PAYMENT_AMOUNT = "INSUFFICIENT_PAYMENT_AMOUNT",
	INSUFFICIENT_PAYMENT_AMOUNT = 1184,
	_EXTERNAL_SYSTEM_MAINTENANCE = "EXTERNAL_SYSTEM_MAINTENANCE",
	EXTERNAL_SYSTEM_MAINTENANCE = 1185,
	_EXTERNAL_SYSTEM_INOPERATIONAL = "EXTERNAL_SYSTEM_INOPERATIONAL",
	EXTERNAL_SYSTEM_INOPERATIONAL = 1186,
	_SESSION_EXPIRED = "SESSION_EXPIRED",
	SESSION_EXPIRED = 1192,
	_UPGRADE_REQUIRED = "UPGRADE_REQUIRED",
	UPGRADE_REQUIRED = 1195,
	_REQUEST_TOKEN_EXPIRED = "REQUEST_TOKEN_EXPIRED",
	REQUEST_TOKEN_EXPIRED = 1196,
	_OPERATION_FINISHED = "OPERATION_FINISHED",
	OPERATION_FINISHED = 1198,
	_EXTERNAL_SYSTEM_ERROR = "EXTERNAL_SYSTEM_ERROR",
	EXTERNAL_SYSTEM_ERROR = 1199,
	_PARTIAL_AMOUNT_APPROVED = "PARTIAL_AMOUNT_APPROVED",
	PARTIAL_AMOUNT_APPROVED = 1299,
	_PINCODE_AUTH_REQUIRED = "PINCODE_AUTH_REQUIRED",
	PINCODE_AUTH_REQUIRED = 1600,
	_ADDITIONAL_AUTH_REQUIRED = "ADDITIONAL_AUTH_REQUIRED",
	ADDITIONAL_AUTH_REQUIRED = 1601,
	_NOT_BOUND = "NOT_BOUND",
	NOT_BOUND = 1603,
	_OTP_USER_REGISTRATION_ERROR = "OTP_USER_REGISTRATION_ERROR",
	OTP_USER_REGISTRATION_ERROR = 1610,
	_OTP_CARD_REGISTRATION_ERROR = "OTP_CARD_REGISTRATION_ERROR",
	OTP_CARD_REGISTRATION_ERROR = 1611,
	_NO_AUTH_METHOD = "NO_AUTH_METHOD",
	NO_AUTH_METHOD = 1612,
	_GENERAL_USER_ERROR_RESTART = "GENERAL_USER_ERROR_RESTART",
	GENERAL_USER_ERROR_RESTART = 1696,
	_GENERAL_USER_ERROR_REFRESH = "GENERAL_USER_ERROR_REFRESH",
	GENERAL_USER_ERROR_REFRESH = 1697,
	_GENERAL_USER_ERROR_CLOSE = "GENERAL_USER_ERROR_CLOSE",
	GENERAL_USER_ERROR_CLOSE = 1698,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 9000,
	_INTERNAL_SYSTEM_MAINTENANCE = "INTERNAL_SYSTEM_MAINTENANCE",
	INTERNAL_SYSTEM_MAINTENANCE = 9999,
	_UNKNOWN_ERROR = "UNKNOWN_ERROR",
	UNKNOWN_ERROR = 10000,
}

export enum SettingsErrorCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_NONE = "NONE",
	NONE = 1,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 16641,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 16642,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 16643,
	_TOO_LARGE_VALUE = "TOO_LARGE_VALUE",
	TOO_LARGE_VALUE = 16644,
	_CLOCK_DRIFT_DETECTED = "CLOCK_DRIFT_DETECTED",
	CLOCK_DRIFT_DETECTED = 16645,
	_UNSUPPORTED_APPLICATION_TYPE = "UNSUPPORTED_APPLICATION_TYPE",
	UNSUPPORTED_APPLICATION_TYPE = 16646,
	_DUPLICATED_ENTRY = "DUPLICATED_ENTRY",
	DUPLICATED_ENTRY = 16647,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 16897,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 20737,
	_SERVICE_IN_MAINTENANCE_MODE = "SERVICE_IN_MAINTENANCE_MODE",
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	_SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
	SERVICE_UNAVAILABLE = 20739,
}

export enum ThingsErrorCode {
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 0,
	_UNAUTHORIZED = "UNAUTHORIZED",
	UNAUTHORIZED = 1,
	_INVALID_REQUEST = "INVALID_REQUEST",
	INVALID_REQUEST = 2,
	_INVALID_STATE = "INVALID_STATE",
	INVALID_STATE = 3,
	_DEVICE_LIMIT_EXCEEDED = "DEVICE_LIMIT_EXCEEDED",
	DEVICE_LIMIT_EXCEEDED = 4096,
	_UNSUPPORTED_REGION = "UNSUPPORTED_REGION",
	UNSUPPORTED_REGION = 4097,
}

export enum SuggestTrialErrorCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_NONE = "NONE",
	NONE = 1,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 16641,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 16642,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 16643,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 16897,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 20737,
	_SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
	SERVICE_UNAVAILABLE = 20739,
}

export enum LFLPremiumErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 16641,
	_MAJOR_VERSION_NOT_SUPPORTED = "MAJOR_VERSION_NOT_SUPPORTED",
	MAJOR_VERSION_NOT_SUPPORTED = 16642,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 16897,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 20737,
}

export enum WalletErrorCode {
	_INVALID_PARAMETER = "INVALID_PARAMETER",
	INVALID_PARAMETER = 400,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 401,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 500,
	_SERVICE_IN_MAINTENANCE_MODE = "SERVICE_IN_MAINTENANCE_MODE",
	SERVICE_IN_MAINTENANCE_MODE = 503,
}

export enum ShopErrorCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_NONE = "NONE",
	NONE = 1,
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 16641,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 16642,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 16643,
	_NOT_PAID_PRODUCT = "NOT_PAID_PRODUCT",
	NOT_PAID_PRODUCT = 16644,
	_NOT_FREE_PRODUCT = "NOT_FREE_PRODUCT",
	NOT_FREE_PRODUCT = 16645,
	_ALREADY_OWNED = "ALREADY_OWNED",
	ALREADY_OWNED = 16646,
	_ERROR_WITH_CUSTOM_MESSAGE = "ERROR_WITH_CUSTOM_MESSAGE",
	ERROR_WITH_CUSTOM_MESSAGE = 16647,
	_NOT_AVAILABLE_TO_RECIPIENT = "NOT_AVAILABLE_TO_RECIPIENT",
	NOT_AVAILABLE_TO_RECIPIENT = 16648,
	_NOT_AVAILABLE_FOR_CHANNEL_ID = "NOT_AVAILABLE_FOR_CHANNEL_ID",
	NOT_AVAILABLE_FOR_CHANNEL_ID = 16649,
	_NOT_SALE_FOR_COUNTRY = "NOT_SALE_FOR_COUNTRY",
	NOT_SALE_FOR_COUNTRY = 16650,
	_NOT_SALES_PERIOD = "NOT_SALES_PERIOD",
	NOT_SALES_PERIOD = 16651,
	_NOT_SALE_FOR_DEVICE = "NOT_SALE_FOR_DEVICE",
	NOT_SALE_FOR_DEVICE = 16652,
	_NOT_SALE_FOR_VERSION = "NOT_SALE_FOR_VERSION",
	NOT_SALE_FOR_VERSION = 16653,
	_ALREADY_EXPIRED = "ALREADY_EXPIRED",
	ALREADY_EXPIRED = 16654,
	_LIMIT_EXCEEDED = "LIMIT_EXCEEDED",
	LIMIT_EXCEEDED = 16655,
	_MISSING_CAPABILITY = "MISSING_CAPABILITY",
	MISSING_CAPABILITY = 16656,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 16897,
	_BALANCE_SHORTAGE = "BALANCE_SHORTAGE",
	BALANCE_SHORTAGE = 17153,
	_INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
	INTERNAL_SERVER_ERROR = 20737,
	_SERVICE_IN_MAINTENANCE_MODE = "SERVICE_IN_MAINTENANCE_MODE",
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	_SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
	SERVICE_UNAVAILABLE = 20739,
}

export enum PointErrorCode {
	_REQUEST_DUPLICATION = "REQUEST_DUPLICATION",
	REQUEST_DUPLICATION = 3001,
	_INVALID_PARAMETER = "INVALID_PARAMETER",
	INVALID_PARAMETER = 3002,
	_NOT_ENOUGH_BALANCE = "NOT_ENOUGH_BALANCE",
	NOT_ENOUGH_BALANCE = 3003,
	_AUTHENTICATION_FAIL = "AUTHENTICATION_FAIL",
	AUTHENTICATION_FAIL = 3004,
	_API_ACCESS_FORBIDDEN = "API_ACCESS_FORBIDDEN",
	API_ACCESS_FORBIDDEN = 3005,
	_MEMBER_ACCOUNT_NOT_FOUND = "MEMBER_ACCOUNT_NOT_FOUND",
	MEMBER_ACCOUNT_NOT_FOUND = 3006,
	_SERVICE_ACCOUNT_NOT_FOUND = "SERVICE_ACCOUNT_NOT_FOUND",
	SERVICE_ACCOUNT_NOT_FOUND = 3007,
	_TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
	TRANSACTION_NOT_FOUND = 3008,
	_ALREADY_REVERSED_TRANSACTION = "ALREADY_REVERSED_TRANSACTION",
	ALREADY_REVERSED_TRANSACTION = 3009,
	_MESSAGE_NOT_READABLE = "MESSAGE_NOT_READABLE",
	MESSAGE_NOT_READABLE = 3010,
	_HTTP_REQUEST_METHOD_NOT_SUPPORTED = "HTTP_REQUEST_METHOD_NOT_SUPPORTED",
	HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
	_HTTP_MEDIA_TYPE_NOT_SUPPORTED = "HTTP_MEDIA_TYPE_NOT_SUPPORTED",
	HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
	_NOT_ALLOWED_TO_DEPOSIT = "NOT_ALLOWED_TO_DEPOSIT",
	NOT_ALLOWED_TO_DEPOSIT = 3013,
	_NOT_ALLOWED_TO_PAY = "NOT_ALLOWED_TO_PAY",
	NOT_ALLOWED_TO_PAY = 3014,
	_TRANSACTION_ACCESS_FORBIDDEN = "TRANSACTION_ACCESS_FORBIDDEN",
	TRANSACTION_ACCESS_FORBIDDEN = 3015,
	_INVALID_SERVICE_CONFIGURATION = "INVALID_SERVICE_CONFIGURATION",
	INVALID_SERVICE_CONFIGURATION = 4001,
	_DCS_COMMUNICATION_FAIL = "DCS_COMMUNICATION_FAIL",
	DCS_COMMUNICATION_FAIL = 5004,
	_UPDATE_BALANCE_FAIL = "UPDATE_BALANCE_FAIL",
	UPDATE_BALANCE_FAIL = 5007,
	_SYSTEM_MAINTENANCE = "SYSTEM_MAINTENANCE",
	SYSTEM_MAINTENANCE = 5888,
	_SYSTEM_ERROR = "SYSTEM_ERROR",
	SYSTEM_ERROR = 5999,
}

export enum E2EEKeyBackupErrorCode {
	_ILLEGAL_ARGUMENT = "ILLEGAL_ARGUMENT",
	ILLEGAL_ARGUMENT = 0,
	_AUTHENTICATION_FAILED = "AUTHENTICATION_FAILED",
	AUTHENTICATION_FAILED = 1,
	_INTERNAL_ERROR = "INTERNAL_ERROR",
	INTERNAL_ERROR = 2,
	_RESTORE_KEY_FIRST = "RESTORE_KEY_FIRST",
	RESTORE_KEY_FIRST = 3,
	_NO_BACKUP = "NO_BACKUP",
	NO_BACKUP = 4,
	_LOCKOUT = "LOCKOUT",
	LOCKOUT = 5,
	_INVALID_PIN = "INVALID_PIN",
	INVALID_PIN = 6,
}

export enum TalkSyncReason {
	_UNSPECIFIED = "UNSPECIFIED",
	UNSPECIFIED = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_INITIALIZATION = "INITIALIZATION",
	INITIALIZATION = 2,
	_OPERATION = "OPERATION",
	OPERATION = 3,
	_FULL_SYNC = "FULL_SYNC",
	FULL_SYNC = 4,
	_AUTO_REPAIR = "AUTO_REPAIR",
	AUTO_REPAIR = 5,
	_MANUAL_REPAIR = "MANUAL_REPAIR",
	MANUAL_REPAIR = 6,
	_INTERNAL = "INTERNAL",
	INTERNAL = 7,
	_USER_INITIATED = "USER_INITIATED",
	USER_INITIATED = 8,
}

export enum OpType {
	_END_OF_OPERATION = "END_OF_OPERATION",
	END_OF_OPERATION = 0,
	_UPDATE_PROFILE = "UPDATE_PROFILE",
	UPDATE_PROFILE = 1,
	_NOTIFIED_UPDATE_PROFILE = "NOTIFIED_UPDATE_PROFILE",
	NOTIFIED_UPDATE_PROFILE = 2,
	_REGISTER_USERID = "REGISTER_USERID",
	REGISTER_USERID = 3,
	_ADD_CONTACT = "ADD_CONTACT",
	ADD_CONTACT = 4,
	_NOTIFIED_ADD_CONTACT = "NOTIFIED_ADD_CONTACT",
	NOTIFIED_ADD_CONTACT = 5,
	_BLOCK_CONTACT = "BLOCK_CONTACT",
	BLOCK_CONTACT = 6,
	_UNBLOCK_CONTACT = "UNBLOCK_CONTACT",
	UNBLOCK_CONTACT = 7,
	_NOTIFIED_RECOMMEND_CONTACT = "NOTIFIED_RECOMMEND_CONTACT",
	NOTIFIED_RECOMMEND_CONTACT = 8,
	_CREATE_GROUP = "CREATE_GROUP",
	CREATE_GROUP = 9,
	_UPDATE_GROUP = "UPDATE_GROUP",
	UPDATE_GROUP = 10,
	_NOTIFIED_UPDATE_GROUP = "NOTIFIED_UPDATE_GROUP",
	NOTIFIED_UPDATE_GROUP = 11,
	_INVITE_INTO_GROUP = "INVITE_INTO_GROUP",
	INVITE_INTO_GROUP = 12,
	_NOTIFIED_INVITE_INTO_GROUP = "NOTIFIED_INVITE_INTO_GROUP",
	NOTIFIED_INVITE_INTO_GROUP = 13,
	_LEAVE_GROUP = "LEAVE_GROUP",
	LEAVE_GROUP = 14,
	_NOTIFIED_LEAVE_GROUP = "NOTIFIED_LEAVE_GROUP",
	NOTIFIED_LEAVE_GROUP = 15,
	_ACCEPT_GROUP_INVITATION = "ACCEPT_GROUP_INVITATION",
	ACCEPT_GROUP_INVITATION = 16,
	_NOTIFIED_ACCEPT_GROUP_INVITATION = "NOTIFIED_ACCEPT_GROUP_INVITATION",
	NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
	_KICKOUT_FROM_GROUP = "KICKOUT_FROM_GROUP",
	KICKOUT_FROM_GROUP = 18,
	_NOTIFIED_KICKOUT_FROM_GROUP = "NOTIFIED_KICKOUT_FROM_GROUP",
	NOTIFIED_KICKOUT_FROM_GROUP = 19,
	_CREATE_ROOM = "CREATE_ROOM",
	CREATE_ROOM = 20,
	_INVITE_INTO_ROOM = "INVITE_INTO_ROOM",
	INVITE_INTO_ROOM = 21,
	_NOTIFIED_INVITE_INTO_ROOM = "NOTIFIED_INVITE_INTO_ROOM",
	NOTIFIED_INVITE_INTO_ROOM = 22,
	_LEAVE_ROOM = "LEAVE_ROOM",
	LEAVE_ROOM = 23,
	_NOTIFIED_LEAVE_ROOM = "NOTIFIED_LEAVE_ROOM",
	NOTIFIED_LEAVE_ROOM = 24,
	_SEND_MESSAGE = "SEND_MESSAGE",
	SEND_MESSAGE = 25,
	_RECEIVE_MESSAGE = "RECEIVE_MESSAGE",
	RECEIVE_MESSAGE = 26,
	_SEND_MESSAGE_RECEIPT = "SEND_MESSAGE_RECEIPT",
	SEND_MESSAGE_RECEIPT = 27,
	_RECEIVE_MESSAGE_RECEIPT = "RECEIVE_MESSAGE_RECEIPT",
	RECEIVE_MESSAGE_RECEIPT = 28,
	_SEND_CONTENT_RECEIPT = "SEND_CONTENT_RECEIPT",
	SEND_CONTENT_RECEIPT = 29,
	_RECEIVE_ANNOUNCEMENT = "RECEIVE_ANNOUNCEMENT",
	RECEIVE_ANNOUNCEMENT = 30,
	_CANCEL_INVITATION_GROUP = "CANCEL_INVITATION_GROUP",
	CANCEL_INVITATION_GROUP = 31,
	_NOTIFIED_CANCEL_INVITATION_GROUP = "NOTIFIED_CANCEL_INVITATION_GROUP",
	NOTIFIED_CANCEL_INVITATION_GROUP = 32,
	_NOTIFIED_UNREGISTER_USER = "NOTIFIED_UNREGISTER_USER",
	NOTIFIED_UNREGISTER_USER = 33,
	_REJECT_GROUP_INVITATION = "REJECT_GROUP_INVITATION",
	REJECT_GROUP_INVITATION = 34,
	_NOTIFIED_REJECT_GROUP_INVITATION = "NOTIFIED_REJECT_GROUP_INVITATION",
	NOTIFIED_REJECT_GROUP_INVITATION = 35,
	_UPDATE_SETTINGS = "UPDATE_SETTINGS",
	UPDATE_SETTINGS = 36,
	_NOTIFIED_REGISTER_USER = "NOTIFIED_REGISTER_USER",
	NOTIFIED_REGISTER_USER = 37,
	_INVITE_VIA_EMAIL = "INVITE_VIA_EMAIL",
	INVITE_VIA_EMAIL = 38,
	_NOTIFIED_REQUEST_RECOVERY = "NOTIFIED_REQUEST_RECOVERY",
	NOTIFIED_REQUEST_RECOVERY = 39,
	_SEND_CHAT_CHECKED = "SEND_CHAT_CHECKED",
	SEND_CHAT_CHECKED = 40,
	_SEND_CHAT_REMOVED = "SEND_CHAT_REMOVED",
	SEND_CHAT_REMOVED = 41,
	_NOTIFIED_FORCE_SYNC = "NOTIFIED_FORCE_SYNC",
	NOTIFIED_FORCE_SYNC = 42,
	_SEND_CONTENT = "SEND_CONTENT",
	SEND_CONTENT = 43,
	_SEND_MESSAGE_MYHOME = "SEND_MESSAGE_MYHOME",
	SEND_MESSAGE_MYHOME = 44,
	_NOTIFIED_UPDATE_CONTENT_PREVIEW = "NOTIFIED_UPDATE_CONTENT_PREVIEW",
	NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
	_REMOVE_ALL_MESSAGES = "REMOVE_ALL_MESSAGES",
	REMOVE_ALL_MESSAGES = 46,
	_NOTIFIED_UPDATE_PURCHASES = "NOTIFIED_UPDATE_PURCHASES",
	NOTIFIED_UPDATE_PURCHASES = 47,
	_DUMMY = "DUMMY",
	DUMMY = 48,
	_UPDATE_CONTACT = "UPDATE_CONTACT",
	UPDATE_CONTACT = 49,
	_NOTIFIED_RECEIVED_CALL = "NOTIFIED_RECEIVED_CALL",
	NOTIFIED_RECEIVED_CALL = 50,
	_CANCEL_CALL = "CANCEL_CALL",
	CANCEL_CALL = 51,
	_NOTIFIED_REDIRECT = "NOTIFIED_REDIRECT",
	NOTIFIED_REDIRECT = 52,
	_NOTIFIED_CHANNEL_SYNC = "NOTIFIED_CHANNEL_SYNC",
	NOTIFIED_CHANNEL_SYNC = 53,
	_FAILED_SEND_MESSAGE = "FAILED_SEND_MESSAGE",
	FAILED_SEND_MESSAGE = 54,
	_NOTIFIED_READ_MESSAGE = "NOTIFIED_READ_MESSAGE",
	NOTIFIED_READ_MESSAGE = 55,
	_FAILED_EMAIL_CONFIRMATION = "FAILED_EMAIL_CONFIRMATION",
	FAILED_EMAIL_CONFIRMATION = 56,
	_NOTIFIED_CHAT_CONTENT = "NOTIFIED_CHAT_CONTENT",
	NOTIFIED_CHAT_CONTENT = 58,
	_NOTIFIED_PUSH_NOTICENTER_ITEM = "NOTIFIED_PUSH_NOTICENTER_ITEM",
	NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
	_NOTIFIED_JOIN_CHAT = "NOTIFIED_JOIN_CHAT",
	NOTIFIED_JOIN_CHAT = 60,
	_NOTIFIED_LEAVE_CHAT = "NOTIFIED_LEAVE_CHAT",
	NOTIFIED_LEAVE_CHAT = 61,
	_NOTIFIED_TYPING = "NOTIFIED_TYPING",
	NOTIFIED_TYPING = 62,
	_FRIEND_REQUEST_ACCEPTED = "FRIEND_REQUEST_ACCEPTED",
	FRIEND_REQUEST_ACCEPTED = 63,
	_DESTROY_MESSAGE = "DESTROY_MESSAGE",
	DESTROY_MESSAGE = 64,
	_NOTIFIED_DESTROY_MESSAGE = "NOTIFIED_DESTROY_MESSAGE",
	NOTIFIED_DESTROY_MESSAGE = 65,
	_UPDATE_PUBLICKEYCHAIN = "UPDATE_PUBLICKEYCHAIN",
	UPDATE_PUBLICKEYCHAIN = 66,
	_NOTIFIED_UPDATE_PUBLICKEYCHAIN = "NOTIFIED_UPDATE_PUBLICKEYCHAIN",
	NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
	_NOTIFIED_BLOCK_CONTACT = "NOTIFIED_BLOCK_CONTACT",
	NOTIFIED_BLOCK_CONTACT = 68,
	_NOTIFIED_UNBLOCK_CONTACT = "NOTIFIED_UNBLOCK_CONTACT",
	NOTIFIED_UNBLOCK_CONTACT = 69,
	_UPDATE_GROUPPREFERENCE = "UPDATE_GROUPPREFERENCE",
	UPDATE_GROUPPREFERENCE = 70,
	_NOTIFIED_PAYMENT_EVENT = "NOTIFIED_PAYMENT_EVENT",
	NOTIFIED_PAYMENT_EVENT = 71,
	_REGISTER_E2EE_PUBLICKEY = "REGISTER_E2EE_PUBLICKEY",
	REGISTER_E2EE_PUBLICKEY = 72,
	_NOTIFIED_E2EE_KEY_EXCHANGE_REQ = "NOTIFIED_E2EE_KEY_EXCHANGE_REQ",
	NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73,
	_NOTIFIED_E2EE_KEY_EXCHANGE_RESP = "NOTIFIED_E2EE_KEY_EXCHANGE_RESP",
	NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74,
	_NOTIFIED_E2EE_MESSAGE_RESEND_REQ = "NOTIFIED_E2EE_MESSAGE_RESEND_REQ",
	NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75,
	_NOTIFIED_E2EE_MESSAGE_RESEND_RESP = "NOTIFIED_E2EE_MESSAGE_RESEND_RESP",
	NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76,
	_NOTIFIED_E2EE_KEY_UPDATE = "NOTIFIED_E2EE_KEY_UPDATE",
	NOTIFIED_E2EE_KEY_UPDATE = 77,
	_NOTIFIED_BUDDY_UPDATE_PROFILE = "NOTIFIED_BUDDY_UPDATE_PROFILE",
	NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
	_NOTIFIED_UPDATE_LINEAT_TABS = "NOTIFIED_UPDATE_LINEAT_TABS",
	NOTIFIED_UPDATE_LINEAT_TABS = 79,
	_UPDATE_ROOM = "UPDATE_ROOM",
	UPDATE_ROOM = 80,
	_NOTIFIED_BEACON_DETECTED = "NOTIFIED_BEACON_DETECTED",
	NOTIFIED_BEACON_DETECTED = 81,
	_UPDATE_EXTENDED_PROFILE = "UPDATE_EXTENDED_PROFILE",
	UPDATE_EXTENDED_PROFILE = 82,
	_ADD_FOLLOW = "ADD_FOLLOW",
	ADD_FOLLOW = 83,
	_NOTIFIED_ADD_FOLLOW = "NOTIFIED_ADD_FOLLOW",
	NOTIFIED_ADD_FOLLOW = 84,
	_DELETE_FOLLOW = "DELETE_FOLLOW",
	DELETE_FOLLOW = 85,
	_NOTIFIED_DELETE_FOLLOW = "NOTIFIED_DELETE_FOLLOW",
	NOTIFIED_DELETE_FOLLOW = 86,
	_UPDATE_TIMELINE_SETTINGS = "UPDATE_TIMELINE_SETTINGS",
	UPDATE_TIMELINE_SETTINGS = 87,
	_NOTIFIED_FRIEND_REQUEST = "NOTIFIED_FRIEND_REQUEST",
	NOTIFIED_FRIEND_REQUEST = 88,
	_UPDATE_RINGBACK_TONE = "UPDATE_RINGBACK_TONE",
	UPDATE_RINGBACK_TONE = 89,
	_NOTIFIED_POSTBACK = "NOTIFIED_POSTBACK",
	NOTIFIED_POSTBACK = 90,
	_RECEIVE_READ_WATERMARK = "RECEIVE_READ_WATERMARK",
	RECEIVE_READ_WATERMARK = 91,
	_NOTIFIED_MESSAGE_DELIVERED = "NOTIFIED_MESSAGE_DELIVERED",
	NOTIFIED_MESSAGE_DELIVERED = 92,
	_NOTIFIED_UPDATE_CHAT_BAR = "NOTIFIED_UPDATE_CHAT_BAR",
	NOTIFIED_UPDATE_CHAT_BAR = 93,
	_NOTIFIED_CHATAPP_INSTALLED = "NOTIFIED_CHATAPP_INSTALLED",
	NOTIFIED_CHATAPP_INSTALLED = 94,
	_NOTIFIED_CHATAPP_UPDATED = "NOTIFIED_CHATAPP_UPDATED",
	NOTIFIED_CHATAPP_UPDATED = 95,
	_NOTIFIED_CHATAPP_NEW_MARK = "NOTIFIED_CHATAPP_NEW_MARK",
	NOTIFIED_CHATAPP_NEW_MARK = 96,
	_NOTIFIED_CHATAPP_DELETED = "NOTIFIED_CHATAPP_DELETED",
	NOTIFIED_CHATAPP_DELETED = 97,
	_NOTIFIED_CHATAPP_SYNC = "NOTIFIED_CHATAPP_SYNC",
	NOTIFIED_CHATAPP_SYNC = 98,
	_NOTIFIED_UPDATE_MESSAGE = "NOTIFIED_UPDATE_MESSAGE",
	NOTIFIED_UPDATE_MESSAGE = 99,
	_UPDATE_CHATROOMBGM = "UPDATE_CHATROOMBGM",
	UPDATE_CHATROOMBGM = 100,
	_NOTIFIED_UPDATE_CHATROOMBGM = "NOTIFIED_UPDATE_CHATROOMBGM",
	NOTIFIED_UPDATE_CHATROOMBGM = 101,
	_UPDATE_RINGTONE = "UPDATE_RINGTONE",
	UPDATE_RINGTONE = 102,
	_UPDATE_USER_SETTINGS = "UPDATE_USER_SETTINGS",
	UPDATE_USER_SETTINGS = 118,
	_NOTIFIED_UPDATE_STATUS_BAR = "NOTIFIED_UPDATE_STATUS_BAR",
	NOTIFIED_UPDATE_STATUS_BAR = 119,
	_CREATE_CHAT = "CREATE_CHAT",
	CREATE_CHAT = 120,
	_UPDATE_CHAT = "UPDATE_CHAT",
	UPDATE_CHAT = 121,
	_NOTIFIED_UPDATE_CHAT = "NOTIFIED_UPDATE_CHAT",
	NOTIFIED_UPDATE_CHAT = 122,
	_INVITE_INTO_CHAT = "INVITE_INTO_CHAT",
	INVITE_INTO_CHAT = 123,
	_NOTIFIED_INVITE_INTO_CHAT = "NOTIFIED_INVITE_INTO_CHAT",
	NOTIFIED_INVITE_INTO_CHAT = 124,
	_CANCEL_CHAT_INVITATION = "CANCEL_CHAT_INVITATION",
	CANCEL_CHAT_INVITATION = 125,
	_NOTIFIED_CANCEL_CHAT_INVITATION = "NOTIFIED_CANCEL_CHAT_INVITATION",
	NOTIFIED_CANCEL_CHAT_INVITATION = 126,
	_DELETE_SELF_FROM_CHAT = "DELETE_SELF_FROM_CHAT",
	DELETE_SELF_FROM_CHAT = 127,
	_NOTIFIED_DELETE_SELF_FROM_CHAT = "NOTIFIED_DELETE_SELF_FROM_CHAT",
	NOTIFIED_DELETE_SELF_FROM_CHAT = 128,
	_ACCEPT_CHAT_INVITATION = "ACCEPT_CHAT_INVITATION",
	ACCEPT_CHAT_INVITATION = 129,
	_NOTIFIED_ACCEPT_CHAT_INVITATION = "NOTIFIED_ACCEPT_CHAT_INVITATION",
	NOTIFIED_ACCEPT_CHAT_INVITATION = 130,
	_REJECT_CHAT_INVITATION = "REJECT_CHAT_INVITATION",
	REJECT_CHAT_INVITATION = 131,
	_DELETE_OTHER_FROM_CHAT = "DELETE_OTHER_FROM_CHAT",
	DELETE_OTHER_FROM_CHAT = 132,
	_NOTIFIED_DELETE_OTHER_FROM_CHAT = "NOTIFIED_DELETE_OTHER_FROM_CHAT",
	NOTIFIED_DELETE_OTHER_FROM_CHAT = 133,
	_NOTIFIED_CONTACT_CALENDAR_EVENT = "NOTIFIED_CONTACT_CALENDAR_EVENT",
	NOTIFIED_CONTACT_CALENDAR_EVENT = 134,
	_NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = "NOTIFIED_CONTACT_CALENDAR_EVENT_ALL",
	NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = 135,
	_UPDATE_THINGS_OPERATIONS = "UPDATE_THINGS_OPERATIONS",
	UPDATE_THINGS_OPERATIONS = 136,
	_SEND_CHAT_HIDDEN = "SEND_CHAT_HIDDEN",
	SEND_CHAT_HIDDEN = 137,
	_CHAT_META_SYNC_ALL = "CHAT_META_SYNC_ALL",
	CHAT_META_SYNC_ALL = 138,
	_SEND_REACTION = "SEND_REACTION",
	SEND_REACTION = 139,
	_NOTIFIED_SEND_REACTION = "NOTIFIED_SEND_REACTION",
	NOTIFIED_SEND_REACTION = 140,
	_NOTIFIED_UPDATE_PROFILE_CONTENT = "NOTIFIED_UPDATE_PROFILE_CONTENT",
	NOTIFIED_UPDATE_PROFILE_CONTENT = 141,
	_FAILED_DELIVERY_MESSAGE = "FAILED_DELIVERY_MESSAGE",
	FAILED_DELIVERY_MESSAGE = 142,
}

export enum OpStatus {
	_NORMAL = "NORMAL",
	NORMAL = 0,
	_ALERT_DISABLED = "ALERT_DISABLED",
	ALERT_DISABLED = 1,
	_ALWAYS = "ALWAYS",
	ALWAYS = 2,
}

export enum MIDType {
	_USER = "USER",
	USER = 0,
	_ROOM = "ROOM",
	ROOM = 1,
	_GROUP = "GROUP",
	GROUP = 2,
	_SQUARE = "SQUARE",
	SQUARE = 3,
	_SQUARE_CHAT = "SQUARE_CHAT",
	SQUARE_CHAT = 4,
	_SQUARE_MEMBER = "SQUARE_MEMBER",
	SQUARE_MEMBER = 5,
	_BOT = "BOT",
	BOT = 6,
}

export enum MessageRelationType {
	_FORWARD = "FORWARD",
	FORWARD = 0,
	_AUTO_REPLY = "AUTO_REPLY",
	AUTO_REPLY = 1,
	_SUBORDINATE = "SUBORDINATE",
	SUBORDINATE = 2,
	_REPLY = "REPLY",
	REPLY = 3,
}

export enum ServiceCode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_TALK = "TALK",
	TALK = 1,
	_SQUARE = "SQUARE",
	SQUARE = 2,
}

export enum AppExtensionType {
	_SIRI = "SIRI",
	SIRI = 1,
	_GOOGLE_ASSISTANT = "GOOGLE_ASSISTANT",
	GOOGLE_ASSISTANT = 2,
	_OS_SHARE = "OS_SHARE",
	OS_SHARE = 3,
}

export enum PredefinedReactionType {
	_NICE = "NICE",
	NICE = 2,
	_LOVE = "LOVE",
	LOVE = 3,
	_FUN = "FUN",
	FUN = 4,
	_AMAZING = "AMAZING",
	AMAZING = 5,
	_SAD = "SAD",
	SAD = 6,
	_OMG = "OMG",
	OMG = 7,
}

export enum PlaceSearchProvider {
	_GOOGLE = "GOOGLE",
	GOOGLE = 0,
	_BAIDU = "BAIDU",
	BAIDU = 1,
	_FOURSQUARE = "FOURSQUARE",
	FOURSQUARE = 2,
}

export enum GeolocationAccuracyMode {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_IOS_REDUCED_ACCURACY = "IOS_REDUCED_ACCURACY",
	IOS_REDUCED_ACCURACY = 1,
	_IOS_FULL_ACCURACY = "IOS_FULL_ACCURACY",
	IOS_FULL_ACCURACY = 2,
	_AOS_PRECISE_LOCATION = "AOS_PRECISE_LOCATION",
	AOS_PRECISE_LOCATION = 3,
	_AOS_APPROXIMATE_LOCATION = "AOS_APPROXIMATE_LOCATION",
	AOS_APPROXIMATE_LOCATION = 4,
}

export enum ContentType {
	_NONE = "NONE",
	NONE = 0,
	_IMAGE = "IMAGE",
	IMAGE = 1,
	_VIDEO = "VIDEO",
	VIDEO = 2,
	_AUDIO = "AUDIO",
	AUDIO = 3,
	_HTML = "HTML",
	HTML = 4,
	_PDF = "PDF",
	PDF = 5,
	_CALL = "CALL",
	CALL = 6,
	_STICKER = "STICKER",
	STICKER = 7,
	_PRESENCE = "PRESENCE",
	PRESENCE = 8,
	_GIFT = "GIFT",
	GIFT = 9,
	_GROUPBOARD = "GROUPBOARD",
	GROUPBOARD = 10,
	_APPLINK = "APPLINK",
	APPLINK = 11,
	_LINK = "LINK",
	LINK = 12,
	_CONTACT = "CONTACT",
	CONTACT = 13,
	_FILE = "FILE",
	FILE = 14,
	_LOCATION = "LOCATION",
	LOCATION = 15,
	_POSTNOTIFICATION = "POSTNOTIFICATION",
	POSTNOTIFICATION = 16,
	_RICH = "RICH",
	RICH = 17,
	_CHATEVENT = "CHATEVENT",
	CHATEVENT = 18,
	_MUSIC = "MUSIC",
	MUSIC = 19,
	_PAYMENT = "PAYMENT",
	PAYMENT = 20,
	_EXTIMAGE = "EXTIMAGE",
	EXTIMAGE = 21,
	_FLEX = "FLEX",
	FLEX = 22,
}

export enum ContactType {
	_MID = "MID",
	MID = 0,
	_PHONE = "PHONE",
	PHONE = 1,
	_EMAIL = "EMAIL",
	EMAIL = 2,
	_USERID = "USERID",
	USERID = 3,
	_PROXIMITY = "PROXIMITY",
	PROXIMITY = 4,
	_GROUP = "GROUP",
	GROUP = 5,
	_USER = "USER",
	USER = 6,
	_QRCODE = "QRCODE",
	QRCODE = 7,
	_PROMOTION_BOT = "PROMOTION_BOT",
	PROMOTION_BOT = 8,
	_CONTACT_MESSAGE = "CONTACT_MESSAGE",
	CONTACT_MESSAGE = 9,
	_FRIEND_REQUEST = "FRIEND_REQUEST",
	FRIEND_REQUEST = 10,
	_BEACON = "BEACON",
	BEACON = 11,
	_REPAIR = "REPAIR",
	REPAIR = 128,
	_FACEBOOK = "FACEBOOK",
	FACEBOOK = 2305,
	_SINA = "SINA",
	SINA = 2306,
	_RENREN = "RENREN",
	RENREN = 2307,
	_FEIXIN = "FEIXIN",
	FEIXIN = 2308,
	_BBM = "BBM",
	BBM = 2309,
}

export enum ContactStatus {
	_UNSPECIFIED = "UNSPECIFIED",
	UNSPECIFIED = 0,
	_FRIEND = "FRIEND",
	FRIEND = 1,
	_FRIEND_BLOCKED = "FRIEND_BLOCKED",
	FRIEND_BLOCKED = 2,
	_RECOMMEND = "RECOMMEND",
	RECOMMEND = 3,
	_RECOMMEND_BLOCKED = "RECOMMEND_BLOCKED",
	RECOMMEND_BLOCKED = 4,
	_DELETED = "DELETED",
	DELETED = 5,
	_DELETED_BLOCKED = "DELETED_BLOCKED",
	DELETED_BLOCKED = 6,
}

export enum ContactRelation {
	_ONEWAY = "ONEWAY",
	ONEWAY = 0,
	_BOTH = "BOTH",
	BOTH = 1,
	_NOT_REGISTERED = "NOT_REGISTERED",
	NOT_REGISTERED = 2,
}

export enum FriendRequestStatus {
	_NONE = "NONE",
	NONE = 0,
	_AVAILABLE = "AVAILABLE",
	AVAILABLE = 1,
	_ALREADY_REQUESTED = "ALREADY_REQUESTED",
	ALREADY_REQUESTED = 2,
	_UNAVAILABLE = "UNAVAILABLE",
	UNAVAILABLE = 3,
}

export enum ContactCalendarEventType {
	_BIRTHDAY = "BIRTHDAY",
	BIRTHDAY = 0,
}

export enum UserStatus {
	_NORMAL = "NORMAL",
	NORMAL = 0,
	_UNBOUND = "UNBOUND",
	UNBOUND = 1,
	_UNREGISTERED = "UNREGISTERED",
	UNREGISTERED = 2,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 3,
}

export enum ContactCalendarEventState {
	_SHOW = "SHOW",
	SHOW = 0,
	_HIDE = "HIDE",
	HIDE = 1,
}

export enum SnsIdType {
	_FACEBOOK = "FACEBOOK",
	FACEBOOK = 1,
	_SINA = "SINA",
	SINA = 2,
	_RENREN = "RENREN",
	RENREN = 3,
	_FEIXIN = "FEIXIN",
	FEIXIN = 4,
	_BBM = "BBM",
	BBM = 5,
	_APPLE = "APPLE",
	APPLE = 6,
	_YAHOOJAPAN = "YAHOOJAPAN",
	YAHOOJAPAN = 7,
}

export enum UserAgeType {
	_OVER = "OVER",
	OVER = 1,
	_UNDER = "UNDER",
	UNDER = 2,
	_UNDEFINED = "UNDEFINED",
	UNDEFINED = 3,
}

export enum UserAllowProfileHistoryType {
	_OWNER = "OWNER",
	OWNER = 0,
	_FRIEND = "FRIEND",
	FRIEND = 1,
}

export enum UserStatusMessageHistoryType {
	_NONE = "NONE",
	NONE = 1,
	_ALL = "ALL",
	ALL = 2,
}

export enum UserSharePersonalInfoToFriendsType {
	_NEVER_SHOW = "NEVER_SHOW",
	NEVER_SHOW = 0,
	_ONE_WAY = "ONE_WAY",
	ONE_WAY = 1,
	_MUTUAL = "MUTUAL",
	MUTUAL = 2,
}

export enum IdentityProvider {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_LINE = "LINE",
	LINE = 1,
	_NAVER_KR = "NAVER_KR",
	NAVER_KR = 2,
	_LINE_PHONE = "LINE_PHONE",
	LINE_PHONE = 3,
}

export enum EmailConfirmationStatus {
	_NOT_SPECIFIED = "NOT_SPECIFIED",
	NOT_SPECIFIED = 0,
	_NOT_YET = "NOT_YET",
	NOT_YET = 1,
	_DONE = "DONE",
	DONE = 3,
	_NEED_ENFORCED_INPUT = "NEED_ENFORCED_INPUT",
	NEED_ENFORCED_INPUT = 4,
}

export enum AccountMigrationPincodeType {
	_NOT_APPLICABLE = "NOT_APPLICABLE",
	NOT_APPLICABLE = 0,
	_NOT_SET = "NOT_SET",
	NOT_SET = 1,
	_SET = "SET",
	SET = 2,
	_NEED_ENFORCED_INPUT = "NEED_ENFORCED_INPUT",
	NEED_ENFORCED_INPUT = 3,
}

export enum SecurityCenterSettingsType {
	_NOT_APPLICABLE = "NOT_APPLICABLE",
	NOT_APPLICABLE = 0,
	_NOT_SET = "NOT_SET",
	NOT_SET = 1,
	_SET = "SET",
	SET = 2,
	_NEED_ENFORCED_INPUT = "NEED_ENFORCED_INPUT",
	NEED_ENFORCED_INPUT = 3,
}

export enum CustomMode {
	_PROMOTION_FRIENDS_INVITE = "PROMOTION_FRIENDS_INVITE",
	PROMOTION_FRIENDS_INVITE = 1,
	_CAPABILITY_SERVER_SIDE_SMS = "CAPABILITY_SERVER_SIDE_SMS",
	CAPABILITY_SERVER_SIDE_SMS = 2,
	_LINE_CLIENT_ANALYTICS_CONFIGURATION = "LINE_CLIENT_ANALYTICS_CONFIGURATION",
	LINE_CLIENT_ANALYTICS_CONFIGURATION = 3,
}

export enum VerificationMethod {
	_NO_AVAILABLE = "NO_AVAILABLE",
	NO_AVAILABLE = 0,
	_PIN_VIA_SMS = "PIN_VIA_SMS",
	PIN_VIA_SMS = 1,
	_CALLERID_INDIGO = "CALLERID_INDIGO",
	CALLERID_INDIGO = 2,
	_PIN_VIA_TTS = "PIN_VIA_TTS",
	PIN_VIA_TTS = 4,
	_SKIP = "SKIP",
	SKIP = 10,
}

export enum ContactSetting {
	_CONTACT_SETTING_NOTIFICATION_DISABLE = "CONTACT_SETTING_NOTIFICATION_DISABLE",
	CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
	_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE",
	CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
	_CONTACT_SETTING_CONTACT_HIDE = "CONTACT_SETTING_CONTACT_HIDE",
	CONTACT_SETTING_CONTACT_HIDE = 4,
	_CONTACT_SETTING_FAVORITE = "CONTACT_SETTING_FAVORITE",
	CONTACT_SETTING_FAVORITE = 8,
	_CONTACT_SETTING_DELETE = "CONTACT_SETTING_DELETE",
	CONTACT_SETTING_DELETE = 16,
}

export enum FriendRequestMethod {
	_TIMELINE = "TIMELINE",
	TIMELINE = 1,
	_NEARBY = "NEARBY",
	NEARBY = 2,
	_SQUARE = "SQUARE",
	SQUARE = 3,
}

export enum CharType {
	_GROUP = "GROUP",
	GROUP = 0,
	_ROOM = "ROOM",
	ROOM = 1,
	_PEER = "PEER",
	PEER = 2,
}

export enum FeatureType {
	_OBS_VIDEO = "OBS_VIDEO",
	OBS_VIDEO = 1,
	_OBS_GENERAL = "OBS_GENERAL",
	OBS_GENERAL = 2,
	_OBS_RINGBACK_TONE = "OBS_RINGBACK_TONE",
	OBS_RINGBACK_TONE = 3,
}

export enum NotificationType {
	_APPLE_APNS = "APPLE_APNS",
	APPLE_APNS = 1,
	_GOOGLE_C2DM = "GOOGLE_C2DM",
	GOOGLE_C2DM = 2,
	_NHN_NNI = "NHN_NNI",
	NHN_NNI = 3,
	_SKT_AOM = "SKT_AOM",
	SKT_AOM = 4,
	_MS_MPNS = "MS_MPNS",
	MS_MPNS = 5,
	_RIM_BIS = "RIM_BIS",
	RIM_BIS = 6,
	_GOOGLE_GCM = "GOOGLE_GCM",
	GOOGLE_GCM = 7,
	_NOKIA_NNAPI = "NOKIA_NNAPI",
	NOKIA_NNAPI = 8,
	_TIZEN = "TIZEN",
	TIZEN = 9,
	_MOZILLA_SIMPLE = "MOZILLA_SIMPLE",
	MOZILLA_SIMPLE = 10,
	_LINE_BOT = "LINE_BOT",
	LINE_BOT = 17,
	_LINE_WAP = "LINE_WAP",
	LINE_WAP = 18,
	_APPLE_APNS_VOIP = "APPLE_APNS_VOIP",
	APPLE_APNS_VOIP = 19,
	_MS_WNS = "MS_WNS",
	MS_WNS = 20,
	_GOOGLE_FCM = "GOOGLE_FCM",
	GOOGLE_FCM = 21,
	_CLOVA = "CLOVA",
	CLOVA = 22,
	_CLOVA_VOIP = "CLOVA_VOIP",
	CLOVA_VOIP = 23,
	_HUAWEI_HCM = "HUAWEI_HCM",
	HUAWEI_HCM = 24,
}

export enum ModificationType {
	_ADD = "ADD",
	ADD = 0,
	_REMOVE = "REMOVE",
	REMOVE = 1,
	_MODIFY = "MODIFY",
	MODIFY = 2,
}

export enum ChatAttribute {
	_NAME = "NAME",
	NAME = 1,
	_PICTURE_STATUS = "PICTURE_STATUS",
	PICTURE_STATUS = 2,
	_PREVENTED_JOIN_BY_TICKET = "PREVENTED_JOIN_BY_TICKET",
	PREVENTED_JOIN_BY_TICKET = 4,
	_NOTIFICATION_SETTING = "NOTIFICATION_SETTING",
	NOTIFICATION_SETTING = 8,
	_INVITATION_TICKET = "INVITATION_TICKET",
	INVITATION_TICKET = 16,
	_FAVORITE_TIMESTAMP = "FAVORITE_TIMESTAMP",
	FAVORITE_TIMESTAMP = 32,
	_CHAT_TYPE = "CHAT_TYPE",
	CHAT_TYPE = 64,
}

export enum BotType {
	_RESERVED = "RESERVED",
	RESERVED = 0,
	_OFFICIAL = "OFFICIAL",
	OFFICIAL = 1,
	_LINE_AT_0 = "LINE_AT_0",
	LINE_AT_0 = 2,
	_LINE_AT = "LINE_AT",
	LINE_AT = 3,
}

export enum BuddyOnAirLabel {
	_ON_AIR = "ON_AIR",
	ON_AIR = 0,
	_LIVE = "LIVE",
	LIVE = 1,
	_GLP = "GLP",
	GLP = 2,
}

export enum BuddyBotActiveStatus {
	_UNSPECIFIED = "UNSPECIFIED",
	UNSPECIFIED = 0,
	_INACTIVE = "INACTIVE",
	INACTIVE = 1,
	_ACTIVE = "ACTIVE",
	ACTIVE = 2,
	_DELETED = "DELETED",
	DELETED = 3,
}

export enum GroupCallMediaType {
	_AUDIO = "AUDIO",
	AUDIO = 1,
	_VIDEO = "VIDEO",
	VIDEO = 2,
	_LIVE = "LIVE",
	LIVE = 3,
}

export enum GroupCallProtocol {
	_STANDARD = "STANDARD",
	STANDARD = 1,
	_CONSTELLA = "CONSTELLA",
	CONSTELLA = 2,
}

export enum SyncTriggerReason {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_REVISION_GAP_TOO_LARGE_CLIENT = "REVISION_GAP_TOO_LARGE_CLIENT",
	REVISION_GAP_TOO_LARGE_CLIENT = 1,
	_REVISION_GAP_TOO_LARGE_SERVER = "REVISION_GAP_TOO_LARGE_SERVER",
	REVISION_GAP_TOO_LARGE_SERVER = 2,
	_OPERATION_EXPIRED = "OPERATION_EXPIRED",
	OPERATION_EXPIRED = 3,
	_REVISION_HOLE = "REVISION_HOLE",
	REVISION_HOLE = 4,
	_FORCE_TRIGGERED = "FORCE_TRIGGERED",
	FORCE_TRIGGERED = 5,
}

export enum NotificationStatus {
	_NOTIFICATION_ITEM_EXIST = "NOTIFICATION_ITEM_EXIST",
	NOTIFICATION_ITEM_EXIST = 1,
	_TIMELINE_ITEM_EXIST = "TIMELINE_ITEM_EXIST",
	TIMELINE_ITEM_EXIST = 2,
	_NOTE_GROUP_NEW_ITEM_EXIST = "NOTE_GROUP_NEW_ITEM_EXIST",
	NOTE_GROUP_NEW_ITEM_EXIST = 4,
	_TIMELINE_BUDDYGROUP_CHANGED = "TIMELINE_BUDDYGROUP_CHANGED",
	TIMELINE_BUDDYGROUP_CHANGED = 8,
	_NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = "NOTE_ONE_TO_ONE_NEW_ITEM_EXIST",
	NOTE_ONE_TO_ONE_NEW_ITEM_EXIST = 16,
	_ALBUM_ITEM_EXIST = "ALBUM_ITEM_EXIST",
	ALBUM_ITEM_EXIST = 32,
	_TIMELINE_ITEM_DELETED = "TIMELINE_ITEM_DELETED",
	TIMELINE_ITEM_DELETED = 64,
	_OTOGROUP_ITEM_EXIST = "OTOGROUP_ITEM_EXIST",
	OTOGROUP_ITEM_EXIST = 128,
	_GROUPHOME_NEW_ITEM_EXIST = "GROUPHOME_NEW_ITEM_EXIST",
	GROUPHOME_NEW_ITEM_EXIST = 256,
	_GROUPHOME_HIDDEN_ITEM_CHANGED = "GROUPHOME_HIDDEN_ITEM_CHANGED",
	GROUPHOME_HIDDEN_ITEM_CHANGED = 512,
	_NOTIFICATION_ITEM_CHANGED = "NOTIFICATION_ITEM_CHANGED",
	NOTIFICATION_ITEM_CHANGED = 1024,
	_BEAD_ITEM_HIDE = "BEAD_ITEM_HIDE",
	BEAD_ITEM_HIDE = 2048,
	_BEAD_ITEM_SHOW = "BEAD_ITEM_SHOW",
	BEAD_ITEM_SHOW = 4096,
	_LINE_TICKET_UPDATED = "LINE_TICKET_UPDATED",
	LINE_TICKET_UPDATED = 8192,
	_TIMELINE_STORY_UPDATED = "TIMELINE_STORY_UPDATED",
	TIMELINE_STORY_UPDATED = 16384,
	_SMARTCH_UPDATED = "SMARTCH_UPDATED",
	SMARTCH_UPDATED = 32768,
	_AVATAR_UPDATED = "AVATAR_UPDATED",
	AVATAR_UPDATED = 65536,
	_HOME_NOTIFICATION_ITEM_EXIST = "HOME_NOTIFICATION_ITEM_EXIST",
	HOME_NOTIFICATION_ITEM_EXIST = 131072,
	_TIMELINE_REBOOT_COMPLETED = "TIMELINE_REBOOT_COMPLETED",
	TIMELINE_REBOOT_COMPLETED = 262144,
	_TIMELINE_GUIDE_STORY_UPDATED = "TIMELINE_GUIDE_STORY_UPDATED",
	TIMELINE_GUIDE_STORY_UPDATED = 524288,
}

export enum GlobalEventType {
	_DUMMY = "DUMMY",
	DUMMY = 0,
	_NOTICE = "NOTICE",
	NOTICE = 1,
	_MORETAB = "MORETAB",
	MORETAB = 2,
	_STICKERSHOP = "STICKERSHOP",
	STICKERSHOP = 3,
	_CHANNEL = "CHANNEL",
	CHANNEL = 4,
	_DENY_KEYWORD = "DENY_KEYWORD",
	DENY_KEYWORD = 5,
	_CONNECTIONINFO = "CONNECTIONINFO",
	CONNECTIONINFO = 6,
	_BUDDY = "BUDDY",
	BUDDY = 7,
	_TIMELINEINFO = "TIMELINEINFO",
	TIMELINEINFO = 8,
	_THEMESHOP = "THEMESHOP",
	THEMESHOP = 9,
	_CALLRATE = "CALLRATE",
	CALLRATE = 10,
	_CONFIGURATION = "CONFIGURATION",
	CONFIGURATION = 11,
	_STICONSHOP = "STICONSHOP",
	STICONSHOP = 12,
	_SUGGESTDICTIONARY = "SUGGESTDICTIONARY",
	SUGGESTDICTIONARY = 13,
	_SUGGESTSETTINGS = "SUGGESTSETTINGS",
	SUGGESTSETTINGS = 14,
	_USERSETTINGS = "USERSETTINGS",
	USERSETTINGS = 15,
	_ANALYTICSINFO = "ANALYTICSINFO",
	ANALYTICSINFO = 16,
	_SEARCHPOPULARKEYWORD = "SEARCHPOPULARKEYWORD",
	SEARCHPOPULARKEYWORD = 17,
	_SEARCHNOTICE = "SEARCHNOTICE",
	SEARCHNOTICE = 18,
	_TIMELINE = "TIMELINE",
	TIMELINE = 19,
	_SEARCHPOPULARCATEGORY = "SEARCHPOPULARCATEGORY",
	SEARCHPOPULARCATEGORY = 20,
	_EXTENDEDPROFILE = "EXTENDEDPROFILE",
	EXTENDEDPROFILE = 21,
	_SEASONALMARKETING = "SEASONALMARKETING",
	SEASONALMARKETING = 22,
	_NEWSTAB = "NEWSTAB",
	NEWSTAB = 23,
	_SUGGESTDICTIONARYV2 = "SUGGESTDICTIONARYV2",
	SUGGESTDICTIONARYV2 = 24,
	_CHATAPPSYNC = "CHATAPPSYNC",
	CHATAPPSYNC = 25,
	_AGREEMENTS = "AGREEMENTS",
	AGREEMENTS = 26,
	_INSTANTNEWS = "INSTANTNEWS",
	INSTANTNEWS = 27,
	_EMOJI_MAPPING = "EMOJI_MAPPING",
	EMOJI_MAPPING = 28,
	_SEARCHBARKEYWORDS = "SEARCHBARKEYWORDS",
	SEARCHBARKEYWORDS = 29,
	_SHOPPING = "SHOPPING",
	SHOPPING = 30,
	_CHAT_EFFECT_BACKGROUND = "CHAT_EFFECT_BACKGROUND",
	CHAT_EFFECT_BACKGROUND = 31,
	_CHAT_EFFECT_KEYWORD = "CHAT_EFFECT_KEYWORD",
	CHAT_EFFECT_KEYWORD = 32,
	_SEARCHINDEX = "SEARCHINDEX",
	SEARCHINDEX = 33,
	_HUBTAB = "HUBTAB",
	HUBTAB = 34,
	_PAY_RULE_UPDATED = "PAY_RULE_UPDATED",
	PAY_RULE_UPDATED = 35,
	_SMARTCH = "SMARTCH",
	SMARTCH = 36,
	_HOME_SERVICE_LIST = "HOME_SERVICE_LIST",
	HOME_SERVICE_LIST = 37,
	_TIMELINESTORY = "TIMELINESTORY",
	TIMELINESTORY = 38,
	_WALLET_TAB = "WALLET_TAB",
	WALLET_TAB = 39,
	_POD_TAB = "POD_TAB",
	POD_TAB = 40,
	_HOME_SAFETY_CHECK = "HOME_SAFETY_CHECK",
	HOME_SAFETY_CHECK = 41,
}

export enum SyncCategories {
	_ALL = "ALL",
	ALL = 0,
	_PROFILE = "PROFILE",
	PROFILE = 1,
	_SETTINGS = "SETTINGS",
	SETTINGS = 2,
	_CONFIGURATIONS = "CONFIGURATIONS",
	CONFIGURATIONS = 3,
	_CONTACT = "CONTACT",
	CONTACT = 4,
	_GROUP = "GROUP",
	GROUP = 5,
	_E2EE = "E2EE",
	E2EE = 6,
	_MESSAGE = "MESSAGE",
	MESSAGE = 7,
}

export enum MediaMessageFlow {
	_V1 = "V1",
	V1 = 1,
	_V2 = "V2",
	V2 = 2,
}

export enum MessageReactionType {
	_ALL = "ALL",
	ALL = 0,
	_UNDO = "UNDO",
	UNDO = 1,
	_NICE = "NICE",
	NICE = 2,
	_LOVE = "LOVE",
	LOVE = 3,
	_FUN = "FUN",
	FUN = 4,
	_AMAZING = "AMAZING",
	AMAZING = 5,
	_SAD = "SAD",
	SAD = 6,
	_OMG = "OMG",
	OMG = 7,
}

export enum SquareChatAnnouncementType {}

export enum PictureSource {
	_NFT = "NFT",
	NFT = 1,
	_AVATAR = "AVATAR",
	AVATAR = 2,
	_SNOW = "SNOW",
	SNOW = 3,
	_ARCZ = "ARCZ",
	ARCZ = 4,
}

export enum RejectionReason {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_INVALID_TARGET_USER = "INVALID_TARGET_USER",
	INVALID_TARGET_USER = 1,
	_AGE_VALIDATION = "AGE_VALIDATION",
	AGE_VALIDATION = 2,
	_TOO_MANY_FRIENDS = "TOO_MANY_FRIENDS",
	TOO_MANY_FRIENDS = 3,
	_TOO_MANY_REQUESTS = "TOO_MANY_REQUESTS",
	TOO_MANY_REQUESTS = 4,
	_MALFORMED_REQUEST = "MALFORMED_REQUEST",
	MALFORMED_REQUEST = 5,
}

export enum SquareMessageState {
	_SENT = "SENT",
	SENT = 1,
	_DELETED = "DELETED",
	DELETED = 2,
	_FORBIDDEN = "FORBIDDEN",
	FORBIDDEN = 3,
	_UNSENT = "UNSENT",
	UNSENT = 4,
}

export enum SquareEventType {
	_RECEIVE_MESSAGE = "RECEIVE_MESSAGE",
	RECEIVE_MESSAGE = 0,
	_SEND_MESSAGE = "SEND_MESSAGE",
	SEND_MESSAGE = 1,
	_MUTATE_MESSAGE = "MUTATE_MESSAGE",
	MUTATE_MESSAGE = 41,
	_NOTIFIED_JOIN_SQUARE_CHAT = "NOTIFIED_JOIN_SQUARE_CHAT",
	NOTIFIED_JOIN_SQUARE_CHAT = 2,
	_NOTIFIED_INVITE_INTO_SQUARE_CHAT = "NOTIFIED_INVITE_INTO_SQUARE_CHAT",
	NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3,
	_NOTIFIED_LEAVE_SQUARE_CHAT = "NOTIFIED_LEAVE_SQUARE_CHAT",
	NOTIFIED_LEAVE_SQUARE_CHAT = 4,
	_NOTIFIED_DESTROY_MESSAGE = "NOTIFIED_DESTROY_MESSAGE",
	NOTIFIED_DESTROY_MESSAGE = 5,
	_NOTIFIED_MARK_AS_READ = "NOTIFIED_MARK_AS_READ",
	NOTIFIED_MARK_AS_READ = 6,
	_NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = "NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE",
	NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7,
	_NOTIFIED_KICKOUT_FROM_SQUARE = "NOTIFIED_KICKOUT_FROM_SQUARE",
	NOTIFIED_KICKOUT_FROM_SQUARE = 19,
	_NOTIFIED_SHUTDOWN_SQUARE = "NOTIFIED_SHUTDOWN_SQUARE",
	NOTIFIED_SHUTDOWN_SQUARE = 18,
	_NOTIFIED_DELETE_SQUARE_CHAT = "NOTIFIED_DELETE_SQUARE_CHAT",
	NOTIFIED_DELETE_SQUARE_CHAT = 20,
	_NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME",
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30,
	_NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = "NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE",
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31,
	_NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT = "NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT",
	NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT = 38,
	_NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = "NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT",
	NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37,
	_NOTIFIED_ADD_BOT = "NOTIFIED_ADD_BOT",
	NOTIFIED_ADD_BOT = 33,
	_NOTIFIED_REMOVE_BOT = "NOTIFIED_REMOVE_BOT",
	NOTIFIED_REMOVE_BOT = 34,
	_NOTIFIED_UPDATE_READONLY_CHAT = "NOTIFIED_UPDATE_READONLY_CHAT",
	NOTIFIED_UPDATE_READONLY_CHAT = 43,
	_NOTIFIED_UPDATE_MESSAGE_STATUS = "NOTIFIED_UPDATE_MESSAGE_STATUS",
	NOTIFIED_UPDATE_MESSAGE_STATUS = 46,
	_NOTIFIED_CHAT_POPUP = "NOTIFIED_CHAT_POPUP",
	NOTIFIED_CHAT_POPUP = 48,
	_NOTIFIED_SYSTEM_MESSAGE = "NOTIFIED_SYSTEM_MESSAGE",
	NOTIFIED_SYSTEM_MESSAGE = 49,
	_NOTIFIED_UPDATE_SQUARE = "NOTIFIED_UPDATE_SQUARE",
	NOTIFIED_UPDATE_SQUARE = 8,
	_NOTIFIED_UPDATE_SQUARE_STATUS = "NOTIFIED_UPDATE_SQUARE_STATUS",
	NOTIFIED_UPDATE_SQUARE_STATUS = 9,
	_NOTIFIED_UPDATE_SQUARE_AUTHORITY = "NOTIFIED_UPDATE_SQUARE_AUTHORITY",
	NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10,
	_NOTIFIED_UPDATE_SQUARE_MEMBER = "NOTIFIED_UPDATE_SQUARE_MEMBER",
	NOTIFIED_UPDATE_SQUARE_MEMBER = 11,
	_NOTIFIED_UPDATE_SQUARE_CHAT = "NOTIFIED_UPDATE_SQUARE_CHAT",
	NOTIFIED_UPDATE_SQUARE_CHAT = 12,
	_NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = "NOTIFIED_UPDATE_SQUARE_CHAT_STATUS",
	NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13,
	_NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = "NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER",
	NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14,
	_NOTIFIED_CREATE_SQUARE_MEMBER = "NOTIFIED_CREATE_SQUARE_MEMBER",
	NOTIFIED_CREATE_SQUARE_MEMBER = 15,
	_NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = "NOTIFIED_CREATE_SQUARE_CHAT_MEMBER",
	NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16,
	_NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = "NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION",
	NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17,
	_NOTIFIED_UPDATE_SQUARE_FEATURE_SET = "NOTIFIED_UPDATE_SQUARE_FEATURE_SET",
	NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32,
	_NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET = "NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET",
	NOTIFIED_UPDATE_SQUARE_CHAT_FEATURE_SET = 50,
	_NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = "NOTIFIED_UPDATE_SQUARE_NOTE_STATUS",
	NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36,
	_NOTIFICATION_JOIN_REQUEST = "NOTIFICATION_JOIN_REQUEST",
	NOTIFICATION_JOIN_REQUEST = 21,
	_NOTIFICATION_JOINED = "NOTIFICATION_JOINED",
	NOTIFICATION_JOINED = 22,
	_NOTIFICATION_PROMOTED_COADMIN = "NOTIFICATION_PROMOTED_COADMIN",
	NOTIFICATION_PROMOTED_COADMIN = 23,
	_NOTIFICATION_PROMOTED_ADMIN = "NOTIFICATION_PROMOTED_ADMIN",
	NOTIFICATION_PROMOTED_ADMIN = 24,
	_NOTIFICATION_DEMOTED_MEMBER = "NOTIFICATION_DEMOTED_MEMBER",
	NOTIFICATION_DEMOTED_MEMBER = 25,
	_NOTIFICATION_KICKED_OUT = "NOTIFICATION_KICKED_OUT",
	NOTIFICATION_KICKED_OUT = 26,
	_NOTIFICATION_SQUARE_DELETE = "NOTIFICATION_SQUARE_DELETE",
	NOTIFICATION_SQUARE_DELETE = 27,
	_NOTIFICATION_SQUARE_CHAT_DELETE = "NOTIFICATION_SQUARE_CHAT_DELETE",
	NOTIFICATION_SQUARE_CHAT_DELETE = 28,
	_NOTIFICATION_MESSAGE = "NOTIFICATION_MESSAGE",
	NOTIFICATION_MESSAGE = 29,
	_NOTIFICATION_POST_ANNOUNCEMENT = "NOTIFICATION_POST_ANNOUNCEMENT",
	NOTIFICATION_POST_ANNOUNCEMENT = 39,
	_NOTIFICATION_POST = "NOTIFICATION_POST",
	NOTIFICATION_POST = 40,
	_NOTIFICATION_NEW_CHAT_MEMBER = "NOTIFICATION_NEW_CHAT_MEMBER",
	NOTIFICATION_NEW_CHAT_MEMBER = 42,
	_NOTIFICATION_MESSAGE_REACTION = "NOTIFICATION_MESSAGE_REACTION",
	NOTIFICATION_MESSAGE_REACTION = 47,
}

export enum SquareEventStatus {
	_NORMAL = "NORMAL",
	NORMAL = 1,
	_ALERT_DISABLED = "ALERT_DISABLED",
	ALERT_DISABLED = 2,
}

export enum SquareMembershipState {
	_JOIN_REQUESTED = "JOIN_REQUESTED",
	JOIN_REQUESTED = 1,
	_JOINED = "JOINED",
	JOINED = 2,
	_REJECTED = "REJECTED",
	REJECTED = 3,
	_LEFT = "LEFT",
	LEFT = 4,
	_KICK_OUT = "KICK_OUT",
	KICK_OUT = 5,
	_BANNED = "BANNED",
	BANNED = 6,
	_DELETED = "DELETED",
	DELETED = 7,
}

export enum SquareMemberRole {
	_ADMIN = "ADMIN",
	ADMIN = 1,
	_CO_ADMIN = "CO_ADMIN",
	CO_ADMIN = 2,
	_MEMBER = "MEMBER",
	MEMBER = 10,
}

export enum SquareMemberRelationState {
	_NONE = "NONE",
	NONE = 1,
	_BLOCKED = "BLOCKED",
	BLOCKED = 2,
}

export enum SquareType {
	_CLOSED = "CLOSED",
	CLOSED = 0,
	_OPEN = "OPEN",
	OPEN = 1,
}

export enum SquareState {
	_ALIVE = "ALIVE",
	ALIVE = 0,
	_DELETED = "DELETED",
	DELETED = 1,
	_SUSPENDED = "SUSPENDED",
	SUSPENDED = 2,
}

export enum SquareEmblem {
	_SUPER = "SUPER",
	SUPER = 1,
	_OFFICIAL = "OFFICIAL",
	OFFICIAL = 2,
}

export enum SquareJoinMethodType {
	_NONE = "NONE",
	NONE = 0,
	_APPROVAL = "APPROVAL",
	APPROVAL = 1,
	_CODE = "CODE",
	CODE = 2,
}

export enum BooleanState {
	_NONE = "NONE",
	NONE = 0,
	_OFF = "OFF",
	OFF = 1,
	_ON = "ON",
	ON = 2,
}

export enum SquareChatType {
	_OPEN = "OPEN",
	OPEN = 1,
	_SECRET = "SECRET",
	SECRET = 2,
	_ONE_ON_ONE = "ONE_ON_ONE",
	ONE_ON_ONE = 3,
	_SQUARE_DEFAULT = "SQUARE_DEFAULT",
	SQUARE_DEFAULT = 4,
}

export enum SquareChatState {
	_ALIVE = "ALIVE",
	ALIVE = 0,
	_DELETED = "DELETED",
	DELETED = 1,
	_SUSPENDED = "SUSPENDED",
	SUSPENDED = 2,
}

export enum MessageStatusType {}

export enum NotifiedMessageType {
	_MENTION = "MENTION",
	MENTION = 1,
	_REPLY = "REPLY",
	REPLY = 2,
}

export enum SquareChatMembershipState {
	_JOINED = "JOINED",
	JOINED = 1,
	_LEFT = "LEFT",
	LEFT = 2,
}

export enum SquareFeatureControlState {
	_DISABLED = "DISABLED",
	DISABLED = 1,
	_ENABLED = "ENABLED",
	ENABLED = 2,
}

export enum SquareChatFeatureControlState {
	_DISABLED = "DISABLED",
	DISABLED = 1,
	_ENABLED = "ENABLED",
	ENABLED = 2,
}

export enum NotificationPostType {
	_POST_MENTION = "POST_MENTION",
	POST_MENTION = 2,
	_POST_LIKE = "POST_LIKE",
	POST_LIKE = 3,
	_POST_COMMENT = "POST_COMMENT",
	POST_COMMENT = 4,
	_POST_COMMENT_MENTION = "POST_COMMENT_MENTION",
	POST_COMMENT_MENTION = 5,
	_POST_COMMENT_LIKE = "POST_COMMENT_LIKE",
	POST_COMMENT_LIKE = 6,
	_POST_RELAY_JOIN = "POST_RELAY_JOIN",
	POST_RELAY_JOIN = 7,
}

export enum SquareChatThreadState {
	_ACTIVE = "ACTIVE",
	ACTIVE = 1,
	_INACTIVE = "INACTIVE",
	INACTIVE = 2,
}

export enum SquareChatThreadeMembershipState {
	_ACTIVATED = "ACTIVATED",
	ACTIVATED = 1,
	_DEACTIVATED = "DEACTIVATED",
	DEACTIVATED = 2,
}

export enum LiveTalkEventType {
	_NOTIFIED_UPDATE_LIVE_TALK_TITLE = "NOTIFIED_UPDATE_LIVE_TALK_TITLE",
	NOTIFIED_UPDATE_LIVE_TALK_TITLE = 1,
	_NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING = "NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING",
	NOTIFIED_UPDATE_LIVE_TALK_SPEAKER_SETTING = 2,
	_NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT = "NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT",
	NOTIFIED_UPDATE_LIVE_TALK_ANNOUNCEMENT = 3,
	_NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE = "NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE",
	NOTIFIED_UPDATE_SQUARE_MEMBER_ROLE = 4,
	_NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK = "NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK",
	NOTIFIED_UPDATE_LIVE_TALK_ALLOW_REQUEST_TO_SPEAK = 5,
}

export enum LiveTalkSpeakerSetting {
	_LIMITED_SPEAKERS = "LIMITED_SPEAKERS",
	LIMITED_SPEAKERS = 1,
	_ALL_AS_SPEAKERS = "ALL_AS_SPEAKERS",
	ALL_AS_SPEAKERS = 2,
}

export enum LiveTalkType {
	_PUBLIC = "PUBLIC",
	PUBLIC = 1,
	_PRIVATE = "PRIVATE",
	PRIVATE = 2,
}

export enum UserType {
	_USER = "USER",
	USER = 1,
	_BOT = "BOT",
	BOT = 2,
}

export enum ProductType {
	_STICKER = "STICKER",
	STICKER = 1,
	_THEME = "THEME",
	THEME = 2,
	_STICON = "STICON",
	STICON = 3,
}

export enum StickerResourceType {
	_STATIC = "STATIC",
	STATIC = 1,
	_ANIMATION = "ANIMATION",
	ANIMATION = 2,
	_SOUND = "SOUND",
	SOUND = 3,
	_ANIMATION_SOUND = "ANIMATION_SOUND",
	ANIMATION_SOUND = 4,
	_POPUP = "POPUP",
	POPUP = 5,
	_POPUP_SOUND = "POPUP_SOUND",
	POPUP_SOUND = 6,
	_NAME_TEXT = "NAME_TEXT",
	NAME_TEXT = 7,
	_PER_STICKER_TEXT = "PER_STICKER_TEXT",
	PER_STICKER_TEXT = 8,
}

export enum ThemeResourceType {
	_STATIC = "STATIC",
	STATIC = 1,
	_ANIMATION = "ANIMATION",
	ANIMATION = 2,
}

export enum SticonResourceType {
	_STATIC = "STATIC",
	STATIC = 1,
	_ANIMATION = "ANIMATION",
	ANIMATION = 2,
}

export enum ImageTextStatus {
	_OK = "OK",
	OK = 0,
	_PRODUCT_UNSUPPORTED = "PRODUCT_UNSUPPORTED",
	PRODUCT_UNSUPPORTED = 1,
	_TEXT_NOT_SPECIFIED = "TEXT_NOT_SPECIFIED",
	TEXT_NOT_SPECIFIED = 2,
	_TEXT_STYLE_UNAVAILABLE = "TEXT_STYLE_UNAVAILABLE",
	TEXT_STYLE_UNAVAILABLE = 3,
	_CHARACTER_COUNT_LIMIT_EXCEEDED = "CHARACTER_COUNT_LIMIT_EXCEEDED",
	CHARACTER_COUNT_LIMIT_EXCEEDED = 4,
	_CONTAINS_INVALID_WORD = "CONTAINS_INVALID_WORD",
	CONTAINS_INVALID_WORD = 5,
}

export enum SubType {
	_GENERAL = "GENERAL",
	GENERAL = 0,
	_CREATORS = "CREATORS",
	CREATORS = 1,
	_STICON = "STICON",
	STICON = 2,
}

export enum StickerSize {
	_NORMAL = "NORMAL",
	NORMAL = 0,
	_BIG = "BIG",
	BIG = 1,
}

export enum PopupLayer {
	_FOREGROUND = "FOREGROUND",
	FOREGROUND = 0,
	_BACKGROUND = "BACKGROUND",
	BACKGROUND = 1,
}

export enum ProductSalesState {
	_ON_SALE = "ON_SALE",
	ON_SALE = 0,
	_OUTDATED_VERSION = "OUTDATED_VERSION",
	OUTDATED_VERSION = 1,
	_NOT_ON_SALE = "NOT_ON_SALE",
	NOT_ON_SALE = 2,
}

export enum PromotionType {
	_NONE = "NONE",
	NONE = 0,
	_CARRIER = "CARRIER",
	CARRIER = 1,
	_BUDDY = "BUDDY",
	BUDDY = 2,
	_INSTALL = "INSTALL",
	INSTALL = 3,
	_MISSION = "MISSION",
	MISSION = 4,
	_MUSTBUY = "MUSTBUY",
	MUSTBUY = 5,
}

export enum PromotionMissionType {
	_DEFAULT = "DEFAULT",
	DEFAULT = 1,
	_VIEW_VIDEO = "VIEW_VIDEO",
	VIEW_VIDEO = 2,
}

export enum BrandType {
	_PREMIUM = "PREMIUM",
	PREMIUM = 1,
	_VERIFIED = "VERIFIED",
	VERIFIED = 2,
	_UNVERIFIED = "UNVERIFIED",
	UNVERIFIED = 3,
}

export enum EditorsPickShowcaseType {
	_STATIC = "STATIC",
	STATIC = 0,
	_POPULAR = "POPULAR",
	POPULAR = 1,
	_NEW_RELEASE = "NEW_RELEASE",
	NEW_RELEASE = 2,
}

export enum ProductAvailability {
	_PURCHASE_ONLY = "PURCHASE_ONLY",
	PURCHASE_ONLY = 0,
	_PURCHASE_OR_SUBSCRIPTION = "PURCHASE_OR_SUBSCRIPTION",
	PURCHASE_OR_SUBSCRIPTION = 1,
	_SUBSCRIPTION_ONLY = "SUBSCRIPTION_ONLY",
	SUBSCRIPTION_ONLY = 2,
}

export enum DemographicGenderType {
	_ALL = "ALL",
	ALL = 0,
	_MALE = "MALE",
	MALE = 1,
	_FEMALE = "FEMALE",
	FEMALE = 2,
}

export enum DemographicAgeType {
	_ALL = "ALL",
	ALL = 0,
	_AGE_0_19 = "AGE_0_19",
	AGE_0_19 = 1,
	_AGE_20_29 = "AGE_20_29",
	AGE_20_29 = 2,
	_AGE_30_39 = "AGE_30_39",
	AGE_30_39 = 3,
	_AGE_40_INF = "AGE_40_INF",
	AGE_40_INF = 4,
	_AGE_40_49 = "AGE_40_49",
	AGE_40_49 = 5,
	_AGE_50_INF = "AGE_50_INF",
	AGE_50_INF = 6,
}

export enum ShowcaseType {
	_POPULAR = "POPULAR",
	POPULAR = 0,
	_NEW_RELEASE = "NEW_RELEASE",
	NEW_RELEASE = 1,
	_EVENT = "EVENT",
	EVENT = 2,
	_RECOMMENDED = "RECOMMENDED",
	RECOMMENDED = 3,
	_POPULAR_WEEKLY = "POPULAR_WEEKLY",
	POPULAR_WEEKLY = 4,
	_POPULAR_MONTHLY = "POPULAR_MONTHLY",
	POPULAR_MONTHLY = 5,
	_POPULAR_RECENTLY_PUBLISHED = "POPULAR_RECENTLY_PUBLISHED",
	POPULAR_RECENTLY_PUBLISHED = 6,
	_BUDDY = "BUDDY",
	BUDDY = 7,
	_EXTRA_EVENT = "EXTRA_EVENT",
	EXTRA_EVENT = 8,
	_BROWSING_HISTORY = "BROWSING_HISTORY",
	BROWSING_HISTORY = 9,
	_POPULAR_TOTAL_SALES = "POPULAR_TOTAL_SALES",
	POPULAR_TOTAL_SALES = 10,
	_NEW_SUBSCRIPTION = "NEW_SUBSCRIPTION",
	NEW_SUBSCRIPTION = 11,
	_POPULAR_SUBSCRIPTION_30D = "POPULAR_SUBSCRIPTION_30D",
	POPULAR_SUBSCRIPTION_30D = 12,
	_CPD_STICKER = "CPD_STICKER",
	CPD_STICKER = 13,
	_POPULAR_WITH_FREE = "POPULAR_WITH_FREE",
	POPULAR_WITH_FREE = 14,
}

export enum EditorsPickContentType {
	_STICKER = "STICKER",
	STICKER = 1,
	_URL = "URL",
	URL = 2,
	_THEME = "THEME",
	THEME = 3,
	_EMOJI = "EMOJI",
	EMOJI = 4,
}

export enum TagType {
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 0,
	_CHARACTER = "CHARACTER",
	CHARACTER = 1,
	_TASTE = "TASTE",
	TASTE = 2,
}

export enum CategoryType {
	_GENERAL_CATEGORY = "GENERAL_CATEGORY",
	GENERAL_CATEGORY = 1,
	_CREATORS_TAG = "CREATORS_TAG",
	CREATORS_TAG = 2,
}

export enum SubscriptionPlanAvailability {
	_AVAILABLE = "AVAILABLE",
	AVAILABLE = 0,
	_DIFFERENT_STORE = "DIFFERENT_STORE",
	DIFFERENT_STORE = 1,
	_NOT_STUDENT = "NOT_STUDENT",
	NOT_STUDENT = 2,
	_ALREADY_PURCHASED = "ALREADY_PURCHASED",
	ALREADY_PURCHASED = 3,
}

export enum SubscriptionServiceType {
	_STICKERS_PREMIUM = "STICKERS_PREMIUM",
	STICKERS_PREMIUM = 1,
}

export enum SubscriptionPlanTarget {
	_GENERAL = "GENERAL",
	GENERAL = 1,
	_STUDENT = "STUDENT",
	STUDENT = 2,
}

export enum SubscriptionPlanType {
	_MONTHLY = "MONTHLY",
	MONTHLY = 1,
	_YEARLY = "YEARLY",
	YEARLY = 2,
}

export enum SubscriptionPlanTier {
	_BASIC = "BASIC",
	BASIC = 1,
	_DELUXE = "DELUXE",
	DELUXE = 2,
}

export enum SubscriptionSlotModificationResult {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_NO_SUBSCRIPTION = "NO_SUBSCRIPTION",
	NO_SUBSCRIPTION = 2,
	_EXISTS = "EXISTS",
	EXISTS = 3,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 4,
	_EXCEEDS_LIMIT = "EXCEEDS_LIMIT",
	EXCEEDS_LIMIT = 5,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 6,
}

export enum SubscriptionBillingResult {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 2,
	_NO_SUBSCRIPTION = "NO_SUBSCRIPTION",
	NO_SUBSCRIPTION = 3,
	_SUBSCRIPTION_EXISTS = "SUBSCRIPTION_EXISTS",
	SUBSCRIPTION_EXISTS = 4,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 5,
	_CONFLICT = "CONFLICT",
	CONFLICT = 6,
	_OUTDATED_VERSION = "OUTDATED_VERSION",
	OUTDATED_VERSION = 7,
	_NO_STUDENT_INFORMATION = "NO_STUDENT_INFORMATION",
	NO_STUDENT_INFORMATION = 8,
	_ACCOUNT_HOLD = "ACCOUNT_HOLD",
	ACCOUNT_HOLD = 9,
	_RETRY_STATE = "RETRY_STATE",
	RETRY_STATE = 10,
}

export enum SubscriptionCampaignType {
	_MISSION = "MISSION",
	MISSION = 1,
	_FREE_TRIAL = "FREE_TRIAL",
	FREE_TRIAL = 2,
}

export enum SubscriptionSortType {
	_DATE_ASC = "DATE_ASC",
	DATE_ASC = 1,
	_DATE_DESC = "DATE_DESC",
	DATE_DESC = 2,
}

export enum StartBundleSubscriptionResult {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_INVALID_PARAMETER = "INVALID_PARAMETER",
	INVALID_PARAMETER = 2,
	_NOT_ELIGIBLE = "NOT_ELIGIBLE",
	NOT_ELIGIBLE = 3,
	_CONFLICT = "CONFLICT",
	CONFLICT = 4,
	_ACCOUNT_HOLD = "ACCOUNT_HOLD",
	ACCOUNT_HOLD = 5,
	_RETRY_STATE = "RETRY_STATE",
	RETRY_STATE = 6,
}

export enum StopBundleSubscriptionResult {
	_OK = "OK",
	OK = 0,
	_INVALID_PARAMETER = "INVALID_PARAMETER",
	INVALID_PARAMETER = 1,
	_NOT_FOUND = "NOT_FOUND",
	NOT_FOUND = 2,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 3,
	_CONFLICT = "CONFLICT",
	CONFLICT = 4,
	_NOT_ELIGIBLE = "NOT_ELIGIBLE",
	NOT_ELIGIBLE = 5,
}

export enum GetSubscriptionCouponCodeResult {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 2,
	_NOT_AVAILABLE = "NOT_AVAILABLE",
	NOT_AVAILABLE = 3,
	_NOT_APPLICABLE = "NOT_APPLICABLE",
	NOT_APPLICABLE = 4,
}

export enum GetFriendStatusWithPremiumOaResult {
	_FRIEND = "FRIEND",
	FRIEND = 0,
	_BLOCKED = "BLOCKED",
	BLOCKED = 1,
	_NOT_FRIEND = "NOT_FRIEND",
	NOT_FRIEND = 2,
	_ERROR = "ERROR",
	ERROR = 3,
}

export enum SubscriptionCouponCampaignStatus {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 2,
	_NOT_ACTIVE = "NOT_ACTIVE",
	NOT_ACTIVE = 3,
	_NOT_APPLICABLE = "NOT_APPLICABLE",
	NOT_APPLICABLE = 4,
}

export enum AcceptSubscriptionAgreementResult {
	_OK = "OK",
	OK = 0,
	_UNKNOWN = "UNKNOWN",
	UNKNOWN = 1,
	_NOT_SUPPORTED = "NOT_SUPPORTED",
	NOT_SUPPORTED = 2,
	_NO_SUBSCRIPTION = "NO_SUBSCRIPTION",
	NO_SUBSCRIPTION = 3,
}

export enum StoreCode {
	_GOOGLE = "GOOGLE",
	GOOGLE = 0,
	_APPLE = "APPLE",
	APPLE = 1,
	_WEBSTORE = "WEBSTORE",
	WEBSTORE = 2,
	_LINEMO = "LINEMO",
	LINEMO = 3,
	_LINE_MUSIC = "LINE_MUSIC",
	LINE_MUSIC = 4,
	_LYP = "LYP",
	LYP = 5,
	_TW_CHT = "TW_CHT",
	TW_CHT = 6,
	_FREEMIUM = "FREEMIUM",
	FREEMIUM = 7,
}

export enum BirthdayGiftAssociationVerifyTokenStatus {
	_VALID = "VALID",
	VALID = 0,
	_INVALID = "INVALID",
	INVALID = 1,
}

export enum PopupDesignTemplate {
	_FIXED = "FIXED",
	FIXED = 0,
}

export enum PopupDisplayCount {
	_ONCE = "ONCE",
	ONCE = 0,
}

export enum PopupVisualType {
	_BASIC = "BASIC",
	BASIC = 0,
	_FULLSCREEN = "FULLSCREEN",
	FULLSCREEN = 1,
}

export interface TalkException {
	code: ErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface ChannelException {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface SquareException {
	errorCode: SquareErrorCode;
	errorExtraInfo: ErrorExtraInfo;
	reason: string;
}

export interface LiffException {
	code: LiffErrorCode;
	message: string;
	payload: LiffErrorPayload;
}

export interface HomeException {
	exceptionCode: HomeExceptionCode;
	message: string;
	retryTimeMillis: Int64;
}

export interface ChatappException {
	code: ChatappErrorCode;
	reason: string;
}

export interface MembershipException {
	code: MembershipErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface BotException {
	errorCode: BotErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface BotExternalException {
	errorCode: BotExternalErrorCode;
	reason: string;
}

export interface LiffChannelException {
	code: ChannelErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface AccessTokenRefreshException {
	errorCode: AccessTokenRefreshErrorCode;
	reasonCode: Int64;
}

export interface AccountEapConnectException {
	code: AccountEapConnectErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;
}

export interface PwlessCredentialException {
	code: PwlessCredentialErrorCode;
	alertMessage: string;
}

export interface SecondAuthFactorPinCodeException {
	code: SecondAuthFactorPinCodeErrorCode;
	alertMessage: string;
}

export interface AuthException {
	code: AuthErrorCode;
	alertMessage: string;
	webAuthDetails: WebAuthDetails;
}

export interface SecondaryPwlessLoginException {
	code: SecondaryPwlessLoginErrorCode;
	alertMessage: string;
}

export interface SecondaryQrCodeException {
	code: SecondaryQrCodeErrorCode;
	alertMessage: string;
}

export interface PaymentException {
	errorCode: PaymentErrorCode;
	debugReason: string;
	serverDefinedMessage: string;
	errorDetailMap: { [k: string]: string };
}

export interface SettingsException {
	code: SettingsErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface TicketException {
	code: number;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface ThingsException {
	code: ThingsErrorCode;
	reason: string;
}

export interface SuggestTrialException {
	code: SuggestTrialErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface LFLPremiumException {
	code: LFLPremiumErrorCode;
}

export interface WalletException {
	code: WalletErrorCode;
	reason: string;
	attributes: { [k: string]: string };
}

export interface ShopException {
	code: ShopErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface PointException {
	code: PointErrorCode;
	reason: string;
	extra: { [k: string]: string };
}

export interface E2EEKeyBackupException {
	code: E2EEKeyBackupErrorCode;
	reason: string;
	parameterMap: { [k: string]: string };
}

export interface RejectedException {
	rejectionReason: RejectionReason;
	hint: string;
}

export interface ServerFailureException {
	hint: string;
}

export interface UpdateChatRequest {
	reqSeq: number;
	chat: Chat;
	updatedAttribute: number;
}

export interface UpdateChatResponse {}

export interface AcceptChatInvitationByTicketRequest {
	reqSeq: number;
	chatMid: string;
	ticketId: string;
}

export interface AcceptChatInvitationByTicketResponse {}

export interface AcceptChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
}

export interface ReissueChatTicketRequest {
	reqSeq: number;
	groupMid: string;
}

export interface AcceptChatInvitationResponse {}

export interface ReissueChatTicketResponse {
	ticketId: string;
}

export interface RejectChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
}

export interface GetAllChatMidsRequest {
	withMemberChats?: boolean;
	withInvitedChats?: boolean;
}

export interface RejectChatInvitationResponse {}

export interface GetAllChatMidsResponse {
	memberChatMids: string[];
	invitedChatMids: string[];
}

export interface CreateChatRequest {
	reqSeq: number;
	type: number;
	name?: string;
	targetUserMids: string[];
	picturePath?: string;
}

export interface CreateChatResponse {
	chat: Chat;
}

export interface BeaconCondition {
	inFriends: string;
	notInFriends: string;
	termsAgreed: boolean;
}

export interface BeaconBackgroundNotification {
	actionInterval: Int64;
	actionAndConditions: BeaconCondition[];
	actionDelay: Int64;
	actionConditions: BeaconCondition[];
}

export interface LiffErrorPayload {
	consentRequired: LiffErrorConsentRequired;
}

export interface LiffErrorConsentRequired {
	channelId: string;
	consentUrl: string;
}

export interface ErrorExtraInfo {
	preconditionFailedExtraInfo: PreconditionFailedExtraInfo;
	userRestrictionInfo: UserRestrictionExtraInfo;
}

export interface UserRestrictionExtraInfo {
	linkUrl: string;
}

export interface WebAuthDetails {
	baseUrl: string;
	token: string;
}

export interface Profile {
	mid: string;
	userid: string;
	phone: string;
	email: string;
	regionCode: string;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	allowSearchByUserid: boolean;
	allowSearchByEmail: boolean;
	picturePath: string;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	nftProfile: boolean;
	pictureSource: PictureSource;
}

export interface AvatarProfile {
	version: string;
	updatedMillis: Int64;
	thumbnail: string;
	usablePublicly: boolean;
}

export interface Operation {
	revision: Int64;
	createdTime: Int64;
	type: OpType;
	reqSeq: number;
	checksum: string;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;
}

export interface Message {
	_from: string;
	to: string;
	toType: MIDType;
	id: string;
	createdTime: Int64;
	deliveredTime: Int64;
	text: string;
	location: Location;
	hasContent: boolean;
	contentType: ContentType;
	contentPreview: Buffer | string;
	contentMetadata: { [k: string]: string };
	sessionId: any;
	chunks: Buffer[] | string[];
	relatedMessageId: string;
	messageRelationType: MessageRelationType;
	readCount: Int64;
	relatedMessageServiceCode: ServiceCode;
	appExtensionType: AppExtensionType;
	reactions: Reaction[];
}

export interface Reaction {
	fromUserMid: string;
	atMillis: Int64;
	reactionType: ReactionType;
}

export interface ReactionType {
	predefinedReactionType: PredefinedReactionType;
}

export interface ReactRequest {
	reqSeq: number;
	messageId: Int64;
	reactionType: ReactionType;
}

export interface Location {
	title: string;
	address: string;
	latitude: number;
	longitude: number;
	phone: string;
	categoryId: string;
	provider: PlaceSearchProvider;
	accuracy: GeolocationAccuracy;
	altitudeMeters: number;
}

export interface GeolocationAccuracy {
	radiusMeters: number;
	radiusConfidence: number;
	altitudeAccuracy: number;
	velocityAccuracy: number;
	bearingAccuracy: number;
	accuracyMode: GeolocationAccuracyMode;
}

export interface Contact {
	mid: string;
	createdTime: Int64;
	type: ContactType;
	status: ContactStatus;
	relation: ContactRelation;
	displayName: string;
	phoneticName: string;
	pictureStatus: string;
	thumbnailUrl: string;
	statusMessage: string;
	displayNameOverridden: string;
	favoriteTime: Int64;
	capableVoiceCall: boolean;
	capableVideoCall: boolean;
	capableMyhome: boolean;
	capableBuddy: boolean;
	attributes: number;
	settings: Int64;
	picturePath: string;
	recommendParams: string;
	friendRequestStatus: FriendRequestStatus;
	musicProfile: string;
	videoProfile: string;
	statusMessageContentMetadata: { [k: string]: string };
	avatarProfile: AvatarProfile;
	friendRingtone: string;
	friendRingbackTone: string;
	nftProfile: boolean;
	pictureSource: PictureSource;
}

export interface GetContactsV2Request {
	targetUserMids: string[];
	neededContactCalendarEvents: ContactCalendarEventType[];
	withUserStatus: boolean;
}

export interface GetContactsV2Response {
	contacts: { [k: string]: ContactEntry };
}

export interface ContactEntry {
	userStatus: UserStatus;
	snapshotTimeMillis: Int64;
	contact: Contact;
	calendarEvents: ContactCalendarEvents;
}

export interface ContactCalendarEvents {
	events: { [k: number /*ContactCalendarEventType*/]: ContactCalendarEvent };
}

export interface ContactCalendarEvent {
	id: string;
	state: ContactCalendarEventState;
	year: number;
	month: number;
	day: number;
}

export interface Configurations {
	revision: Int64;
	configMap: { [k: string]: string };
}

export interface E2EEPublicKey {
	version: number;
	keyId: number;
	keyData: Buffer | string;
	createdTime: Int64;
}

export interface RSAKey {
	keynm: string;
	nvalue: string;
	evalue: string;
	sessionKey: string;
}

export interface Settings {
	notificationEnable: boolean;
	notificationMuteExpiration: Int64;
	notificationNewMessage: boolean;
	notificationGroupInvitation: boolean;
	notificationShowMessage: boolean;
	notificationIncomingCall: boolean;
	notificationSoundMessage: string;
	notificationSoundGroup: string;
	notificationDisabledWithSub: boolean;
	notificationPayment: boolean;
	privacySyncContacts: boolean;
	privacySearchByPhoneNumber: boolean;
	privacySearchByUserid: boolean;
	privacySearchByEmail: boolean;
	privacyAllowSecondaryDeviceLogin: boolean;
	privacyProfileImagePostToMyhome: boolean;
	privacyReceiveMessagesFromNotFriend: boolean;
	privacyAgreeUseLineCoinToPaidCall: boolean;
	privacyAgreeUsePaidCall: boolean;
	privacyAllowFriendRequest: boolean;
	contactMyTicket: string;
	identityProvider: IdentityProvider;
	identityIdentifier: string;
	snsAccounts: { [k: number /*SnsIdType*/]: string };
	phoneRegistration: boolean;
	emailConfirmationStatus: EmailConfirmationStatus;
	accountMigrationPincodeType: AccountMigrationPincodeType;
	enforcedInputAccountMigrationPincode: boolean;
	securityCenterSettingsType: SecurityCenterSettingsType;
	allowUnregistrationSecondaryDevice: boolean;
	pwlessPrimaryCredentialRegistration: boolean;
	preferenceLocale: string;
	customModes: { [k: number /*CustomMode*/]: string };
	e2eeEnable: boolean;
	hitokotoBackupRequested: boolean;
	privacyProfileMusicPostToMyhome: boolean;
	privacyAllowNearby: boolean;
	agreementNearbyTime: Int64;
	agreementSquareTime: Int64;
	notificationMention: boolean;
	botUseAgreementAcceptedAt: Int64;
	agreementShakeFunction: Int64;
	agreementMobileContactName: Int64;
	agreementSoundToText: Int64;
	privacyPolicyVersion: string;
	agreementAdByWebAccess: Int64;
	agreementPhoneNumberMatching: Int64;
	agreementCommunicationInfo: Int64;
	privacySharePersonalInfoToFriends: UserSharePersonalInfoToFriendsType;
	agreementThingsWirelessCommunication: Int64;
	agreementGdpr: Int64;
	privacyStatusMessageHistory: UserStatusMessageHistoryType;
	agreementProvideLocation: Int64;
	agreementBeacon: Int64;
	privacyAllowProfileHistory: UserAllowProfileHistoryType;
	agreementContentsSuggest: Int64;
	agreementContentsSuggestDataCollection: Int64;
	privacyAgeResult: UserAgeType;
	privacyAgeResultReceived: boolean;
	notificationThumbnail: boolean;
	agreementOcrImageCollection: Int64;
	privacyAllowFollow: boolean;
	privacyShowFollowList: boolean;
	notificationBadgeTalkOnly: boolean;
	agreementIcna: Int64;
	notificationReaction: boolean;
	agreementMid: Int64;
	homeNotificationNewFriend: boolean;
	homeNotificationFavoriteFriendUpdate: boolean;
	homeNotificationGroupMemberUpdate: boolean;
	homeNotificationBirthday: boolean;
	eapAllowedToConnect: { [k: number /*SnsIdType*/]: boolean };
	agreementLineOutUse: Int64;
	agreementLineOutProvideInfo: Int64;
	notificationShowProfileImage: boolean;
	agreementPdpa: Int64;
	agreementLocationVersion: string;
	zhdPageAllowedToShow: boolean;
}

export interface E2EENegotiationResult {
	allowedTypes: ContentType[];
	publicKey: E2EEPublicKey;
	specVersion: number;
}

export interface ContactRegistration {
	contact: Contact;
	luid: string;
	contactType: ContactType;
	contactKey: string;
}

export interface E2EEGroupSharedKey {
	keyVersion: number;
	groupKeyId: number;
	creator: string;
	creatorKeyId: number;
	receiver: string;
	receiverKeyId: number;
	encryptedSharedKey: Buffer | string;
	allowedTypes: ContentType[];
	specVersion: number;
}

export interface VerificationSessionData {
	sessionId: string;
	method: VerificationMethod;
	callback: string;
	normalizedPhone: string;
	countryCode: string;
	nationalSignificantNumber: string;
	availableVerificationMethods: VerificationMethod[];
	callerIdMask: string;
}

export interface FollowRequest {
	followMid: FollowMid;
}

export interface FollowMid {
	mid: string;
	eMid: string;
}

export interface UnfollowRequest {
	followMid: FollowMid;
}

export interface Ticket {
	id: string;
	expirationTime: Int64;
	maxUseCount: number;
}

export interface GetChatsRequest {
	chatMids: string[];
	withMembers: boolean;
	withInvitees: boolean;
}

export interface GetChatsResponse {
	chats: Chat[];
}

export interface Chat {
	type: CharType;
	chatMid: string;
	createdTime: Int64;
	notificationDisabled: boolean;
	favoriteTimestamp: Int64;
	chatName: string;
	picturePath: string;
	extra: Extra;
}

export interface Extra {
	groupExtra: GroupExtra;
	peerExtra: PeerExtra;
}

export interface GroupExtra {
	creator: string;
	preventedJoinByTicket: boolean;
	invitationTicket: string;
	memberMids: { [k: string]: Int64 };
	inviteeMids: { [k: string]: Int64 };
	addFriendDisabled: boolean;
	ticketDisabled: boolean;
}

export interface PeerExtra {}

export interface GetFollowersRequest {
	followMid: FollowMid;
	cursor: string;
}

export interface GetFollowersResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;
}

export interface FollowProfile {
	followMid: FollowMid;
	displayName: string;
	picturePath: string;
	following: boolean;
	allowFollow: boolean;
	followBuddyDetail: FollowBuddyDetail;
}

export interface FollowBuddyDetail {
	iconType: number;
}

export interface GetFollowingsRequest {
	followMid: FollowMid;
	cursor: string;
}

export interface GetFollowingsResponse {
	profiles: FollowProfile[];
	cursor: string;
	followingCount: Int64;
	followerCount: Int64;
}

export interface Room {
	mid: string;
	createdTime: Int64;
	contacts: Contact[];
	notificationDisabled: boolean;
	memberMids: string[];
}

export interface ContactModification {
	type: ModificationType;
	luid: string;
	phones: string[];
	emails: string[];
	userids: string[];
}

export interface GetE2EEKeyBackupCertificatesRequest {}

export interface GetE2EEKeyBackupCertificatesResponse {
	urlHashList: string[];
}

export interface DeleteOtherFromChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface DeleteOtherFromChatResponse {}

export interface InviteIntoChatRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface InviteIntoChatResponse {}

export interface CancelChatInvitationRequest {
	reqSeq: number;
	chatMid: string;
	targetUserMids: string[];
}

export interface CancelChatInvitationResponse {}

export interface DeleteSelfFromChatRequest {
	reqSeq: number;
	chatMid: string;
	lastSeenMessageDeliveredTime: Int64;
	lastSeenMessageId: string;
	lastMessageDeliveredTime: Int64;
	lastMessageId: string;
}

export interface DeleteSelfFromChatResponse {}

export interface FindChatByTicketRequest {
	ticketId: string;
}

export interface FindChatByTicketResponse {
	chat: Chat;
}

export interface RefreshAccessTokenRequest {
	refreshToken: string;
}

export interface RefreshAccessTokenResponse {
	accessToken: string;
	durationUntilRefreshInSec: Int64;
	retryPolicy: RetryPolicy;
	tokenIssueTimeEpochSec: Int64;
	refreshToken: string;
}

export interface RetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;
}

export interface TMessageReadRange {
	chatId: string;
	ranges: { [k: string]: TMessageReadRangeEntry[] };
}

export interface TMessageReadRangeEntry {
	startMessageId: Int64;
	endMessageId: Int64;
	startTime: Int64;
	endTime: Int64;
}

export interface BuddyDetail {
	mid: string;
	memberCount: Int64;
	onAir: boolean;
	businessAccount: boolean;
	addable: boolean;
	acceptableContentTypes: ContentType[];
	capableMyhome: boolean;
	freePhoneCallable: boolean;
	phoneNumberToDial: string;
	needPermissionApproval: boolean;
	channelId: string;
	channelProviderName: string;
	iconType: number;
	botType: BotType;
	showRichMenu: boolean;
	richMenuRevision: Int64;
	onAirLabel: BuddyOnAirLabel;
	useTheme: boolean;
	themeId: string;
	useBar: boolean;
	barRevision: Int64;
	useBackground: boolean;
	backgroundId: string;
	statusBarEnabled: boolean;
	statusBarRevision: Int64;
	searchId: string;
	onAirVersion: number;
	blockable: boolean;
	botActiveStatus: BuddyBotActiveStatus;
	membershipEnabled: boolean;
}

export interface MessageBoxV2MessageId {
	deliveredTime: Int64;
	messageId: Int64;
}

export interface GetPreviousMessagesV2Request {
	messageBoxId: string;
	endMessageId: MessageBoxV2MessageId;
	messagesCount: number;
	withReadCount: boolean;
	receivedOnly: boolean;
}

export interface ChannelToken {
	token: string;
	obsToken: string;
	expiration: Int64;
	refreshToken: string;
	channelAccessToken: string;
}

export interface GroupCall {
	online: boolean;
	chatMid: string;
	hostMids: string;
	memberMids: string[];
	started: Int64;
	mediaType: GroupCallMediaType;
	protocol: GroupCallProtocol;
}

export interface SyncResponse {
	operationResponse: OperationResponse;
	fullSyncResponse: FullSyncResponse;
	partialFullSyncResponse: PartialFullSyncResponse;
}

export interface OperationResponse {
	operations: Operation[];
	hasMoreOps: boolean;
	globalEvents: TGlobalEvents;
	individualEvents: TIndividualEvents;
}

export interface FullSyncResponse {
	reasons: SyncTriggerReason[];
	nextRevision: Int64;
}

export interface PartialFullSyncResponse {
	targetCategories: { [k: number /*SyncCategories*/]: Int64 };
}

export interface TGlobalEvents {
	events: { [k: number /*GlobalEventType*/]: GlobalEvent };
	lastRevision: Int64;
}

export interface TIndividualEvents {
	events: NotificationStatus[];
	lastRevision: Int64;
}

export interface GlobalEvent {
	type: GlobalEventType;
	minDelayInMinutes: number;
	maxDelayInMinutes: number;
	createTimeMillis: Int64;
	maxDelayHardLimit: boolean;
}

export interface DetermineMediaMessageFlowResponse {
	flowMap: { [k: number /*ContentType*/]: MediaMessageFlow };
	cacheTtlMillis: Int64;
}

export interface ChatRoomAnnouncementContentMetadata {
	replace: string;
	sticonOwnership: string;
	postNotificationMetadata: string;
}

export interface ChatRoomAnnouncementContents {
	displayFields: number;
	text: string;
	link: string;
	thumbnail: string;
	contentMetadata: ChatRoomAnnouncementContentMetadata;
}

export interface ChatRoomAnnouncement {
	announcementSeq: Int64;
	type: number;
	contents: ChatRoomAnnouncementContents;
	creatorMid: string;
	createdTime: Int64;
	deletePermission: number;
}

export interface DisasterInfo {
	disasterId: string;
	title: string;
	region: string;
	disasterDescription: string;
	seeMoreUrl: string;
	status: number;
}

export interface GetDisasterCasesRequest {}

export interface GetDisasterCasesResponse {
	disasters: DisasterInfo[];
	messageTemplate: string[];
	ttlInMillis: Int64;
}

export interface SquareMessage {
	message: Message;
	fromType: MIDType;
	squareMessageRevision: Int64;
	state: SquareMessageState;
}

export interface SquarePreference {
	favoriteTimestamp: Int64;
	notiForNewJoinRequest: boolean;
}

export interface SquareMember {
	squareMemberMid: string;
	squareMid: string;
	displayName: string;
	profileImageObsHash: string;
	ableToReceiveMessage: boolean;
	membershipState: SquareMembershipState;
	role: SquareMemberRole;
	revision: Int64;
	preference: SquarePreference;
	joinMessage: string;
}

export interface SquareMessageReaction {
	type: MessageReactionType;
	reactor: SquareMember;
	createdAt: Int64;
	updatedAt: Int64;
}

export interface SquareMessageReactionStatus {
	totalCount: number;
	countByReactionType: { [k: number /*MessageReactionType*/]: number };
	myReaction: SquareMessageReaction;
}

export interface SquareEventReceiveMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;
	senderRevision: Int64;
	squareMid: string;
}

export interface SquareEventSendMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;
	messageReactionStatus: SquareMessageReactionStatus;
}

export interface SquareEventMutateMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	reqSeq: number;
	senderDisplayName: string;
}

export interface SquareEventNotifiedJoinSquareChat {
	squareChatMid: string;
	joinedMember: SquareMember;
}

export interface SquareMemberRelation {
	state: SquareMemberRelationState;
	revision: Int64;
}

export interface SquareEventNotifiedInviteIntoSquareChat {
	squareChatMid: string;
	invitees: SquareMember[];
	invitor: SquareMember;
	invitorRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedLeaveSquareChat {
	squareChatMid: string;
	squareMemberMid: string;
	sayGoodbye: boolean;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedDestroyMessage {
	squareChatMid: string;
	messageId: string;
}

export interface SquareEventNotifiedMarkAsRead {
	squareChatMid: string;
	sMemberMid: string;
	messageId: string;
}

export interface SquareEventNotifiedUpdateSquareMemberProfile {
	squareChatMid: string;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedKickoutFromSquare {
	squareChatMid: string;
	kickees: SquareMember[];
	kicker: SquareMember;
}

export interface ApprovalValue {
	message: string;
}

export interface CodeValue {
	code: string;
}

export interface SquareJoinMethodValue {
	approvalValue: ApprovalValue;
	codeValue: CodeValue;
}

export interface SquareJoinMethod {
	type: SquareJoinMethodType;
	value: SquareJoinMethodValue;
}

export interface Square {
	mid: string;
	name: string;
	welcomeMessage: string;
	profileImageObsHash: string;
	desc: string;
	searchable: boolean;
	type: SquareType;
	categoryId: number;
	invitationURL: string;
	revision: Int64;
	ableToUseInvitationTicket: boolean;
	state: SquareState;
	emblems: SquareEmblem[];
	joinMethod: SquareJoinMethod;
	adultOnly: BooleanState;
	svcTags: string[];
	createdAt: Int64;
}

export interface SquareEventNotifiedShutdownSquare {
	squareChatMid: string;
	square: Square;
}

export interface MessageVisibility {
	showJoinMessage: boolean;
	showLeaveMessage: boolean;
	showKickoutMessage: boolean;
}

export interface SquareChat {
	squareChatMid: string;
	squareMid: string;
	type: SquareChatType;
	name: string;
	chatImageObsHash: string;
	squareChatRevision: Int64;
	maxMemberCount: number;
	state: SquareChatState;
	invitationUrl: string;
	messageVisibility: MessageVisibility;
	ableToSearchMessage: BooleanState;
}

export interface SquareEventNotifiedDeleteSquareChat {
	squareChat: SquareChat;
}

export interface SquareEventNotifiedUpdateSquareChatProfileName {
	squareChatMid: string;
	editor: SquareMember;
	updatedChatName: string;
}

export interface SquareEventNotifiedUpdateSquareChatProfileImage {
	squareChatMid: string;
	editor: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChatMaxMemberCount {
	squareChatMid: string;
	maxMemberCount: number;
	editor: SquareMember;
}

export interface SquareEventNotifiedAddBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;
}

export interface SquareEventNotifiedRemoveBot {
	squareChatMid: string;
	squareMember: SquareMember;
	botMid: string;
	botDisplayName: string;
}

export interface SquareEventNotifiedUpdateReadonlyChat {
	squareChatMid: string;
	readonly: boolean;
}

export interface MessageStatusContents {
	messageReactionStatus: SquareMessageReactionStatus;
}

export interface SquareMessageStatus {
	squareChatMid: string;
	globalMessageId: string;
	type: MessageStatusType;
	contents: MessageStatusContents;
	publishedAt: Int64;
}

export interface SquareEventNotifiedUpdateMessageStatus {
	squareChatMid: string;
	messageId: string;
	messageStatus: SquareMessageStatus;
}

export interface UrlButton {
	text: string;
	url: string;
}

export interface TextButton {
	text: string;
}

export interface OkButton {
	text: string;
}

export interface ButtonContent {
	urlButton: UrlButton;
	textButton: TextButton;
	okButton: OkButton;
}

export interface SquareEventChatPopup {
	squareChatMid: string;
	popupId: Int64;
	flexJson: string;
	button: ButtonContent;
}

export interface SquareEventNotifiedSystemMessage {
	squareChatMid: string;
	text: string;
}

export interface SquareEventNotifiedUpdateSquare {
	squareChatMid: string;
	square: Square;
}

export interface SquareStatus {
	memberCount: number;
	joinRequestCount: number;
	lastJoinRequestAt: Int64;
	openChatCount: number;
}

export interface SquareEventNotifiedUpdateSquareStatus {
	squareChatMid: string;
	squareStatus: SquareStatus;
}

export interface SquareEventNotifiedUpdateSquareMember {
	squareChatMid: string;
	squareMemberMid: string;
	squareMember: SquareMember;
}

export interface SquareEventNotifiedUpdateSquareChat {
	squareMid: string;
	squareChatMid: string;
	squareChat: SquareChat;
}

export interface SquareChatStatusWithoutMessage {
	memberCount: number;
	unreadMessageCount: number;
	markedAsReadMessageId: string;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;
}

export interface SquareEventNotifiedUpdateSquareChatStatus {
	squareChatMid: string;
	statusWithoutMessage: SquareChatStatusWithoutMessage;
}

export interface SquareChatMember {
	squareMemberMid: string;
	squareChatMid: string;
	revision: Int64;
	membershipState: SquareChatMembershipState;
	notificationForMessage: boolean;
	notificationForNewMember: boolean;
}

export interface SquareEventNotifiedUpdateSquareChatMember {
	squareChatMid: string;
	squareChatMember: SquareChatMember;
}

export interface SquareAuthority {
	squareMid: string;
	updateSquareProfile: SquareMemberRole;
	inviteNewMember: SquareMemberRole;
	approveJoinRequest: SquareMemberRole;
	createPost: SquareMemberRole;
	createOpenSquareChat: SquareMemberRole;
	deleteSquareChatOrPost: SquareMemberRole;
	removeSquareMember: SquareMemberRole;
	grantRole: SquareMemberRole;
	enableInvitationTicket: SquareMemberRole;
	revision: Int64;
	createSquareChatAnnouncement: SquareMemberRole;
	updateMaxChatMemberCount: SquareMemberRole;
	useReadonlyDefaultChat: SquareMemberRole;
}

export interface SquareEventNotifiedUpdateSquareAuthority {
	squareMid: string;
	squareAuthority: SquareAuthority;
}

export interface SquareFeature {
	controlState: SquareFeatureControlState;
	booleanValue: BooleanState;
}

export interface SquareFeatureSet {
	squareMid: string;
	revision: Int64;
	creatingSecretSquareChat: SquareFeature;
	invitingIntoOpenSquareChat: SquareFeature;
	creatingSquareChat: SquareFeature;
	readonlyDefaultChat: SquareFeature;
	showingAdvertisement: SquareFeature;
	delegateJoinToPlug: SquareFeature;
	delegateKickOutToPlug: SquareFeature;
	disableUpdateJoinMethod: SquareFeature;
	disableTransferAdmin: SquareFeature;
	creatingLiveTalk: SquareFeature;
	disableUpdateSearchable: SquareFeature;
}

export interface NoteStatus {
	noteCount: number;
	latestCreatedAt: Int64;
}

export interface SquareEventNotifiedCreateSquareMember {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface SquareChatStatus {
	lastMessage: SquareMessage;
	senderDisplayName: string;
	otherStatus: SquareChatStatusWithoutMessage;
}

export interface SquareChatFeature {
	controlState: SquareChatFeatureControlState;
	booleanValue: BooleanState;
}

export interface SquareChatFeatureSet {
	squareChatMid: string;
	revision: Int64;
	disableUpdateMaxChatMemberCount: SquareChatFeature;
	disableMarkAsReadEvent: SquareChatFeature;
}

export interface SquareEventNotifiedCreateSquareChatMember {
	chat: SquareChat;
	chatStatus: SquareChatStatus;
	chatMember: SquareChatMember;
	joinedAt: Int64;
	peerSquareMember: SquareMember;
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareMemberRelation {
	squareMid: string;
	myMemberMid: string;
	targetSquareMemberMid: string;
	squareMemberRelation: SquareMemberRelation;
}

export interface SquareEventNotifiedUpdateSquareFeatureSet {
	squareFeatureSet: SquareFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareChatFeatureSet {
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SquareEventNotifiedUpdateSquareNoteStatus {
	squareMid: string;
	noteStatus: NoteStatus;
}

export interface SquareEventNotifiedUpdateSquareChatAnnouncement {
	squareChatMid: string;
	announcementSeq: Int64;
}

export interface SquareEventNotificationJoinRequest {
	squareMid: string;
	squareName: string;
	requestMemberName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationMemberUpdate {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationSquareDelete {
	squareMid: string;
	squareName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationSquareChatDelete {
	squareChatMid: string;
	squareChatName: string;
	profileImageObsHash: string;
}

export interface SquareEventNotificationMessage {
	squareChatMid: string;
	squareMessage: SquareMessage;
	senderDisplayName: string;
	unreadCount: number;
	requiredToFetchChatEvents: boolean;
	mentionedMessageId: string;
	notifiedMessageType: NotifiedMessageType;
	reqSeq: number;
}

export interface SquareEventNotificationPostAnnouncement {
	squareMid: string;
	squareName: string;
	squareProfileImageObsHash: string;
	actionUri: string;
}

export interface SquareEventNotificationPost {
	squareMid: string;
	notificationPostType: NotificationPostType;
	thumbnailObsHash: string;
	text: string;
	actionUri: string;
}

export interface SquareEventNotificationNewChatMember {
	squareChatMid: string;
	squareChatName: string;
}

export interface SquareEventNotificationMessageReaction {
	squareChatMid: string;
	messageId: string;
	squareChatName: string;
	reactorName: string;
	thumbnailObsHash: string;
	messageText: string;
	type: MessageReactionType;
}

export interface SquareEventPayload {
	receiveMessage?: SquareEventReceiveMessage;
	sendMessage?: SquareEventSendMessage;
	notifiedJoinSquareChat?: SquareEventNotifiedJoinSquareChat;
	notifiedInviteIntoSquareChat?: SquareEventNotifiedInviteIntoSquareChat;
	notifiedLeaveSquareChat?: SquareEventNotifiedLeaveSquareChat;
	notifiedDestroyMessage?: SquareEventNotifiedDestroyMessage;
	notifiedMarkAsRead?: SquareEventNotifiedMarkAsRead;
	notifiedUpdateSquareMemberProfile?: SquareEventNotifiedUpdateSquareMemberProfile;
	notifiedUpdateSquare?: SquareEventNotifiedUpdateSquare;
	notifiedUpdateSquareMember?: SquareEventNotifiedUpdateSquareMember;
	notifiedUpdateSquareChat?: SquareEventNotifiedUpdateSquareChat;
	notifiedUpdateSquareChatMember?: SquareEventNotifiedUpdateSquareChatMember;
	notifiedUpdateSquareAuthority?: SquareEventNotifiedUpdateSquareAuthority;
	notifiedUpdateSquareStatus?: SquareEventNotifiedUpdateSquareStatus;
	notifiedUpdateSquareChatStatus?: SquareEventNotifiedUpdateSquareChatStatus;
	notifiedCreateSquareMember?: SquareEventNotifiedCreateSquareMember;
	notifiedCreateSquareChatMember?: SquareEventNotifiedCreateSquareChatMember;
	notifiedUpdateSquareMemberRelation?: SquareEventNotifiedUpdateSquareMemberRelation;
	notifiedShutdownSquare?: SquareEventNotifiedShutdownSquare;
	notifiedKickoutFromSquare?: SquareEventNotifiedKickoutFromSquare;
	notifiedDeleteSquareChat?: SquareEventNotifiedDeleteSquareChat;
	notificationJoinRequest?: SquareEventNotificationJoinRequest;
	notificationJoined?: SquareEventNotificationMemberUpdate;
	notificationPromoteCoadmin?: SquareEventNotificationMemberUpdate;
	notificationPromoteAdmin?: SquareEventNotificationMemberUpdate;
	notificationDemoteMember?: SquareEventNotificationMemberUpdate;
	notificationKickedOut?: SquareEventNotificationMemberUpdate;
	notificationSquareDelete?: SquareEventNotificationSquareDelete;
	notificationSquareChatDelete?: SquareEventNotificationSquareChatDelete;
	notificationMessage?: SquareEventNotificationMessage;
	notifiedUpdateSquareChatProfileName?: SquareEventNotifiedUpdateSquareChatProfileName;
	notifiedUpdateSquareChatProfileImage?: SquareEventNotifiedUpdateSquareChatProfileImage;
	notifiedUpdateSquareFeatureSet?: SquareEventNotifiedUpdateSquareFeatureSet;
	notifiedAddBot?: SquareEventNotifiedAddBot;
	notifiedRemoveBot?: SquareEventNotifiedRemoveBot;
	notifiedUpdateSquareNoteStatus?: SquareEventNotifiedUpdateSquareNoteStatus;
	notifiedUpdateSquareChatAnnouncement?: SquareEventNotifiedUpdateSquareChatAnnouncement;
	notifiedUpdateSquareChatMaxMemberCount?: SquareEventNotifiedUpdateSquareChatMaxMemberCount;
	notificationPostAnnouncement?: SquareEventNotificationPostAnnouncement;
	notificationPost?: SquareEventNotificationPost;
	mutateMessage?: SquareEventMutateMessage;
	notificationNewChatMember?: SquareEventNotificationNewChatMember;
	notifiedUpdateReadonlyChat?: SquareEventNotifiedUpdateReadonlyChat;
	notifiedUpdateMessageStatus?: SquareEventNotifiedUpdateMessageStatus;
	notificationMessageReaction?: SquareEventNotificationMessageReaction;
	chatPopup?: SquareEventChatPopup;
	notifiedSystemMessage?: SquareEventNotifiedSystemMessage;
	notifiedUpdateSquareChatFeatureSet?: SquareEventNotifiedUpdateSquareChatFeatureSet;
}

export interface SquareEvent {
	createdTime: Int64;
	type: SquareEventType;
	payload: SquareEventPayload;
	syncToken: string;
	eventStatus: SquareEventStatus;
}

export interface SendMessageResponse {
	createdSquareMessage: SquareMessage;
}

export interface UnsendMessageResponse {
	unsentMessage: SquareMessage;
}

export interface FetchMyEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface GetSquareEmidResponse {
	squareEmid: string;
}

export interface GetSquareMembersBySquareResponse {
	members: SquareMember[];
}

export interface ManualRepairResponse {
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface InviteIntoSquareChatResponse {
	inviteeMids: string[];
}

export interface InviteToSquareResponse {}

export interface GetJoinedSquaresResponse {
	squares: Square[];
	members: { [k: string]: SquareMember };
	authorities: { [k: string]: SquareAuthority };
	statuses: { [k: string]: SquareStatus };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };
}

export interface MarkAsReadResponse {}

export interface ReactToMessageResponse {
	reaction: SquareMessageReaction;
	status: SquareMessageReactionStatus;
}

export interface FindSquareByInvitationTicketResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	chat: SquareChat;
	chatStatus: SquareChatStatus;
}

export interface SubscriptionState {
	subscriptionId: Int64;
	ttlMillis: Int64;
}

export interface FetchSquareChatEventsResponse {
	subscription: SubscriptionState;
	events: SquareEvent[];
	syncToken: string;
	continuationToken: string;
}

export interface GetSquareResponse {
	square: Square;
	myMembership: SquareMember;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareFeatureSet?: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface GetJoinableSquareChatsResponse {
	squareChats: SquareChat[];
	continuationToken: string;
	totalSquareChatCount: number;
	squareChatStatuses: { [k: string]: SquareChatStatus };
}

export interface CreateSquareResponse {
	square: Square;
	creator: SquareMember;
	authority: SquareAuthority;
	status: SquareStatus;
	featureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface TextMessageAnnouncementContents {
	messageId: string;
	text: string;
	senderSquareMemberMid: string;
	createdAt: Int64;
	senderMid: string;
}

export interface SquareChatAnnouncementContents {
	textMessageAnnouncementContents: TextMessageAnnouncementContents;
}

export interface SquareChatAnnouncement {
	announcementSeq: Int64;
	type: SquareChatAnnouncementType;
	contents: SquareChatAnnouncementContents;
	createdAt: Int64;
	creator: string;
}

export interface GetSquareChatAnnouncementsResponse {
	announcements: SquareChatAnnouncement[];
}

export interface GetSquareFeatureSetResponse {
	squareFeatureSet: SquareFeatureSet;
}

export interface GetSquareChatFeatureSetResponse {
	squareChatFeatureSet: SquareChatFeatureSet;
}

export interface SyncSquareMembersResponse {
	updatedSquareMembers: SquareMember[];
}

export interface SquareChatThread {
	squareChatThreadMid: string;
	squareChatMid: string;
	squareMid: string;
	messageId: string;
	state: SquareChatThreadState;
}

export interface GetJoinedSquareChatThreadsResponse {
	squareChatThreads: SquareChatThread[];
	continuationToken: string;
}

export interface CreateSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
}

export interface SquareChatThreadMember {
	squareMemberMid: string;
	squareChatThreadMid: string;
	revision: Int64;
	membershipState: SquareChatThreadeMembershipState;
}

export interface GetSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
	mySquareChatThreadMember: SquareChatThreadMember;
}

export interface JoinSquareChatThreadResponse {
	squareChatThread: SquareChatThread;
}

export interface AcceptSpeakersResponse {}

export interface AcceptToChangeRoleResponse {}

export interface AcceptToListenResponse {}

export interface AcceptToSpeakResponse {}

export interface CancelToSpeakResponse {}

export interface EndLiveTalkResponse {}

export interface LiveTalkEventNotifiedUpdateLiveTalkTitle {
	title: string;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting {
	speakerSetting: LiveTalkSpeakerSetting;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAnnouncement {
	announcement: string;
}

export interface LiveTalkEventNotifiedUpdateSquareMemberRole {
	squareMemberMid: string;
	role: SquareMemberRole;
}

export interface LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak {
	allowRequestToSpeak: boolean;
}

export interface LiveTalkEventPayload {
	notifiedUpdateLiveTalkTitle: LiveTalkEventNotifiedUpdateLiveTalkTitle;
	notifiedUpdateLiveTalkSpeakerSetting: LiveTalkEventNotifiedUpdateLiveTalkSpeakerSetting;
	notifiedUpdateLiveTalkAnnouncement: LiveTalkEventNotifiedUpdateLiveTalkAnnouncement;
	notifiedUpdateSquareMemberRole: LiveTalkEventNotifiedUpdateSquareMemberRole;
	notifiedUpdateLiveTalkAllowRequestToSpeak: LiveTalkEventNotifiedUpdateLiveTalkAllowRequestToSpeak;
}

export interface LiveTalkEvent {
	type: LiveTalkEventType;
	payload: LiveTalkEventPayload;
	syncToken: string;
}

export interface FetchLiveTalkEventsResponse {
	events: LiveTalkEvent[];
	syncToken: string;
	hasMore: boolean;
}

export interface LiveTalk {
	squareChatMid: string;
	sessionId: string;
	title: string;
	type: LiveTalkType;
	speakerSetting: LiveTalkSpeakerSetting;
	allowRequestToSpeak: boolean;
	announcement: string;
	participantCount: number;
	revision: Int64;
	startedAt: Int64;
}

export interface FindLiveTalkByInvitationTicketResponse {
	chatInvitationTicket: string;
	liveTalk: LiveTalk;
	chat: SquareChat;
	squareMember: SquareMember;
	chatMembershipState: SquareChatMembershipState;
}

export interface ForceEndLiveTalkResponse {}

export interface LiveTalkSpeaker {
	displayName: string;
	profileImageObsHash: string;
	role: SquareMemberRole;
}

export interface GetLiveTalkInfoForNonMemberResponse {
	chatName: string;
	liveTalk: LiveTalk;
	speakers: LiveTalkSpeaker[];
	chatInvitationUrl: string;
}

export interface GetLiveTalkInvitationUrlResponse {
	invitationUrl: string;
}

export interface GetLiveTalkSpeakersForNonMemberResponse {
	speakers: LiveTalkSpeaker[];
}

export interface GetSquareInfoByChatMidResponse {
	defaultChatMid: string;
	squareName: string;
	squareDesc: string;
}

export interface InviteToChangeRoleResponse {}

export interface InviteToListenResponse {}

export interface InviteToLiveTalkResponse {}

export interface InviteToSpeakResponse {
	inviteRequestId: string;
}

export interface JoinLiveTalkResponse {
	hostMemberMid: string;
	memberSessionId: string;
	token: string;
	proto: string;
	voipAddress: string;
	voipAddress6: string;
	voipUdpPort: number;
	voipTcpPort: number;
	fromZone: string;
	commParam: string;
	orionAddress: string;
	polarisAddress: string;
	polarisZone: string;
	polarisUdpPort: number;
}

export interface KickOutLiveTalkParticipantsResponse {}

export interface RejectSpeakersResponse {}

export interface RejectToSpeakResponse {}

export interface ReportLiveTalkResponse {}

export interface ReportLiveTalkSpeakerResponse {}

export interface RequestToListenResponse {}

export interface RequestToSpeakResponse {}

export interface StartLiveTalkResponse {
	liveTalk: LiveTalk;
}

export interface UpdateLiveTalkAttrsResponse {}

export interface AcquireLiveTalkResponse {
	liveTalk: LiveTalk;
}

export interface CreateQrCodeForSecureResponse {
	callbackUrl: string;
	longPollingMaxCount: number;
	longPollingIntervalSec: number;
	nonce: string;
}

export interface RefreshApiRetryPolicy {
	initialDelayInMillis: Int64;
	maxDelayInMillis: Int64;
	multiplier: number;
	jitterRate: number;
}

export interface TokenV3IssueResult {
	accessToken: string;
	refreshToken: string;
	durationUntilRefreshInSec: Int64;
	refreshApiRetryPolicy: RefreshApiRetryPolicy;
	loginSessionId: string;
	tokenIssueTimeEpochSec: Int64;
}

export interface QrCodeLoginV2Response {
	certificate: string;
	accessTokenV2: string;
	tokenV3IssueResult: TokenV3IssueResult;
	mid: string;
	lastBindTimestamp: Int64;
	metaData: { [k: string]: string };
}

export interface RichString {
	content: string;
	meta: { [k: string]: string };
}

export interface TargetProfileDetail {
	snapshotTimeMillis: Int64;
	profileName: string;
	picturePath: string;
	statusMessage: RichString;
	musicProfile: string;
	videoProfile: string;
	avatarProfile: AvatarProfile;
	pictureSource: PictureSource;
	pictureStatus: string;
}

export interface UserFriendDetail {
	createdTime: Int64;
	overriddenName: string;
	favoriteTime: Int64;
	hidden: boolean;
	ringtone: string;
	ringbackTone: string;
}

export interface BotFriendDetail {
	createdTime: Int64;
	favoriteTime: Int64;
	hidden: boolean;
}

export interface NotFriend {}

export interface FriendDetail {
	user: UserFriendDetail;
	bot: BotFriendDetail;
	notFriend: NotFriend;
}

export interface UserBlockDetail {
	deletedFromBlockList: boolean;
}

export interface BotBlockDetail {
	deletedFromBlockList: boolean;
}

export interface NotBlocked {}

export interface BlockDetail {
	user: UserBlockDetail;
	bot: BotBlockDetail;
	notBlocked: NotBlocked;
}

export interface RecommendationReasonSharedChat {
	chatMid: string;
}

export interface RecommendationReasonReverseFriendByUserId {}

export interface RecommendationReasonReverseFriendByQRCode {}

export interface RecommendationReasonReverseFriendByPhone {}

export interface RecommendationReason {
	sharedChat: RecommendationReasonSharedChat;
	reverseFriendByUserId: RecommendationReasonReverseFriendByUserId;
	reverseFriendByQrCode: RecommendationReasonReverseFriendByQRCode;
	reverseFriendByPhone: RecommendationReasonReverseFriendByPhone;
}

export interface Recommended {
	createdTime: Int64;
	reasons: RecommendationReason[];
	hidden: boolean;
}

export interface NotRecommended {}

export interface RecommendationDetail {
	recommendationDetail: Recommended;
	notRecommended: NotRecommended;
}

export interface NotificationSetting {
	mute: boolean;
}

export interface NotificationSettingEntry {
	notificationSetting: NotificationSetting;
}

export interface GetContactV3Response {
	targetUserMid: string;
	userType: UserType;
	targetProfileDetail: TargetProfileDetail;
	friendDetail: FriendDetail;
	blockDetail: BlockDetail;
	recommendationDetail: RecommendationDetail;
	notificationSettingEntry: NotificationSettingEntry;
}

export interface GetContactsV3Response {
	responses: GetContactV3Response[];
}

export interface AddFriendByMidResponse {}

export interface GetContactCalendarEventResponse {
	targetUserMid: string;
	userType: UserType;
	contactCalendarEvents: ContactCalendarEvents;
	snapshotTimeMillis: Int64;
}

export interface GetContactCalendarEventsResponse {
	responses: GetContactCalendarEventResponse[];
}

export interface Locale {
	language: string;
	country: string;
}

export interface GetProductRequest {
	productType: ProductType;
	productId: string;
	carrierCode: string;
	saveBrowsingHistory: boolean;
}

export interface GetProductResponse {
	productDetail: ProductDetail;
}

export interface ProductDetail {
	id: string;
	billingItemId: string;
	type: string;
	subtype: SubType;
	billingCpId: string;
	name: string;
	author: string;
	details: string;
	copyright: string;
	notice: string;
	promotionInfo: PromotionInfo;
	latestVersion: Int64;
	latestVersionString: string;
	version: Int64;
	versionString: string;
	applicationVersionRange: ApplicationVersionRange;
	owned: boolean;
	grantedByDefault: boolean;
	validFor: number;
	validUntil: Int64;
	onSale: boolean;
	salesFlag: string[];
	availableForPresent: boolean;
	availableForMyself: boolean;
	priceTier: number;
	price: Price;
	priceInLineCoin: string;
	localizedPrice: Price;
	images: { [k: string]: string[] };
	attributes: { [k: string]: string };
	authorId: string;
	stickerResourceType: StickerResourceType;
	productProperty: ProductProperty;
	productSalesState: ProductSalesState;
	installedTime: Int64;
	wishProperty: ProductWishProperty;
	subscriptionProperty: ProductSubscriptionProperty;
	productPromotionProperty: ProductPromotionProperty;
	availableInCountry: boolean;
	editorsPickBanners: EditorsPickBannerForClient[];
	ableToBeGivenAsPresent: boolean;
	madeWithStickerMaker: boolean;
	customDownloadButtonLabel: string;
}

export interface ApplicationVersionRange {
	lowerBound: string;
	lowerBoundInclusive: boolean;
	upperBound: string;
	upperBoundInclusive: boolean;
}

export interface EditorsPickBannerForClient {
	id: Int64;
	endPageBannerImageUrl: string;
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	showNewBadge: boolean;
	name: string;
	description: string;
}

export interface Price {
	currency: string;
	amount: string;
	priceString: string;
}

export interface ProductProperty {
	stickerProperty: StickerProperty;
	themeProperty: ThemeProperty;
	sticonProperty: SticonProperty;
}

export interface StickerProperty {
	hasAnimation: boolean;
	hasSound: boolean;
	hasPopup: boolean;
	stickerResourceType: StickerResourceType;
	stickerOptions: string;
	compactStickerOptions: number;
	stickerHash: string;
	stickerIds: string[];
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	stickerDefaultTexts: { [k: string]: string };
	stickerSize: StickerSize;
	popupLayer: PopupLayer;
	cpdProduct: boolean;
	availableForCombinationSticker: boolean;
}

export interface ThemeProperty {
	thumbnail: string;
	themeResourceType: ThemeResourceType;
}

export interface SticonProperty {
	sticonIds: string[];
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;
	endPageMainImages: string[][];
}

export interface ImageTextProperty {
	status: ImageTextStatus;
	plaintext: string;
	nameTextMaxCharacterCount: number;
	encryptedText: string;
}

export interface LpPromotionProperty {
	landingPageUrl: string;
	label: string;
	buttonLabel: string;
}

export interface ProductWishProperty {
	totalCount: Int64;
}

export interface ProductSubscriptionProperty {
	availableForSubscribe: boolean;
	subscriptionAvailability: number;
}

export interface ProductPromotionProperty {
	lpPromotionProperty: LpPromotionProperty;
}

export interface PromotionDetail {
	promotionBuddyInfo: PromotionBuddyInfo;
	promotionInstallInfo: PromotionInstallInfo;
	promotionMissionInfo: PromotionMissionInfo;
}

export interface PromotionInfo {
	promotionType: PromotionType;
	promotionDetail: PromotionDetail;
	buddyInfo: PromotionBuddyInfo;
}

export interface PromotionBuddyInfo {
	buddyMid: string;
	promotionBuddyDetail: PromotionBuddyDetail;
	showBanner: boolean;
}

export interface PromotionInstallInfo {
	downloadUrl: string;
	customUrlSchema: string;
}

export interface PromotionMissionInfo {
	promotionMissionType: PromotionMissionType;
	missionCompleted: boolean;
	downloadUrl: string;
	customUrlSchema: string;
	oaMid: string;
}

export interface PromotionBuddyDetail {
	searchId: string;
	contactStatus: ContactStatus;
	name: string;
	pictureUrl: string;
	statusMessage: string;
	brandType: BrandType;
}

export interface PurchaseOrder {
	shopId: string;
	productId: string;
	recipientMid: string;
	price: Price;
	enableLinePointAutoExchange: boolean;
	locale: Locale;
	presentAttributes: { [k: string]: string };
}

export interface PurchaseOrderResponse {
	orderId: string;
	attributes: { [k: string]: string };
	billingConfirmUrl: string;
}

export interface PurchaseRecordList {
	purchaseRecords: PurchaseRecord[];
	offset: number;
	totalSize: number;
}

export interface PurchaseRecord {
	productDetail: ProductDetail;
	purchasedTime: Int64;
	giver: string;
	recipient: string;
	purchasedPrice: Price;
}

export interface DetailedProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;
}

export interface CreateCombinationStickerResponse {
	id: string;
}

export interface ProductSearchSummary {
	id: string;
	type: ProductType;
	name: string;
	author: string;
	promotionInfo: PromotionInfo;
	version: Int64;
	newFlag: boolean;
	priceTier: number;
	priceInLineCoin: string;
	property: ProductProperty;
	subType: SubType;
	onSale: boolean;
	availableForPresent: boolean;
	availableForPurchase: boolean;
	validDays: number;
	authorId: string;
	bargainFlag: boolean;
	copyright: string;
	availability: ProductAvailability;
	interactionEventParameter: string;
	editorsPickIds: Int64[];
}

export interface DemographicType {
	demographicGenderType: DemographicGenderType;
	demographicAgeType: DemographicAgeType;
	defaultOrder: boolean;
}

export interface ShowcaseV3 {
	productList: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
	showcaseType: ShowcaseType;
	productType: ProductType;
	subType: SubType;
	demographicType: DemographicType;
}

export interface StickerIdRange {
	start: Int64;
	size: number;
}

export interface StickerSummary {
	stickerIdRanges: StickerIdRange[];
	suggestVersion: Int64;
	stickerHash: string;
	defaultDisplayOnKeyboard: boolean;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	availableForPhotoEdit: boolean;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	availableForCombinationSticker: boolean;
}

export interface ThemeSummary {
	imagePath: string;
	version: Int64;
	versionString: string;
}

export interface SticonSummary {
	suggestVersion: Int64;
	availableForPhotoEdit: boolean;
	sticonResourceType: SticonResourceType;
}

export interface ProductTypeSummary {
	stickerSummary: StickerSummary;
	themeSummary: ThemeSummary;
	sticonSummary: SticonSummary;
}

export interface ProductSummary {
	id: string;
	name: string;
	latestVersion: Int64;
	applicationVersionRange: ApplicationVersionRange;
	grantedByDefault: boolean;
	attributes: { [k: string]: string };
	productTypeSummary: ProductTypeSummary;
	validUntil: Int64;
	validFor: number;
	installedTime: Int64;
	availability: ProductAvailability;
	authorId: string;
	canAutoDownload: boolean;
	promotionInfo: PromotionInfo;
}

export interface ProductSummaryList {
	productList: ProductSummary[];
	offset: number;
	totalSize: number;
}

export interface ProductValidationScheme {
	key: string;
	offset: Int64;
	size: Int64;
}

export interface ProductValidationResult {
	validated: boolean;
}

export interface ShopUpdates {
	shopId: string;
	latestUpdateTime: Int64;
}

export interface SearchProductsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface EditorsPickBanner {
	id: Int64;
	imageUrl: string;
	homeBannerImageUrl: string;
	showcaseBannerImageUrl: string;
	enableEditorsPickShowcaseTypes: EditorsPickShowcaseType[];
	defaulteditorsPickShowcaseType: EditorsPickShowcaseType;
	homeBannerV2ImageUrl: string;
	name: string;
	containsProducts: boolean;
	displayPeriodBegin: Int64;
	description: string;
	showNewBadge: boolean;
}

export interface AuthorForShowcase {
	authorId: Int64;
	productList: ProductSearchSummary[];
	productTotalSize: Int64;
}

export interface ImageSearchSummary {
	imageId: string;
	product: ProductSearchSummary;
}

export interface KeywordImageList {
	tagId: string;
	keyword: string;
	imageList: ImageSearchSummary[];
}

export interface URLItem {
	title: string;
	imageUrl: string;
	url: string;
}

export interface EditorsPickContent {
	urlItem: URLItem;
	productDetail: ProductDetail;
}

export interface EditorsPick {
	contentType: EditorsPickContentType;
	editorsPickContent: EditorsPickContent;
}

export interface EditorsPickTab {
	editorsPickId: Int64;
	name: string;
	showcaseType: ShowcaseType;
}

export interface EditorsPickShowcase {
	id: Int64;
	name: string;
	banner: EditorsPickBanner;
	editorsPicks: EditorsPick[];
	continuationToken: string;
	totalSize: number;
	description: string;
	type: EditorsPickShowcaseType;
	tabs: EditorsPickTab[];
}

export interface Category {
	id: Int64;
	name: string;
	newFlag: boolean;
	productCount: number;
	thumbnailUrl: string;
}

export interface Tag {
	id: Int64;
	name: string;
	tagType: TagType;
	productCount: number;
	thumbnailUrl: string;
}

export interface ProductList {
	productList: ProductDetail[];
	offset: number;
	totalSize: number;
	title: string;
}

export interface CategoryProductList {
	category: Category;
	productList: ProductList;
}

export interface AggregatedHomeV2Response {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	authorList: AuthorForShowcase[];
	keywordStickerList: KeywordImageList[];
	detailedEditorsPick: EditorsPickShowcase;
	detailedCategoryList: CategoryProductList[];
	categoryList: Category[];
	tagList: Tag[];
}

export interface AggregatedCategory {
	id: Int64;
	categoryType: CategoryType;
	name: string;
	productCount: number;
	thumbnailUrl: string;
}

export interface ListContentData {
	showcase: ShowcaseV3;
	editorsPickBanners: EditorsPickBanner[];
	categories: AggregatedCategory[];
}

export interface ListContent {
	contentData: ListContentData;
	localizedTitle: string;
	tsKey: string;
	moreLinkFragment: string;
}

export interface AggregatedHomeNativeResponse {
	listContents: ListContent[];
}

export interface DynamicHomeNativeResponse {
	listContents: ListContent[];
}

export interface TagsProductList {
	tasteTag: Tag;
	characterTag: Tag;
	products: ProductSearchSummary[];
}

export interface AggregatedPremiumHomeResponse {
	showcases: ShowcaseV3[];
	editorsPickBanners: EditorsPickBanner[];
	popularCreator: AuthorForShowcase;
	featuredCategory: TagsProductList;
	categoryList: TagsProductList[];
	browsingHistory: ShowcaseV3;
	subscriptionSlotHistory: ShowcaseV3;
}

export interface AggregatedShowcaseV4 {
	showcases: ShowcaseV3[];
}

export interface GetRecommendationResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface AuthorListResponse {
	authorList: AuthorForShowcase[];
	totalSize: Int64;
	continuationToken: string;
}

export interface ProductResourceType {
	stickerResourceType: StickerResourceType;
	themeResourceType: ThemeResourceType;
	sticonResourceType: SticonResourceType;
}

export interface LatestProductByAuthorItem {
	productId: string;
	displayName: string;
	version: Int64;
	newFlag: boolean;
	productResourceType: ProductResourceType;
	popupLayer: PopupLayer;
}

export interface LatestProductsByAuthorResponse {
	authorId: Int64;
	author: string;
	items: LatestProductByAuthorItem[];
}

export interface GetExperimentsResponse {
	variables: { [k: string]: string };
}

export interface ProductSummaryForAutoSuggest {
	id: string;
	version: Int64;
	name: string;
	stickerResourceType: StickerResourceType;
	suggestVersion: Int64;
	popupLayer: PopupLayer;
	type: ProductType;
	resourceType: ProductResourceType;
	stickerSize: StickerSize;
}

export interface AutoSuggestionShowcaseResponse {
	productList: ProductSummaryForAutoSuggest[];
	totalSize: Int64;
}

export interface SuggestResource {
	dataUrl: string;
	version: Int64;
	updatedTime: Int64;
}

export interface SuggestDictionarySetting {
	language: string;
	name: string;
	preload: boolean;
	suggestResource: SuggestResource;
	patch: any;
	suggestTagResource: SuggestResource;
	tagPatch: any;
	corpusResource: SuggestResource;
}

export interface GetSuggestDictionarySettingResponse {
	results: SuggestDictionarySetting[];
}

export interface GetRecommendOaResponse {
	buddyMids: string[];
}

export interface GetSuggestResourcesResponse {
	suggestResources: any;
}

export interface GetSuggestResourcesV2Response {
	suggestResources: { [k: string]: SuggestResource };
}

export interface GetTagClusterFileResponse {
	path: string;
	updatedTimeMillis: Int64;
}

export interface GetResourceFileReponse {
	tagClusterFileResponse: GetTagClusterFileResponse;
}

export interface BrowsingHistory {
	productSearchSummary: ProductSearchSummary;
	browsingTime: Int64;
}

export interface GetBrowsingHistoryResponse {
	browsingHistory: BrowsingHistory[];
	continuationToken: string;
	totalSize: number;
}

export interface DeleteAllBrowsingHistoryResponse {}

export interface SticonProductMapping {
	productId: string;
	oldProductId: string;
	newToOldSticonIdMapping: { [k: string]: string };
	oldPackageVersion: number;
	oldMetaVersion: number;
	stickerPackageId: Int64;
	stickerPackageVersion: number;
	stickerIds: { [k: string]: string };
}

export interface GetOldSticonMappingResponse {
	sticonProductMappings: SticonProductMapping[];
	updatedTimeMillis: Int64;
	updated: boolean;
}

export interface SimilarImageShowcase {
	chosenImage: ImageSearchSummary;
	similarImageList: ImageSearchSummary[];
	continuationToken: string;
}

export interface CustomizeImageTextResponse {
	nameTextProperty: ImageTextProperty;
}

export interface SubscriptionPlan {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	period: string;
	freeTrial: string;
	localizedName: string;
	price: Price;
	availability: SubscriptionPlanAvailability;
	cpId: string;
	nameKey: string;
	tier: SubscriptionPlanTier;
}

export interface GetSubscriptionPlansResponse {
	plans: SubscriptionPlan[];
}

export interface SubscriptionStatus {
	billingItemId: string;
	subscriptionService: SubscriptionServiceType;
	period: string;
	localizedName: string;
	freeTrial: boolean;
	expired: boolean;
	validUntil: Int64;
	maxSlotCount: number;
	target: SubscriptionPlanTarget;
	type: SubscriptionPlanType;
	storeCode: StoreCode;
	nameKey: string;
	tier: SubscriptionPlanTier;
	accountHold: boolean;
	maxSlotCountsByProductType: { [k: number /*ProductType*/]: number };
	agreementAccepted: boolean;
}

export interface GetSubscriptionStatusResponse {
	subscriptions: { [k: number]: SubscriptionStatus };
	hasValidStudentInformation: boolean;
	otherOwnedSubscriptions: { [k: number]: SubscriptionStatus[] };
}

export interface GetProductSummariesInSubscriptionSlotsResponse {
	products: ProductSummary[];
	continuationToken: string;
	totalSize: Int64;
	maxSlotCount: number;
}

export interface AddProductToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface AddThemeToSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface RemoveProductFromSubscriptionSlotResponse {
	result: SubscriptionSlotModificationResult;
}

export interface PurchaseSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface ChangeSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface RestoreSubscriptionResponse {
	result: SubscriptionBillingResult;
	orderId: string;
	confirmUrl: string;
}

export interface GetProductsByTagsV2Response {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface StudentInformation {
	schoolName: string;
	graduationDate: string;
}

export interface GetStudentInformationResponse {
	studentInformation: StudentInformation;
	isValid: boolean;
}

export interface SaveStudentInformationResponse {}

export interface PurchasedSubscription {
	orderId: string;
	subscriptionService: SubscriptionServiceType;
	billingItemId: string;
	type: SubscriptionPlanType;
	localizedName: string;
	purchasedTime: Int64;
	validUntil: Int64;
	price: Price;
	nameKey: string;
	tier: SubscriptionPlanTier;
}

export interface GetPurchasedSubscriptionsResponse {
	subscriptions: PurchasedSubscription[];
	continuationToken: string;
	totalSize: Int64;
}

export interface FindRestorablePlanResponse {
	result: SubscriptionBillingResult;
	billingItemId: string;
	storeOrderId: string;
	originalStoreOrderId: string;
	orderId: string;
	mid: string;
}

export interface SubscriptionMissionCampaign {
	productType: ProductType;
	productId: string;
}

export interface SubscriptionCampaignPayload {
	mission: SubscriptionMissionCampaign;
}

export interface SubscriptionCampaign {
	campaignId: string;
	fromInclusive: Int64;
	toExclusive: Int64;
	type: SubscriptionCampaignType;
	payload: SubscriptionCampaignPayload;
}

export interface GetSubscriptionCampaignsResponse {
	campaigns: SubscriptionCampaign[];
}

export interface GetSubscriptionRecommendationsResponse {
	products: ProductSearchSummary[];
}

export interface InteractionEventResponse {
	responseStatus: number;
}

export interface LibraExperiment {
	experimentId: string;
	groupId: string;
}

export interface GetExperimentsV2Response {
	experiments: { [k: string]: LibraExperiment };
}

export interface BirthdayGiftAssociationVerifyResponse {
	tokenStatus: BirthdayGiftAssociationVerifyTokenStatus;
	recipientUserMid: string;
}

export interface SubscriptionSlotHistory {
	product: ProductSearchSummary;
	addedTime: Int64;
	removedTime: Int64;
}

export interface GetSubscriptionSlotHistoryResponse {
	history: SubscriptionSlotHistory[];
	continuationToken: string;
	totalSize: Int64;
}

export interface PopupDisplaySettings {
	pages: number[];
	editorsPickIds: string[];
}

export interface PopupPage {
	imageUrl: string;
	title: string;
	body: string;
}

export interface PopupActionButton {
	label: string;
	actionUrl: string;
	textColorCode: string;
	backgroundColorCode: string;
}

export interface PopupDismissButton {
	label: string;
	textColorCode: string;
	backgroundColorCode: string;
}

export interface PopupContent {
	pages: PopupPage[];
	actionButton: PopupActionButton;
	dismissButton: PopupDismissButton;
}

export interface ShopPopup {
	popupId: string;
	displaySettings: PopupDisplaySettings;
	displayCount: PopupDisplayCount;
	content: PopupContent;
	displayPriority: number;
	visualType: PopupVisualType;
	displayIntervalInDays: number;
}

export interface GetPopupsResponse {
	popups: ShopPopup[];
}

export interface GetSubscriptionSlotStatusResponse {
	productIdsInSlots: string[];
	usedSlotCount: number;
	maxSlotCount: number;
}

export interface GetProductKeyboardListResponse {
	productType: ProductType;
	keyboardProductIds: string[];
}

export interface GetMusicSubscriptionStatusResponse {
	validUntil: Int64;
	expired: boolean;
	isStickersPremiumEnabled: boolean;
}

export interface StartBundleSubscriptionResponse {
	result: StartBundleSubscriptionResult;
}

export interface StopBundleSubscriptionResponse {
	result: StopBundleSubscriptionResult;
}

export interface GetSubscriptionCouponCodeResponse {
	result: GetSubscriptionCouponCodeResult;
	couponCode: string;
}

export interface GetSubscriptionCouponCampaignResponse {
	status: SubscriptionCouponCampaignStatus;
}

export interface PopupModel {
	popupId: string;
	active: boolean;
}

export interface GetPopupDisplayStatusResponse {
	popups: { [k: string]: PopupModel };
}

export interface GetFilteredProductsResponse {
	results: ProductSearchSummary[];
	continuationToken: string;
	totalSize: Int64;
}

export interface GetProductLatestVersionForUserResponse {
	latestVersion: Int64;
	latestVersionString: string;
}

export interface GetSubscriptionAgreementStatusResponse {
	accepted: boolean;
}

export interface AcceptSubscriptionAgreementResponse {
	result: AcceptSubscriptionAgreementResult;
}

export interface ShouldShowWelcomeStickerBannerResponse {
	shouldShowBanner: boolean;
}

export interface StickerDisplayData {
	stickerHash: string;
	stickerResourceType: StickerResourceType;
	nameTextProperty: ImageTextProperty;
	popupLayer: PopupLayer;
	stickerSize: StickerSize;
	productAvailability: ProductAvailability;
	height: number;
	width: number;
	version: Int64;
	availableForCombinationSticker: boolean;
}

export interface DisplayData {
	stickerSummary: StickerDisplayData;
}

export interface CollectionItem {
	itemId: string;
	productId: string;
	displayData: DisplayData;
	sortId: number;
}

export interface Collection {
	collectionId: string;
	items: CollectionItem[];
	productType: ProductType;
	createdTimeMillis: Int64;
	updatedTimeMillis: Int64;
}

export interface GetUserCollectionsResponse {
	collections: Collection[];
	updated: boolean;
}

export interface CreateCollectionForUserResponse {
	collection: Collection;
}

export interface AddItemToCollectionResponse {}

export interface RemoveItemFromCollectionResponse {}

export interface IsProductForCollectionsResponse {
	isAvailable: boolean;
}

export enum ExtendedProfileAttribute {}

export enum PrivacyLevelType {
	PUBLIC = 0,
	PRIVATE = 1,
}

export enum PaidCallerIdStatus {
	NOT_SPECIFIED = 0,
	VALID = 1,
	VERIFICATION_REQUIRED = 2,
	NOT_PERMITTED = 3,
	LIMIT_EXCEEDED = 4,
	LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5,
}

export enum PaidCallProductType {
	COIN = 0,
	CREDIT = 1,
	MONTHLY = 2,
}

export enum PaidCallType {
	OUT = 0,
	IN = 1,
	TOLLFREE = 2,
	RECORD = 3,
	AD = 4,
	CS = 5,
}

export enum BuddyBannerLinkType {
	BUDDY_BANNER_LINK_HIDDEN = 0,
	BUDDY_BANNER_LINK_MID = 1,
	BUDDY_BANNER_LINK_URL = 2,
}

export enum BuddyOnAirType {
	NORMAL = 0,
	LIVE = 1,
	VOIP = 2,
}

export enum Diff {
	ADDED = 0,
	UPDATED = 1,
	REMOVED = 2,
}

export enum ReportType {
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
	OTHER = 4,
}

export enum ReportCategory {
	PUSH_NORMAL_PLAIN = 0,
	PUSH_NORMAL_E2EE = 1,
	PUSH_VOIP_PLAIN = 2,
	PUSH_VOIP_E2EE = 3,
}

export enum BuddyResultState {
	ACCEPTED = 1,
	SUCCEEDED = 2,
	FAILED = 3,
	CANCELLED = 4,
	NOTIFY_FAILED = 5,
	STORING = 11,
	UPLOADING = 21,
	NOTIFYING = 31,
	REMOVING_SUBSCRIPTION = 41,
	UNREGISTERING_ACCOUNT = 42,
	NOTIFYING_LEAVE_CHAT = 43,
}

export enum BuddySearchRequestSource {
	NA = 0,
	FRIEND_VIEW = 1,
	OFFICIAL_ACCOUNT_VIEW = 2,
}

export enum CarrierCode {
	NOT_SPECIFIED = 0,
	JP_DOCOMO = 1,
	JP_AU = 2,
	JP_SOFTBANK = 3,
	JP_DOCOMO_LINE = 4,
	KR_SKT = 17,
	KR_KT = 18,
	KR_LGT = 19,
}

export enum ChannelConfiguration {
	MESSAGE = 0,
	MESSAGE_NOTIFICATION = 1,
	NOTIFICATION_CENTER = 2,
}

export enum ChannelPermission {
	PROFILE = 0,
	FRIENDS = 1,
	GROUP = 2,
}

export enum ChannelFeatureLicense {
	BLE_LCS_API_USABLE = 26,
	PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27,
	ALLOW_IOS_WEBKIT = 28,
}

export enum ChannelSyncType {
	SYNC = 0,
	REMOVE = 1,
	REMOVE_ALL = 2,
}

export enum LoginType {
	ID_CREDENTIAL = 0,
	QRCODE = 1,
	ID_CREDENTIAL_WITH_E2EE = 2,
}

export enum ContactAttribute {
	CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL = 1,
	CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL = 2,
	CONTACT_ATTRIBUTE_CAPABLE_MY_HOME = 16,
	CONTACT_ATTRIBUTE_CAPABLE_BUDDY = 32,
}

export enum ContactCategory {
	NORMAL = 0,
	RECOMMEND = 1,
}

export enum AsymmetricKeyAlgorithm {
	ASYMMETRIC_KEY_ALGORITHM_RSA = 1,
	ASYMMETRIC_KEY_ALGORITHM_ECDH = 2,
}

export enum GroupPreferenceAttribute {
	INVITATION_TICKET = 1,
	FAVORITE_TIMESTAMP = 2,
}

export enum RoomAttribute {
	ALL = 255,
	NOTIFICATION_SETTING = 1,
}

export enum AccountMigrationCheckType {
	SKIP = 0,
	PINCODE = 1,
	SECURITY_CENTER = 2,
}

export enum EmailConfirmationType {
	SERVER_SIDE_EMAIL = 0,
	CLIENT_SIDE_EMAIL = 1,
}

export enum SquareChatAnnouncementType {
	TEXT_MESSAGE = 0,
}

export enum SquareChatAttribute {
	NAME = 2,
	SQUARE_CHAT_IMAGE = 3,
	STATE = 4,
}

export enum SquareMemberAttribute {
	DISPLAY_NAME = 1,
	PROFILE_IMAGE = 2,
	ABLE_TO_RECEIVE_MESSAGE = 3,
	MEMBERSHIP_STATE = 5,
	ROLE = 6,
	PREFERENCE = 7,
}

export enum SquareMemberRelationAttribute {
	BLOCKED = 1,
}

export enum SquarePreferenceAttribute {
	FAVORITE = 1,
	NOTI_FOR_NEW_JOIN_REQUEST = 2,
}

export enum CommitMessageResultCode {
	DELIVERED = 0,
	DELIVERY_SKIPPED = 1,
	DELIVERY_RESTRICTED = 2,
}

export enum GroupAttribute {
	NAME = 1,
	PICTURE_STATUS = 2,
	ALL = 255,
	PREVENTED_JOIN_BY_TICKET = 4,
	NOTIFICATION_SETTING = 8,
}

export enum LoginResultType {
	SUCCESS = 1,
	REQUIRE_QRCODE = 2,
	REQUIRE_DEVICE_CONFIRM = 3,
	REQUIRE_SMS_CONFIRM = 4,
}

export enum MessageOperationType {
	SEND_MESSAGE = 1,
	RECEIVE_MESSAGE = 2,
	READ_MESSAGE = 3,
	NOTIFIED_READ_MESSAGE = 4,
	NOTIFIED_JOIN_CHAT = 5,
	FAILED_SEND_MESSAGE = 6,
	SEND_CONTENT = 7,
	SEND_CONTENT_RECEIPT = 8,
	SEND_CHAT_REMOVED = 9,
	REMOVE_ALL_MESSAGES = 10,
}

export enum FriendRequestDirection {
	INCOMING = 1,
	OUTGOING = 2,
}

export enum NotificationItemFetchMode {
	ALL = 0,
	APPEND = 1,
}

export enum NotificationQueueType {
	GLOBAL = 1,
	MESSAGE = 2,
	PRIMARY = 3,
}

export enum PersonalInfo {
	EMAIL = 0,
	PHONE = 1,
	BIRTHDAY = 2,
	RAW_BIRTHDAY = 3,
}

export enum PayloadType {
	PAYLOAD_BUY = 101,
	PAYLOAD_CS = 111,
	PAYLOAD_BONUS = 121,
	PAYLOAD_EVENT = 131,
}

export enum PaymentPgType {
	PAYMENT_PG_NONE = 0,
	PAYMENT_PG_AU = 1,
	PAYMENT_PG_AL = 2,
}

export enum PaymentType {
	PAYMENT_APPLE = 1,
	PAYMENT_GOOGLE = 2,
}

export enum ProductBannerLinkType {
	BANNER_LINK_NONE = 0,
	BANNER_LINK_ITEM = 1,
	BANNER_LINK_URL = 2,
	BANNER_LINK_CATEGORY = 3,
}

export enum ProductEventType {
	NO_EVENT = 0,
	CARRIER_ANY = 65537,
	BUDDY_ANY = 131073,
	INSTALL_IOS = 196609,
	INSTALL_ANDROID = 196610,
	MISSION_ANY = 262145,
	MUSTBUY_ANY = 327681,
}

export enum ProfileAttribute {
	ALL = 511,
	EMAIL = 1,
	DISPLAY_NAME = 2,
	PHONETIC_NAME = 4,
	PICTURE = 8,
	STATUS_MESSAGE = 16,
	ALLOW_SEARCH_BY_USERID = 32,
	ALLOW_SEARCH_BY_EMAIL = 64,
	BUDDY_STATUS = 128,
	MUSIC_PROFILE = 256,
}

export enum PublicType {
	HIDDEN = 0,
	PUBLIC = 1000,
}

export enum RedirectType {
	NONE = 0,
	EXPIRE_SECOND = 1,
}

export enum RegistrationType {
	PHONE = 0,
	EMAIL_WAP = 1,
	FACEBOOK = 2305,
	SINA = 2306,
	RENREN = 2307,
	FEIXIN = 2308,
}

export enum ChatRoomAnnouncementType {
	MESSAGE = 0,
	NOTE = 1,
}

export enum SettingsAttribute {
	ALL = 2147483647,
	NOTIFICATION_ENABLE = 1,
	NOTIFICATION_MUTE_EXPIRATION = 2,
	NOTIFICATION_NEW_MESSAGE = 4,
	NOTIFICATION_GROUP_INVITATION = 8,
	NOTIFICATION_SHOW_MESSAGE = 16,
	NOTIFICATION_INCOMING_CALL = 32,
	NOTIFICATION_SOUND_MESSAGE = 256,
	NOTIFICATION_SOUND_GROUP = 512,
	NOTIFICATION_DISABLED_WITH_SUB = 65536,
	NOTIFICATION_PAYMENT = 131072,
	PRIVACY_SYNC_CONTACTS = 64,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
	PRIVACY_SEARCH_BY_USERID = 8192,
	PRIVACY_SEARCH_BY_EMAIL = 16384,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
	PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
	PRIVACY_AGREE_USE_PAIDCALL = 134217728,
	CONTACT_MY_TICKET = 1024,
	IDENTITY_PROVIDER = 2048,
	IDENTITY_IDENTIFIER = 4096,
	SNS_ACCOUNT = 524288,
	PHONE_REGISTRATION = 1048576,
	PREFERENCE_LOCALE = 32768,
	CUSTOM_MODE = 4194304,
	EMAIL_CONFIRMATION_STATUS = 16777216,
	ACCOUNT_MIGRATION_PINCODE = 268435456,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
	SECURITY_CENTER_SETTINGS = 262144,
}

export enum SettingsAttributeEx {
	NOTIFICATION_ENABLE = 0,
	NOTIFICATION_MUTE_EXPIRATION = 1,
	NOTIFICATION_NEW_MESSAGE = 2,
	NOTIFICATION_GROUP_INVITATION = 3,
	NOTIFICATION_SHOW_MESSAGE = 4,
	NOTIFICATION_INCOMING_CALL = 5,
	NOTIFICATION_SOUND_MESSAGE = 8,
	NOTIFICATION_SOUND_GROUP = 9,
	NOTIFICATION_DISABLED_WITH_SUB = 16,
	NOTIFICATION_PAYMENT = 17,
	NOTIFICATION_MENTION = 40,
	NOTIFICATION_THUMBNAIL = 45,
	PRIVACY_SYNC_CONTACTS = 6,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
	PRIVACY_SEARCH_BY_USERID = 13,
	PRIVACY_SEARCH_BY_EMAIL = 14,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
	PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
	PRIVACY_ALLOW_FRIEND_REQUEST = 30,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
	PRIVACY_AGREE_USE_PAIDCALL = 27,
	CONTACT_MY_TICKET = 10,
	IDENTITY_PROVIDER = 11,
	IDENTITY_IDENTIFIER = 12,
	SNS_ACCOUNT = 19,
	PHONE_REGISTRATION = 20,
	PREFERENCE_LOCALE = 15,
	CUSTOM_MODE = 22,
	EMAIL_CONFIRMATION_STATUS = 24,
	ACCOUNT_MIGRATION_PINCODE = 28,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
	SECURITY_CENTER_SETTINGS = 18,
	E2EE_ENABLE = 33,
	ENABLE_SOUND_TO_TEXT = 47,
	HITOKOTO_BACKUP_REQUESTED = 34,
	CONTACT_ALLOW_FOLLOWING = 36,
	PRIVACY_ALLOW_NEARBY = 37,
	AGREEMENT_NEARBY = 38,
	AGREEMENT_SQUARE = 39,
	ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
	AGREEMENT_BOT_USE = 42,
	AGREEMENT_SHAKE_FUNCTION = 43,
	AGREEMENT_MOBILE_CONTACT_NAME = 44,
	AGREEMENT_SOUND_TO_TEXT = 46,
}

export enum SpammerReason {
	OTHER = 0,
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
}

export enum SyncActionType {
	SYNC = 0,
	REPORT = 1,
}

export enum SpotCategory {
	UNKNOWN = 0,
	GOURMET = 1,
	BEAUTY = 2,
	TRAVEL = 3,
	SHOPPING = 4,
	ENTERTAINMENT = 5,
	SPORTS = 6,
	TRANSPORT = 7,
	LIFE = 8,
	HOSPITAL = 9,
	FINANCE = 10,
	EDUCATION = 11,
	OTHER = 12,
	ALL = 10000,
}

export enum SyncCategory {
	PROFILE = 0,
	SETTINGS = 1,
	OPS = 2,
	CONTACT = 3,
	RECOMMEND = 4,
	BLOCK = 5,
	GROUP = 6,
	ROOM = 7,
	NOTIFICATION = 8,
	ADDRESS_BOOK = 9,
}

export enum TMessageBoxStatus {
	ACTIVATED = 1,
	UNREAD = 2,
}

export enum UniversalNotificationServiceErrorCode {
	INTERNAL_ERROR = 0,
	INVALID_KEY = 1,
	ILLEGAL_ARGUMENT = 2,
	TOO_MANY_REQUEST = 3,
	AUTHENTICATION_FAILED = 4,
	NO_WRITE_PERMISSION = 5,
}

export enum UnregistrationReason {
	UNREGISTRATION_REASON_UNREGISTER_USER = 1,
	UNREGISTRATION_REASON_UNBIND_DEVICE = 2,
}

export enum VerificationResult {
	FAILED = 0,
	OK_NOT_REGISTERED_YET = 1,
	OK_REGISTERED_WITH_SAME_DEVICE = 2,
	OK_REGISTERED_WITH_ANOTHER_DEVICE = 3,
}

export enum WapInvitationType {
	REGISTRATION = 1,
	CHAT = 2,
}

export enum MediaType {
	AUDIO = 1,
	VIDEO = 2,
}

export enum SQErrorCode {
	UNKNOWN = 0,
	ILLEGAL_ARGUMENT = 400,
	AUTHENTICATION_FAILURE = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	REVISION_MISMATCH = 409,
	PRECONDITION_FAILED = 410,
	INTERNAL_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	TRY_AGAIN_LATER = 505,
}

export enum SquareFeatureSetAttribute {
	CREATING_SECRET_SQUARE_CHAT = 1,
	INVITING_INTO_OPEN_SQUARE_CHAT = 2,
}

export enum SquareChatMemberAttribute {
	MEMBERSHIP_STATE = 4,
	NOTIFICATION_MESSAGE = 6,
}

export enum FetchDirection {
	FORWARD = 1,
	BACKWARD = 2,
}

export enum SquareAttribute {
	NAME = 1,
	WELCOME_MESSAGE = 2,
	PROFILE_IMAGE = 3,
	DESCRIPTION = 4,
	SEARCHABLE = 6,
	CATEGORY = 7,
	INVITATION_URL = 8,
	ABLE_TO_USE_INVITATION_URL = 9,
	STATE = 10,
}

export enum SquareAuthorityAttribute {
	UPDATE_SQUARE_PROFILE = 1,
	INVITE_NEW_MEMBER = 2,
	APPROVE_JOIN_REQUEST = 3,
	CREATE_POST = 4,
	CREATE_OPEN_SQUARE_CHAT = 5,
	DELETE_SQUARE_CHAT_OR_POST = 6,
	REMOVE_SQUARE_MEMBER = 7,
	GRANT_ROLE = 8,
	ENABLE_INVITATION_TICKET = 9,
	CREATE_CHAT_ANNOUNCEMENT = 10,
}

export enum SuggestDictionaryIncrementStatus {
	SUCCESS = 0,
	INVALID_REVISION = 1,
	TOO_LARGE_DATA = 2,
	SCHEME_CHANGED = 3,
	RETRY = 4,
	FAIL = 5,
	TOO_OLD_DATA = 6,
}

export interface MessageCommitResult {
	requestId: string;
	state: BuddyResultState;
	messageStoreRequestId: string;
	messageIds: string[];
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	blockCount: Int64;
	unregisteredCount: Int64;
	unrelatedCount: Int64;
	errorDescription: string;
}

export interface CallHost {
	host: string;
	port: number;
	zone: string;
}

export interface AgeCheckDocomoResult {
	authUrl: string;
	userAgeType: UserAgeType;
}

export interface AgeCheckRequestResult {
	authUrl: string;
	sessionId: string;
}

export interface Announcement {
	index: number;
	forceUpdate: boolean;
	title: string;
	text: string;
	createdTime: Int64;
	pictureUrl: string;
	thumbnailUrl: string;
}

export interface ChannelProvider {
	name: string;
}

export interface ChannelDomain {
	host: string;
	removed: boolean;
}

export interface OTPResult {
	otpId: string;
	otp: string;
}

export interface SquareInfo {
	square: Square;
	squareStatus: SquareStatus;
	squareNoteStatus: NoteStatus;
}

export interface BotUseInfo {
	botUseAgreementAccepted: boolean;
	botInFriends: boolean;
	primaryApplication: string;
	locale: string;
}

export interface PaidCallAdCountry {
	countryCode: string;
	rateDivision: string;
}

export interface PaidCallAdResult {
	adRemains: number;
}

export interface PaidCallBalance {
	productType: PaidCallProductType;
	productName: string;
	unit: string;
	limitedPaidBalance: number;
	limitedFreeBalance: number;
	unlimitedPaidBalance: number;
	unlimitedFreeBalance: number;
	startTime: Int64;
	endTime: Int64;
	autopayEnabled: boolean;
}

export interface PaidCallCurrencyExchangeRate {
	currencyCode: string;
	currencyName: string;
	currencySign: string;
	preferred: boolean;
	coinRate: string;
	creditRate: string;
}

export interface ExtendedProfileBirthday {
	year: string;
	yearPrivacyLevelType: PrivacyLevelType;
	yearEnabled: boolean;
	day: string;
	dayPrivacyLevelType: PrivacyLevelType;
	dayEnabled: boolean;
}

export interface ExtendedProfile {
	birthday: ExtendedProfileBirthday;
}

export interface PaidCallDialing {
	type: PaidCallType;
	dialedNumber: string;
	serviceDomain: string;
	productType: PaidCallProductType;
	productName: string;
	multipleProduct: boolean;
	callerIdStatus: PaidCallerIdStatus;
	balance: number;
	unit: string;
	rate: number;
	displayCode: string;
	calledNumber: string;
	calleeNationalNumber: string;
	calleeCallingCode: string;
	rateDivision: string;
	adMaxMin: number;
	adRemains: number;
	adSessionId: string;
}

export interface SpotItem {
	name: string;
	phone: string;
	category: SpotCategory;
	mid: string;
	countryAreaCode: string;
	freePhoneCallable: boolean;
}

export interface SpotNearbyItem {
	spotItem: SpotItem;
	location: Location;
}

export interface SpotNearbyResponse {
	spotNearbyItems: SpotNearbyItem[];
}

export interface SpotPhoneNumberResponse {
	spotItems: SpotItem[];
}

export interface PaidCallHistory {
	seq: Int64;
	type: PaidCallType;
	dialedNumber: string;
	calledNumber: string;
	toMid: string;
	toName: string;
	setupTime: Int64;
	startTime: Int64;
	endTime: Int64;
	duration: Int64;
	terminate: number;
	productType: PaidCallProductType;
	charge: number;
	unit: string;
	result: string;
}

export interface PaidCallHistoryResult {
	historys: PaidCallHistory[];
	hasNext: boolean;
}

export interface PaidCallMetadataResult {
	currencyExchangeRates: PaidCallCurrencyExchangeRate[];
	recommendedCountryCodes: string[];
	adCountries: PaidCallAdCountry[];
}

export interface PaidCallRedeemResult {
	eventName: string;
	eventAmount: number;
}

export interface PaidCallResponse {
	host: CallHost;
	dialing: PaidCallDialing;
	token: string;
	spotItems: SpotItem[];
}

export interface PaidCallUserRate {
	countryCode: string;
	rate: number;
	rateDivision: string;
	rateName: string;
}

export interface ChannelInfo {
	channelId: string;
	name: string;
	entryPageUrl: string;
	descriptionText: string;
	provider: ChannelProvider;
	publicType: PublicType;
	iconImage: string;
	permissions: string[];
	iconThumbnailImage: string;
	channelConfigurations: ChannelConfiguration[];
	lcsAllApiUsable: boolean;
	allowedPermissions: ChannelPermission[];
	channelDomains: ChannelDomain[];
	updatedTimestamp: Int64;
}

export interface ApprovedChannelInfo {
	channelInfo: ChannelInfo;
	approvedAt: Int64;
}

export interface ApprovedChannelInfos {
	approvedChannelInfos: ApprovedChannelInfo[];
	revision: Int64;
}

export interface AuthQrcode {
	qrcode: string;
	verifier: string;
	callbackUrl: string;
}

export interface AnalyticsInfo {
	gaSamplingRate: number;
	tmid: string;
}

export interface ContactTransition {
	ownerMid: string;
	targetMid: string;
	previousStatus: ContactStatus;
	resultStatus: ContactStatus;
}

export interface UserTicketResponse {
	mid: string;
	userTicket: string;
}

export interface BuddyBanner {
	buddyBannerLinkType: BuddyBannerLinkType;
	buddyBannerLink: string;
	buddyBannerImageUrl: string;
}

export interface BuddyList {
	classification: string;
	displayName: string;
	totalBuddyCount: number;
	popularContacts: Contact[];
}

export interface RegisterWithPhoneNumberResult {
	authToken: string;
	recommendEmailRegistration: boolean;
	certificate: string;
}

export interface BuddyMessageRequest {
	contentType: ContentType;
	text: string;
	location: Location;
	content: Buffer;
	contentMetadata: { [k: string]: string };
}

export interface BuddyOnAirUrls {
	hls: { [k: string]: string };
	smoothStreaming: { [k: string]: string };
}

export interface BuddyOnAir {
	mid: string;
	freshnessLifetime: Int64;
	onAirId: string;
	onAir: boolean;
	text: string;
	viewerCount: Int64;
	targetCount: Int64;
	onAirType: BuddyOnAirType;
	onAirUrls: BuddyOnAirUrls;
}

export interface BuddyProfile {
	buddyId: string;
	mid: string;
	searchId: string;
	displayName: string;
	statusMessage: string;
	contactCount: Int64;
}

export interface CommitMessageResult {
	message: Message;
	code: CommitMessageResultCode;
	reason: string;
	successCount: Int64;
	failCount: Int64;
	unregisterCount: Int64;
	blockCount: Int64;
}

export interface BuddySearchResult {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;
	businessAccount: boolean;
}

export interface SyncParamMid {
	mid: string;
	diff: Diff;
	revision: Int64;
}

export interface SIMInfo {
	phoneNumber: string;
	countryCode: string;
}

export interface SyncParamContact {
	syncParamMid: SyncParamMid;
	contactStatus: ContactStatus;
}

export interface ChannelDomains {
	channelDomains: ChannelDomain[];
	revision: Int64;
}

export interface ProductCategory {
	productCategoryId: Int64;
	title: string;
	productCount: number;
	newFlag: boolean;
}

export interface ChannelInfos {
	channelInfos: ChannelInfo[];
	revision: Int64;
}

export interface ChannelNotificationSetting {
	channelId: string;
	name: string;
	notificationReceivable: boolean;
	messageReceivable: boolean;
	showDefault: boolean;
}

export interface ChannelSyncDatas {
	channelInfos: ChannelInfo[];
	channelDomains: ChannelDomain[];
	revision: Int64;
	expires: Int64;
}

export interface NotiCenterEventData {
	id: string;
	to: string;
	from_: string;
	toChannel: string;
	fromChannel: string;
	eventType: string;
	createdTime: Int64;
	operationRevision: Int64;
	content: { [k: string]: string };
	push: { [k: string]: string };
}

export interface ChannelSettings {
	unapprovedMessageReceivable: boolean;
}

export interface ChannelIdWithLastUpdated {
	channelId: string;
	lastUpdated: Int64;
}

export interface Coin {
	freeCoinBalance: number;
	payedCoinBalance: number;
	totalCoinBalance: number;
	rewardCoinBalance: number;
}

export interface CoinPayLoad {
	payCoin: number;
	freeCoin: number;
	type: PayloadType;
	rewardCoin: number;
}

export interface CoinHistory {
	payDate: Int64;
	coinBalance: number;
	coin: number;
	price: string;
	title: string;
	refund: boolean;
	paySeq: string;
	currency: string;
	currencySign: string;
	displayPrice: string;
	payload: CoinPayLoad;
	channelId: string;
}

export interface CoinHistoryCondition {
	start: Int64;
	size: number;
	language: string;
	eddt: string;
	appStoreCode: PaymentType;
}

export interface CoinHistoryResult {
	historys: CoinHistory[];
	balance: Coin;
	hasNext: boolean;
}

export interface CoinProductItem {
	itemId: string;
	coin: number;
	freeCoin: number;
	currency: string;
	price: string;
	displayPrice: string;
	name: string;
	desc: string;
}

export interface CoinPurchaseConfirm {
	orderId: string;
	appStoreCode: PaymentType;
	receipt: string;
	signature: string;
	seller: string;
	requestType: string;
	ignoreReceipt: boolean;
}

export interface CoinPurchaseReservation {
	productId: string;
	country: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	language: string;
	pgCode: PaymentPgType;
	redirectUrl: string;
}

export interface CoinUseReservationItem {
	itemId: string;
	itemName: string;
	amount: number;
}

export interface CoinUseReservation {
	channelId: string;
	shopOrderId: string;
	appStoreCode: PaymentType;
	items: CoinUseReservationItem[];
	country: string;
}

export interface CompactContact {
	mid: string;
	createdTime: Int64;
	modifiedTime: Int64;
	status: ContactStatus;
	settings: Int64;
	displayNameOverridden: string;
}

export interface ContactReport {
	mid: string;
	exists: boolean;
	contact: Contact;
}

export interface ContactReportResult {
	mid: string;
	exists: boolean;
}

export interface DeviceInfo {
	deviceName: string;
	systemName: string;
	systemVersion: string;
	model: string;
	carrierCode: CarrierCode;
	carrierName: string;
	applicationType: ApplicationType;
}

export interface EmailConfirmation {
	usePasswordSet: boolean;
	email: string;
	password: string;
	ignoreDuplication: boolean;
}

export interface EmailConfirmationSession {
	emailConfirmationType: EmailConfirmationType;
	verifier: string;
	targetEmail: string;
}

export interface FriendChannelMatrix {
	channelId: string;
	representMid: string;
	count: number;
	point: number;
}

export interface FriendChannelMatricesResponse {
	expires: Int64;
	matrices: FriendChannelMatrix[];
}

export interface FriendRequest {
	eMid: string;
	mid: string;
	direction: FriendRequestDirection;
	method: FriendRequestMethod;
	param: string;
	timestamp: Int64;
	seqId: Int64;
	displayName: string;
	picturePath: string;
	pictureStatus: string;
}

export interface FriendRequestsInfo {
	totalIncomingCount: number;
	totalOutgoingCount: number;
	recentIncomings: FriendRequest[];
	recentOutgoings: FriendRequest[];
	totalIncomingLimit: number;
	totalOutgoingLimit: number;
}

export interface Geolocation {
	longitude: number;
	latitude: number;
}

export interface NotificationTarget {
	applicationType: string;
	applicationVersion: string;
	region: string;
}

export interface GroupPreference {
	invitationTicket: string;
	favoriteTimestamp: Int64;
}

export interface Group {
	id: string;
	createdTime: Int64;
	name: string;
	pictureStatus: string;
	preventedJoinByTicket: boolean;
	groupPreference: GroupPreference;
	members: Contact[];
	creator: Contact;
	invitee: Contact[];
	notificationDisabled: boolean;
}

export interface IdentityCredential {
	provider: IdentityProvider;
	identifier: string;
	password: string;
}

export interface LastReadMessageId {
	mid: string;
	lastReadMessageId: string;
}

export interface LastReadMessageIds {
	chatId: string;
	lastReadMessageIds: LastReadMessageId[];
}

export interface LoginResult {
	authToken: string;
	certificate: string;
	verifier: string;
	pinCode: string;
	type: LoginResultType;
	lastPrimaryBindTime: Int64;
	displayMessage: string;
	sessionForSMSConfirm: VerificationSessionData;
}

export interface LoginRequest {
	type: number;
	identityProvider: number;
	identifier: string;
	password: string;
	keepLoggedIn: boolean;
	accessLocation: string;
	systemName: string;
	certificate: string;
	verifier: string;
	secret: string;
	e2eeVersion: number;
}

export interface LoginSession {
	tokenKey: string;
	expirationTime: Int64;
	applicationType: ApplicationType;
	systemName: string;
	accessLocation: string;
}

export interface MessageOperation {
	revision: Int64;
	createdTime: Int64;
	type: MessageOperationType;
	reqSeq: number;
	status: OpStatus;
	param1: string;
	param2: string;
	param3: string;
	message: Message;
}

export interface MessageOperations {
	operations: MessageOperation[];
	endFlag: boolean;
}

export interface MessageStoreResult {
	requestId: string;
	messageIds: string[];
}

export interface MetaProfile {
	createTime: Int64;
	regionCode: string;
	identities: { [k: number /*RegistrationType*/]: string };
}

export interface NotificationItem {
	id: string;
	_from: string;
	to: string;
	fromChannel: string;
	toChannel: string;
	revision: Int64;
	createdTime: Int64;
	content: { [k: string]: string };
}

export interface NotificationFetchResult {
	fetchMode: NotificationItemFetchMode;
	itemList: NotificationItem[];
}

export interface PaymentReservation {
	receiverMid: string;
	productId: string;
	language: string;
	location: string;
	currency: string;
	price: string;
	appStoreCode: PaymentType;
	messageText: string;
	messageTemplate: number;
	packageId: Int64;
}

export interface PaymentReservationResult {
	orderId: string;
	confirmUrl: string;
	extras: { [k: string]: string };
}

export interface Product {
	productId: string;
	packageId: Int64;
	version: number;
	authorName: string;
	onSale: boolean;
	validDays: number;
	saleType: number;
	copyright: string;
	title: string;
	descriptionText: string;
	shopOrderId: Int64;
	fromMid: string;
	toMid: string;
	validUntil: Int64;
	priceTier: number;
	price: string;
	currency: string;
	currencySymbol: string;
	paymentType: PaymentType;
	createDate: Int64;
	ownFlag: boolean;
	eventType: ProductEventType;
	urlSchema: string;
	downloadUrl: string;
	buddyMid: string;
	publishSince: Int64;
	newFlag: boolean;
	missionFlag: boolean;
	categories: ProductCategory[];
	missionButtonText: string;
	missionShortDescription: string;
	authorId: string;
	grantedByDefault: boolean;
	displayOrder: number;
	availableForPresent: boolean;
	availableForMyself: boolean;
	hasAnimation: boolean;
	hasSound: boolean;
	recommendationsEnabled: boolean;
	stickerResourceType: StickerResourceType;
}

export interface ProductSimple {
	productId: string;
	packageId: Int64;
	version: number;
	onSale: boolean;
	validUntil: Int64;
	stickerIdRanges: StickerIdRange[];
	grantedByDefault: boolean;
	displayOrder: number;
}

export interface ProductSimpleList {
	hasNext: boolean;
	reinvokeHour: number;
	lastVersionSeq: Int64;
	productList: ProductSimple[];
	recentNewReleaseDate: Int64;
	recentEventReleaseDate: Int64;
}

export interface ProximityMatchCandidateResult {
	users: Contact[];
	buddies: Contact[];
}

export interface RegisterWithSnsIdResult {
	authToken: string;
	userCreated: boolean;
}

export interface RequestTokenResponse {
	requestToken: string;
	returnUrl: string;
}

export interface SuggestDictionary {
	language: string;
	name: string;
}

export interface SuggestItemDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	revision: Int64;
	scheme: string;
	data: Buffer;
}

export interface SuggestTagDictionaryIncrement {
	status: SuggestDictionaryIncrementStatus;
	language: string;
	revision: Int64;
	scheme: string;
	data: Buffer;
}

export interface SuggestDictionaryIncrements {
	itemIncrement: SuggestItemDictionaryIncrement;
	tagIncrements: SuggestTagDictionaryIncrement[];
}

export interface SuggestItemDictionaryRevision {
	revision: Int64;
	scheme: string;
}

export interface SuggestTagDictionaryRevision {
	language: string;
	revision: Int64;
	scheme: string;
}

export interface SuggestDictionaryRevisions {
	itemRevision: SuggestItemDictionaryRevision;
	tagRevisions: SuggestTagDictionaryRevision[];
}

export interface SuggestDictionarySettings {
	revision: Int64;
	newRevision: Int64;
	dictionaries: SuggestDictionary[];
	preloadedDictionaries: string[];
}

export interface PhoneInfoForChannel {
	mid: string;
	normalizedPhoneNumber: string;
	allowedToSearchByPhoneNumber: boolean;
	allowedToReceiveMessageFromNonFriend: boolean;
	region: string;
}

export interface PhoneVerificationResult {
	verificationResult: VerificationResult;
	accountMigrationCheckType: AccountMigrationCheckType;
	recommendAddFriends: boolean;
}

export interface PlaceSearchInfo {
	name: string;
	address: string;
	latitude: number;
	longitude: number;
}

export interface SecurityCenterResult {
	uri: string;
	token: string;
	cookiePath: string;
	skip: boolean;
}

export interface SendBuddyMessageResult {
	requestId: string;
	state: BuddyResultState;
	messageId: string;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	blockCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;
}

export interface SetBuddyOnAirResult {
	requestId: string;
	state: BuddyResultState;
	eventNo: number;
	receiverCount: Int64;
	successCount: Int64;
	failCount: Int64;
	cancelCount: Int64;
	unregisterCount: Int64;
	timestamp: Int64;
	message: string;
}

export interface SimpleChannelClient {
	applicationType: string;
	applicationVersion: string;
	locale: string;
}

export interface SimpleChannelContact {
	mid: string;
	displayName: string;
	pictureStatus: string;
	picturePath: string;
	statusMessage: string;
}

export interface SnsFriend {
	snsUserId: string;
	snsUserName: string;
	snsIdType: SnsIdType;
}

export interface SnsFriendContactRegistration {
	contact: Contact;
	snsIdType: SnsIdType;
	snsUserId: string;
}

export interface SnsFriendModification {
	type: ModificationType;
	snsFriend: SnsFriend;
}

export interface SnsFriends {
	snsFriends: SnsFriend[];
	hasMore: boolean;
}

export interface SnsIdUserStatus {
	userExisting: boolean;
	phoneNumberRegistered: boolean;
	sameDevice: boolean;
}

export interface SnsProfile {
	snsUserId: string;
	snsUserName: string;
	email: string;
	thumbnailUrl: string;
}

export interface SystemConfiguration {
	endpoint: string;
	endpointSsl: string;
	updateUrl: string;
	c2dmAccount: string;
	nniServer: string;
}

export interface TMessageBox {
	id: string;
	channelId: string;
	lastSeq: Int64;
	unreadCount: Int64;
	lastModifiedTime: Int64;
	status: number;
	midType: MIDType;
	lastMessages: Message[];
}

export interface TMessageBoxWrapUp {
	messageBox: TMessageBox;
	name: string;
	contacts: Contact[];
	pictureRevision: string;
}

export interface TMessageBoxWrapUpResponse {
	messageBoxWrapUpList: TMessageBoxWrapUp[];
	totalSize: number;
}

export interface SyncRelations {
	syncAll: boolean;
	syncParamContact: SyncParamContact[];
	syncParamMid: SyncParamMid[];
}

export interface SyncScope {
	syncProfile: boolean;
	syncSettings: boolean;
	syncSticker: boolean;
	syncThemeShop: boolean;
	contact: SyncRelations;
	group: SyncRelations;
	room: SyncRelations;
	chat: SyncRelations;
}

export interface JoinSquareResponse {
	square: Square;
	squareAuthority: SquareAuthority;
	squareStatus: SquareStatus;
	squareMember: SquareMember;
	squareFeatureSet: SquareFeatureSet;
	noteStatus: NoteStatus;
}

export interface JoinSquareRequest {
	squareMid: string;
	member: SquareMember;
}

export interface JoinSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
}

export interface JoinSquareChatRequest {
	squareChatMid: string;
}

export interface SendMessageRequest {
	reqSeq: number;
	squareChatMid: string;
	squareMessage: SquareMessage;
}

export interface MarkAsReadRequest {
	squareChatMid: string;
	messageId: string;
}

export interface ApproveSquareMembersResponse {
	approvedMembers: SquareMember[];
	status: SquareStatus;
}

export interface ApproveSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];
}

export interface CreateSquareChatResponse {
	squareChat: SquareChat;
	squareChatStatus: SquareChatStatus;
	squareChatMember: SquareChatMember;
}

export interface CreateSquareChatRequest {
	reqSeq: number;
	squareChat: SquareChat;
	squareMemberMids: string[];
}

export interface CreateSquareRequest {
	reqSeq: number;
	square: Square;
	creator: SquareMember;
}

export interface DeleteSquareResponse {}

export interface DeleteSquareRequest {
	mid: string;
	revision: Int64;
}

export interface DestroyMessageResponse {}

export interface DestroyMessageRequest {
	squareChatMid: string;
	messageId: string;
}

export interface GetSquareChatMembersRequest {
	squareChatMid: string;
	continuationToken: string;
	limit: number;
}

export interface GetSquareChatMembersResponse {
	squareChatMembers: SquareMember[];
	continuationToken: string;
}

export interface GetSquareChatStatusRequest {
	squareChatMid: string;
}

export interface GetSquareChatStatusResponse {
	chatStatus: SquareChatStatus;
}

export interface GetSquareChatRequest {
	squareChatMid: string;
}

export interface GetSquareChatResponse {
	squareChat: SquareChat;
	squareChatMember: SquareChatMember;
	squareChatStatus: SquareChatStatus;
}

export interface GetSquareAuthorityRequest {
	squareMid: string;
}

export interface GetSquareAuthorityResponse {
	authority: SquareAuthority;
}

export interface GetJoinedSquaresRequest {
	continuationToken: string;
	limit: number;
}

export interface GetJoinableSquareChatsRequest {
	squareMid: string;
	continuationToken: string;
	limit: number;
}

export interface GetInvitationTicketUrlRequest {
	mid: string;
}

export interface GetInvitationTicketUrlResponse {
	invitationURL: string;
}

export interface LeaveSquareRequest {
	squareMid: string;
}

export interface LeaveSquareResponse {}

export interface LeaveSquareChatRequest {
	squareChatMid: string;
	sayGoodbye: boolean;
	squareChatMemberRevision: Int64;
}

export interface LeaveSquareChatResponse {}

export interface SquareMemberSearchOption {
	membershipState: SquareMembershipState;
	memberRoles: SquareMemberRole[];
	displayName: string;
	ableToReceiveMessage: BooleanState;
	ableToReceiveFriendRequest: BooleanState;
	chatMidToExcludeMembers: string;
	includingMe: boolean;
}

export interface SearchSquareMembersRequest {
	squareMid: string;
	searchOption: SquareMemberSearchOption;
	continuationToken: string;
	limit: number;
}

export interface SearchSquareMembersResponse {
	members: SquareMember[];
	revision: Int64;
	continuationToken: string;
	totalCount: number;
}

export interface FindSquareByInvitationTicketRequest {
	invitationTicket: string;
}

export interface FetchMyEventsRequest {
	subscriptionId: Int64;
	syncToken: string;
	limit: number;
	continuationToken: string;
}

export interface FetchSquareChatEventsRequest {
	subscriptionId: Int64;
	squareChatMid: string;
	syncToken: string;
	limit: number;
	direction: FetchDirection;
}

export interface InviteToSquareRequest {
	squareMid: string;
	invitees: string[];
	squareChatMid: string;
}

export interface InviteToSquareChatRequest {
	inviteeMids: string[];
	squareChatMid: string;
}

export interface InviteToSquareChatResponse {
	inviteeMids: string[];
}

export interface GetSquareMemberRequest {
	squareMemberMid: string;
}

export interface GetSquareMemberResponse {
	squareMember: SquareMember;
	relation: SquareMemberRelation;
	oneOnOneChatMid: string;
}

export interface GetSquareMembersRequest {
	mids: string[];
}

export interface GetSquareMembersResponse {
	members: SquareMember;
}

export interface GetSquareMemberRelationsRequest {
	state: SquareMemberRelationState;
	continuationToken: string;
	limit: number;
}

export interface GetSquareMemberRelationsResponse {
	squareMembers: SquareMember[];
	relations: { [k: string]: SquareMemberRelation };
	continuationToken: string;
}

export interface GetSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;
}

export interface GetSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	relation: SquareMemberRelation;
}

export interface GetSquareCategoriesRequest {}

export interface GetSquareCategoriesResponse {
	categoryList: Category[];
}

export interface UpdateSquareRequest {
	updatedAttrs: SquareAttribute[];
	square: Square;
}

export interface UpdateSquareResponse {
	updatedAttrs: SquareAttribute[];
	square: Square;
}

export interface SearchSquaresRequest {
	query: string;
	continuationToken: string;
	limit: number;
}

export interface SearchSquaresResponse {
	squares: Square[];
	squareStatuses: { [k: string]: SquareStatus };
	myMemberships: { [k: string]: SquareMember };
	continuationToken: string;
	noteStatuses: { [k: string]: NoteStatus };
}

export interface GetSquareFeatureSetRequest {
	squareMid: string;
}

export interface UpdateSquareFeatureSetRequest {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareFeatureSetResponse {
	updateAttributes: SquareFeatureSetAttribute[];
	squareFeatureSet: SquareFeatureSet;
}

export interface UpdateSquareMemberRequest {
	updatedAttrs: SquareMemberAttribute[];
	updatedPreferenceAttrs: SquarePreferenceAttribute[];
	squareMember: SquareMember;
}

export interface UpdateSquareMemberResponse {
	updatedAttrs: SquareMemberAttribute[];
	squareMember: SquareMember;
	updatedPreferenceAttrs: SquarePreferenceAttribute[];
}

export interface UpdateSquareMembersRequest {
	updatedAttrs: SquareMemberAttribute[];
	members: SquareMember[];
}

export interface UpdateSquareMembersResponse {
	updatedAttrs: SquareMemberAttribute[];
	editor: SquareMember;
	members: { [k: string]: SquareMember };
}

export interface RejectSquareMembersRequest {
	squareMid: string;
	requestedMemberMids: string[];
}

export interface RejectSquareMembersResponse {
	rejectedMembers: SquareMember[];
	status: SquareStatus;
}

export interface RemoveSubscriptionsRequest {
	unsubscriptions: Int64[];
}

export interface RemoveSubscriptionsResponse {}

export interface RefreshSubscriptionsRequest {
	subscriptions: Int64[];
}

export interface RefreshSubscriptionsResponse {
	ttlMillis: Int64;
	subscriptionStates: any;
}

export interface UpdateSquareChatRequest {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;
}

export interface UpdateSquareChatResponse {
	updatedAttrs: SquareChatAttribute[];
	squareChat: SquareChat;
}

export interface DeleteSquareChatRequest {
	squareChatMid: string;
	revision: Int64;
}

export interface DeleteSquareChatResponse {}

export interface UpdateSquareChatMemberRequest {
	updatedAttrs: SquareChatMemberAttribute[];
	chatMember: SquareChatMember;
}

export interface UpdateSquareChatMemberResponse {
	updatedChatMember: SquareChatMember;
}

export interface UpdateSquareAuthorityRequest {
	updateAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;
}

export interface UpdateSquareAuthorityResponse {
	updatdAttributes: SquareAuthorityAttribute[];
	authority: SquareAuthority;
}

export interface UpdateSquareMemberRelationRequest {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;
}

export interface UpdateSquareMemberRelationResponse {
	squareMid: string;
	targetSquareMemberMid: string;
	updatedAttrs: SquareMemberRelationAttribute[];
	relation: SquareMemberRelation;
}

export interface ReportSquareRequest {
	squareMid: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareResponse {}

export interface ReportSquareChatRequest {
	squareMid: string;
	squareChatMid: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareChatResponse {}

export interface ReportSquareMessageRequest {
	squareMid: string;
	squareChatMid: string;
	squareMessageId: string;
	reportType: ReportType;
	otherReason: string;
}

export interface ReportSquareMessageResponse {}

export interface ReportSquareMemberRequest {
	squareMemberMid: string;
	reportType: ReportType;
	otherReason: string;
	squareChatMid: string;
}

export interface ReportSquareMemberResponse {}

export interface GetSquareRequest {
	mid: string;
}

export interface GetSquareStatusRequest {
	squareMid: string;
}

export interface GetSquareStatusResponse {
	squareStatus: SquareStatus;
}

export interface GetNoteStatusRequest {
	squareMid: string;
}

export interface GetNoteStatusResponse {
	squareMid: string;
	status: NoteStatus;
}

export interface CreateSquareChatAnnouncementRequest {
	reqSeq: number;
	squareChatMid: string;
	squareChatAnnouncement: SquareChatAnnouncement;
}

export interface CreateSquareChatAnnouncementResponse {
	announcement: SquareChatAnnouncement;
}

export interface DeleteSquareChatAnnouncementRequest {
	squareChatMid: string;
	announcementSeq: Int64;
}

export interface DeleteSquareChatAnnouncementResponse {}

export interface GetSquareChatAnnouncementsRequest {
	squareChatMid: string;
}

export interface GetJoinedSquareChatsRequest {
	continuationToken: string;
	limit: number;
}

export interface GetJoinedSquareChatsResponse {
	chats: SquareChat[];
	chatMembers: { [k: string]: SquareChatMember };
	statuses: { [k: string]: SquareChatStatus };
	continuationToken: string;
}

export interface UserAuthStatus {
	phoneNumberRegistered: boolean;
	registeredSnsIdTypes: SnsIdType[];
}

export interface WapInvitation {
	type: WapInvitationType;
	inviteeEmail: string;
	inviterMid: string;
	roomMid: string;
}

export interface GroupCallRoute {
	token: string;
	cscf: CallHost;
	mix: CallHost;
}
